
gnome_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000946c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0800957c  0800957c  0001957c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800992c  0800992c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800992c  0800992c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800992c  0800992c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800992c  0800992c  0001992c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009938  08009938  00019938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016e4  20000060  080099a0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000904  20001744  080099a0  00021744  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021def  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007613  00000000  00000000  00041ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c0  00000000  00000000  000494d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001367  00000000  00000000  0004ae90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000b042  00000000  00000000  0004c1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000212bc  00000000  00000000  00057239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084fc3  00000000  00000000  000784f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d1c  00000000  00000000  000fd4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  001041d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08009564 	.word	0x08009564

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08009564 	.word	0x08009564

08000150 <__aeabi_f2uiz>:
 8000150:	0042      	lsls	r2, r0, #1
 8000152:	d20e      	bcs.n	8000172 <__aeabi_f2uiz+0x22>
 8000154:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000158:	d30b      	bcc.n	8000172 <__aeabi_f2uiz+0x22>
 800015a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800015e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000162:	d409      	bmi.n	8000178 <__aeabi_f2uiz+0x28>
 8000164:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000168:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800016c:	fa23 f002 	lsr.w	r0, r3, r2
 8000170:	4770      	bx	lr
 8000172:	f04f 0000 	mov.w	r0, #0
 8000176:	4770      	bx	lr
 8000178:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800017c:	d101      	bne.n	8000182 <__aeabi_f2uiz+0x32>
 800017e:	0242      	lsls	r2, r0, #9
 8000180:	d102      	bne.n	8000188 <__aeabi_f2uiz+0x38>
 8000182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000186:	4770      	bx	lr
 8000188:	f04f 0000 	mov.w	r0, #0
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop

08000190 <_ZN4TaskD1Ev>:
#include "task.h"

#include "Object.h"


class Task : public Object {
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
 8000198:	4a05      	ldr	r2, [pc, #20]	; (80001b0 <_ZN4TaskD1Ev+0x20>)
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	601a      	str	r2, [r3, #0]
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 ff77 	bl	8001094 <_ZN6ObjectD1Ev>
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	4618      	mov	r0, r3
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	080098dc 	.word	0x080098dc

080001b4 <_ZN4TaskD0Ev>:
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	6878      	ldr	r0, [r7, #4]
 80001be:	f7ff ffe7 	bl	8000190 <_ZN4TaskD1Ev>
 80001c2:	2114      	movs	r1, #20
 80001c4:	6878      	ldr	r0, [r7, #4]
 80001c6:	f008 ffb5 	bl	8009134 <_ZdlPvj>
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	4618      	mov	r0, r3
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <_ZN5ClockC1EP17RTC_HandleTypeDefR3PWMR13PinControllerS5_S5_S5_S5_S5_S5_PKc>:
extern bool g_data;
extern bool g_power;
extern int g_bit;
extern int g_unit;

Clock::Clock(RTC_HandleTypeDef *hrtc, PWM &clockPeriphPWM, PinController &data, PinController &l1Controller, \
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
 80001e0:	603b      	str	r3, [r7, #0]
  l1Controller(l1Controller),
  l2Controller(l2Controller),
  l3Controller(l3Controller),
  l4Controller(l4Controller),
  l5Controller(l5Controller),
  l6Controller(l6Controller)
 80001e2:	68f8      	ldr	r0, [r7, #12]
 80001e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80001e6:	2207      	movs	r2, #7
 80001e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ec:	f001 fd7a 	bl	8001ce4 <_ZN4TaskC1EjjPKc>
 80001f0:	4a42      	ldr	r2, [pc, #264]	; (80002fc <_ZN5ClockC1EP17RTC_HandleTypeDefR3PWMR13PinControllerS5_S5_S5_S5_S5_S5_PKc+0x128>)
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	601a      	str	r2, [r3, #0]
  hrtc(hrtc),
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	68ba      	ldr	r2, [r7, #8]
 80001fa:	615a      	str	r2, [r3, #20]
  clockPeriphPWM(clockPeriphPWM),
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	619a      	str	r2, [r3, #24]
  data(data),
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	683a      	ldr	r2, [r7, #0]
 8000206:	61da      	str	r2, [r3, #28]
  l1Controller(l1Controller),
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	69ba      	ldr	r2, [r7, #24]
 800020c:	621a      	str	r2, [r3, #32]
  l2Controller(l2Controller),
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	69fa      	ldr	r2, [r7, #28]
 8000212:	625a      	str	r2, [r3, #36]	; 0x24
  l3Controller(l3Controller),
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	6a3a      	ldr	r2, [r7, #32]
 8000218:	629a      	str	r2, [r3, #40]	; 0x28
  l4Controller(l4Controller),
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800021e:	62da      	str	r2, [r3, #44]	; 0x2c
  l5Controller(l5Controller),
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000224:	631a      	str	r2, [r3, #48]	; 0x30
  l6Controller(l6Controller)
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800022a:	635a      	str	r2, [r3, #52]	; 0x34
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	2264      	movs	r2, #100	; 0x64
 8000230:	639a      	str	r2, [r3, #56]	; 0x38
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	333c      	adds	r3, #60	; 0x3c
 8000236:	2230      	movs	r2, #48	; 0x30
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f009 f85e 	bl	80092fc <memset>
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	336c      	adds	r3, #108	; 0x6c
 8000244:	2230      	movs	r2, #48	; 0x30
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f009 f857 	bl	80092fc <memset>
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	339c      	adds	r3, #156	; 0x9c
 8000252:	2230      	movs	r2, #48	; 0x30
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f009 f850 	bl	80092fc <memset>
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	33cc      	adds	r3, #204	; 0xcc
 8000260:	2230      	movs	r2, #48	; 0x30
 8000262:	2100      	movs	r1, #0
 8000264:	4618      	mov	r0, r3
 8000266:	f009 f849 	bl	80092fc <memset>
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	33fc      	adds	r3, #252	; 0xfc
 800026e:	2230      	movs	r2, #48	; 0x30
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f009 f842 	bl	80092fc <memset>
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800027e:	2230      	movs	r2, #48	; 0x30
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f009 f83a 	bl	80092fc <memset>
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800028e:	2230      	movs	r2, #48	; 0x30
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f009 f832 	bl	80092fc <memset>
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800029e:	2230      	movs	r2, #48	; 0x30
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f009 f82a 	bl	80092fc <memset>
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80002ae:	2230      	movs	r2, #48	; 0x30
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f009 f822 	bl	80092fc <memset>
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80002be:	2230      	movs	r2, #48	; 0x30
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f009 f81a 	bl	80092fc <memset>
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80002ce:	2230      	movs	r2, #48	; 0x30
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f009 f812 	bl	80092fc <memset>
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80002de:	2230      	movs	r2, #48	; 0x30
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f009 f80a 	bl	80092fc <memset>
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	2200      	movs	r2, #0
 80002ec:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
{
  // TODO Auto-generated constructor stub
}
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	4618      	mov	r0, r3
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	080097fc 	.word	0x080097fc

08000300 <_ZN5Clock3runEv>:

void
Clock::run() {
 8000300:	b580      	push	{r7, lr}
 8000302:	b088      	sub	sp, #32
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]

  RTC_TimeTypeDef sTime = {0};
 8000308:	f107 0318 	add.w	r3, r7, #24
 800030c:	2100      	movs	r1, #0
 800030e:	460a      	mov	r2, r1
 8000310:	801a      	strh	r2, [r3, #0]
 8000312:	460a      	mov	r2, r1
 8000314:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef sDate = {0};
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]
  sTime.Hours = 17;
 800031a:	2311      	movs	r3, #17
 800031c:	763b      	strb	r3, [r7, #24]
  sTime.Minutes = 37;
 800031e:	2325      	movs	r3, #37	; 0x25
 8000320:	767b      	strb	r3, [r7, #25]
  sTime.Seconds = 32;
 8000322:	2320      	movs	r3, #32
 8000324:	76bb      	strb	r3, [r7, #26]

  if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	f107 0118 	add.w	r1, r7, #24
 800032e:	2200      	movs	r2, #0
 8000330:	4618      	mov	r0, r3
 8000332:	f004 f83b 	bl	80043ac <HAL_RTC_SetTime>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	bf14      	ite	ne
 800033c:	2301      	movne	r3, #1
 800033e:	2300      	moveq	r3, #0
 8000340:	b2db      	uxtb	r3, r3
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <_ZN5Clock3runEv+0x4a>
  {
	  Error_Handler();
 8000346:	f002 f855 	bl	80023f4 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800034a:	2300      	movs	r3, #0
 800034c:	753b      	strb	r3, [r7, #20]
  sDate.Month = RTC_MONTH_JANUARY;
 800034e:	2301      	movs	r3, #1
 8000350:	757b      	strb	r3, [r7, #21]
  sDate.Date = 29;
 8000352:	231d      	movs	r3, #29
 8000354:	75bb      	strb	r3, [r7, #22]
  sDate.Year = 24;
 8000356:	2318      	movs	r3, #24
 8000358:	75fb      	strb	r3, [r7, #23]

  if (HAL_RTC_SetDate(hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f107 0114 	add.w	r1, r7, #20
 8000362:	2200      	movs	r2, #0
 8000364:	4618      	mov	r0, r3
 8000366:	f004 f9ed 	bl	8004744 <HAL_RTC_SetDate>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	bf14      	ite	ne
 8000370:	2301      	movne	r3, #1
 8000372:	2300      	moveq	r3, #0
 8000374:	b2db      	uxtb	r3, r3
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <_ZN5Clock3runEv+0x7e>
  {
 	  Error_Handler();
 800037a:	f002 f83b 	bl	80023f4 <Error_Handler>
  }

  clockPeriphPWM.set(500);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	49ad      	ldr	r1, [pc, #692]	; (8000638 <_ZN5Clock3runEv+0x338>)
 8000384:	4618      	mov	r0, r3
 8000386:	f000 ff2e 	bl	80011e6 <_ZN3PWM3setEf>

  for (;;) {

	  RTC_DateTypeDef getDate = {0};
 800038a:	2300      	movs	r3, #0
 800038c:	613b      	str	r3, [r7, #16]
	  RTC_TimeTypeDef getTime = {0};
 800038e:	f107 030c 	add.w	r3, r7, #12
 8000392:	2100      	movs	r1, #0
 8000394:	460a      	mov	r2, r1
 8000396:	801a      	strh	r2, [r3, #0]
 8000398:	460a      	mov	r2, r1
 800039a:	709a      	strb	r2, [r3, #2]

	  if (HAL_RTC_GetTime(hrtc, &getTime, RTC_FORMAT_BIN) != HAL_OK)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	f107 010c 	add.w	r1, r7, #12
 80003a4:	2200      	movs	r2, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f004 f8e6 	bl	8004578 <HAL_RTC_GetTime>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	bf14      	ite	ne
 80003b2:	2301      	movne	r3, #1
 80003b4:	2300      	moveq	r3, #0
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <_ZN5Clock3runEv+0xc0>
	  {
		  Error_Handler();
 80003bc:	f002 f81a 	bl	80023f4 <Error_Handler>
	  }

	  if (HAL_RTC_GetDate(hrtc, &getDate, RTC_FORMAT_BIN) != HAL_OK)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	f107 0110 	add.w	r1, r7, #16
 80003c8:	2200      	movs	r2, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f004 fad8 	bl	8004980 <HAL_RTC_GetDate>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	bf14      	ite	ne
 80003d6:	2301      	movne	r3, #1
 80003d8:	2300      	moveq	r3, #0
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <_ZN5Clock3runEv+0xe4>
	  {
	      Error_Handler();
 80003e0:	f002 f808 	bl	80023f4 <Error_Handler>
	  }

	  for(int i = 0; i<11; i++){
 80003e4:	2300      	movs	r3, #0
 80003e6:	61fb      	str	r3, [r7, #28]
 80003e8:	e056      	b.n	8000498 <_ZN5Clock3runEv+0x198>

		  tenHour[i] = 0;
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	69fb      	ldr	r3, [r7, #28]
 80003ee:	330e      	adds	r3, #14
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	4413      	add	r3, r2
 80003f4:	2200      	movs	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]
		  oneHour[i] = 0;
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	331a      	adds	r3, #26
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	4413      	add	r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	605a      	str	r2, [r3, #4]
		  tenMin[i] = 0;
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	69fb      	ldr	r3, [r7, #28]
 800040a:	3326      	adds	r3, #38	; 0x26
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	4413      	add	r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	605a      	str	r2, [r3, #4]
		  oneMin[i] = 0;
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	69fb      	ldr	r3, [r7, #28]
 8000418:	3332      	adds	r3, #50	; 0x32
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	4413      	add	r3, r2
 800041e:	2200      	movs	r2, #0
 8000420:	605a      	str	r2, [r3, #4]
		  tenSec[i] = 0;
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	69fb      	ldr	r3, [r7, #28]
 8000426:	333e      	adds	r3, #62	; 0x3e
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	4413      	add	r3, r2
 800042c:	2200      	movs	r2, #0
 800042e:	605a      	str	r2, [r3, #4]
		  oneSec[i] = 0;
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	69fb      	ldr	r3, [r7, #28]
 8000434:	334a      	adds	r3, #74	; 0x4a
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	4413      	add	r3, r2
 800043a:	2200      	movs	r2, #0
 800043c:	605a      	str	r2, [r3, #4]

		  tenDate[i] = 0;
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	69fb      	ldr	r3, [r7, #28]
 8000442:	3356      	adds	r3, #86	; 0x56
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4413      	add	r3, r2
 8000448:	2200      	movs	r2, #0
 800044a:	605a      	str	r2, [r3, #4]
		  oneDate[i] = 0;
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	3362      	adds	r3, #98	; 0x62
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	4413      	add	r3, r2
 8000456:	2200      	movs	r2, #0
 8000458:	605a      	str	r2, [r3, #4]
		  tenMonth[i] = 0;
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	69fb      	ldr	r3, [r7, #28]
 800045e:	336e      	adds	r3, #110	; 0x6e
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	4413      	add	r3, r2
 8000464:	2200      	movs	r2, #0
 8000466:	605a      	str	r2, [r3, #4]
		  oneMonth[i] = 0;
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	337a      	adds	r3, #122	; 0x7a
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	4413      	add	r3, r2
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
		  tenYear[i] = 0;
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	3386      	adds	r3, #134	; 0x86
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4413      	add	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
		  oneYear[i] = 0;
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	69fb      	ldr	r3, [r7, #28]
 8000488:	3392      	adds	r3, #146	; 0x92
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	4413      	add	r3, r2
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
	  for(int i = 0; i<11; i++){
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	3301      	adds	r3, #1
 8000496:	61fb      	str	r3, [r7, #28]
 8000498:	69fb      	ldr	r3, [r7, #28]
 800049a:	2b0a      	cmp	r3, #10
 800049c:	dda5      	ble.n	80003ea <_ZN5Clock3runEv+0xea>

	  }

	  tenHour[12 - (getTime.Hours / 10)] = 1;
 800049e:	7b3b      	ldrb	r3, [r7, #12]
 80004a0:	4a66      	ldr	r2, [pc, #408]	; (800063c <_ZN5Clock3runEv+0x33c>)
 80004a2:	fba2 2303 	umull	r2, r3, r2, r3
 80004a6:	08db      	lsrs	r3, r3, #3
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	f1c3 030c 	rsb	r3, r3, #12
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	330e      	adds	r3, #14
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	4413      	add	r3, r2
 80004b6:	2201      	movs	r2, #1
 80004b8:	605a      	str	r2, [r3, #4]
	  oneHour[12 - (getTime.Hours % 10)] = 1;
 80004ba:	7b3a      	ldrb	r2, [r7, #12]
 80004bc:	4b5f      	ldr	r3, [pc, #380]	; (800063c <_ZN5Clock3runEv+0x33c>)
 80004be:	fba3 1302 	umull	r1, r3, r3, r2
 80004c2:	08d9      	lsrs	r1, r3, #3
 80004c4:	460b      	mov	r3, r1
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	440b      	add	r3, r1
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	f1c3 030c 	rsb	r3, r3, #12
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	331a      	adds	r3, #26
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	4413      	add	r3, r2
 80004dc:	2201      	movs	r2, #1
 80004de:	605a      	str	r2, [r3, #4]
	  tenMin[12 - (getTime.Minutes / 10)] = 1;
 80004e0:	7b7b      	ldrb	r3, [r7, #13]
 80004e2:	4a56      	ldr	r2, [pc, #344]	; (800063c <_ZN5Clock3runEv+0x33c>)
 80004e4:	fba2 2303 	umull	r2, r3, r2, r3
 80004e8:	08db      	lsrs	r3, r3, #3
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	f1c3 030c 	rsb	r3, r3, #12
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	3326      	adds	r3, #38	; 0x26
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	4413      	add	r3, r2
 80004f8:	2201      	movs	r2, #1
 80004fa:	605a      	str	r2, [r3, #4]
	  oneMin[12 - (getTime.Minutes % 10)] = 1;
 80004fc:	7b7a      	ldrb	r2, [r7, #13]
 80004fe:	4b4f      	ldr	r3, [pc, #316]	; (800063c <_ZN5Clock3runEv+0x33c>)
 8000500:	fba3 1302 	umull	r1, r3, r3, r2
 8000504:	08d9      	lsrs	r1, r3, #3
 8000506:	460b      	mov	r3, r1
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	440b      	add	r3, r1
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	b2db      	uxtb	r3, r3
 8000512:	f1c3 030c 	rsb	r3, r3, #12
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	3332      	adds	r3, #50	; 0x32
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	4413      	add	r3, r2
 800051e:	2201      	movs	r2, #1
 8000520:	605a      	str	r2, [r3, #4]
	  tenSec[12 - (getTime.Seconds / 10)] = 1;
 8000522:	7bbb      	ldrb	r3, [r7, #14]
 8000524:	4a45      	ldr	r2, [pc, #276]	; (800063c <_ZN5Clock3runEv+0x33c>)
 8000526:	fba2 2303 	umull	r2, r3, r2, r3
 800052a:	08db      	lsrs	r3, r3, #3
 800052c:	b2db      	uxtb	r3, r3
 800052e:	f1c3 030c 	rsb	r3, r3, #12
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	333e      	adds	r3, #62	; 0x3e
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	4413      	add	r3, r2
 800053a:	2201      	movs	r2, #1
 800053c:	605a      	str	r2, [r3, #4]
	  oneSec[12 - (getTime.Seconds % 10)] = 1;
 800053e:	7bba      	ldrb	r2, [r7, #14]
 8000540:	4b3e      	ldr	r3, [pc, #248]	; (800063c <_ZN5Clock3runEv+0x33c>)
 8000542:	fba3 1302 	umull	r1, r3, r3, r2
 8000546:	08d9      	lsrs	r1, r3, #3
 8000548:	460b      	mov	r3, r1
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	440b      	add	r3, r1
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	b2db      	uxtb	r3, r3
 8000554:	f1c3 030c 	rsb	r3, r3, #12
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	334a      	adds	r3, #74	; 0x4a
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4413      	add	r3, r2
 8000560:	2201      	movs	r2, #1
 8000562:	605a      	str	r2, [r3, #4]

	  tenDate[12 - (getDate.Date / 10)] = 1;
 8000564:	7cbb      	ldrb	r3, [r7, #18]
 8000566:	4a35      	ldr	r2, [pc, #212]	; (800063c <_ZN5Clock3runEv+0x33c>)
 8000568:	fba2 2303 	umull	r2, r3, r2, r3
 800056c:	08db      	lsrs	r3, r3, #3
 800056e:	b2db      	uxtb	r3, r3
 8000570:	f1c3 030c 	rsb	r3, r3, #12
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	3356      	adds	r3, #86	; 0x56
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	4413      	add	r3, r2
 800057c:	2201      	movs	r2, #1
 800057e:	605a      	str	r2, [r3, #4]
	  oneDate[12 - (getDate.Date % 10)] = 1;
 8000580:	7cba      	ldrb	r2, [r7, #18]
 8000582:	4b2e      	ldr	r3, [pc, #184]	; (800063c <_ZN5Clock3runEv+0x33c>)
 8000584:	fba3 1302 	umull	r1, r3, r3, r2
 8000588:	08d9      	lsrs	r1, r3, #3
 800058a:	460b      	mov	r3, r1
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	440b      	add	r3, r1
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	b2db      	uxtb	r3, r3
 8000596:	f1c3 030c 	rsb	r3, r3, #12
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	3362      	adds	r3, #98	; 0x62
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	4413      	add	r3, r2
 80005a2:	2201      	movs	r2, #1
 80005a4:	605a      	str	r2, [r3, #4]
	  tenMonth[12 - (getDate.Month / 10)] = 1;
 80005a6:	7c7b      	ldrb	r3, [r7, #17]
 80005a8:	4a24      	ldr	r2, [pc, #144]	; (800063c <_ZN5Clock3runEv+0x33c>)
 80005aa:	fba2 2303 	umull	r2, r3, r2, r3
 80005ae:	08db      	lsrs	r3, r3, #3
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	f1c3 030c 	rsb	r3, r3, #12
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	336e      	adds	r3, #110	; 0x6e
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	4413      	add	r3, r2
 80005be:	2201      	movs	r2, #1
 80005c0:	605a      	str	r2, [r3, #4]
	  oneMonth[12 - (getDate.Month % 10)] = 1;
 80005c2:	7c7a      	ldrb	r2, [r7, #17]
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <_ZN5Clock3runEv+0x33c>)
 80005c6:	fba3 1302 	umull	r1, r3, r3, r2
 80005ca:	08d9      	lsrs	r1, r3, #3
 80005cc:	460b      	mov	r3, r1
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	440b      	add	r3, r1
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f1c3 030c 	rsb	r3, r3, #12
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	337a      	adds	r3, #122	; 0x7a
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	4413      	add	r3, r2
 80005e4:	2201      	movs	r2, #1
 80005e6:	605a      	str	r2, [r3, #4]
	  tenYear[12 - (getDate.Year / 10)] = 1;
 80005e8:	7cfb      	ldrb	r3, [r7, #19]
 80005ea:	4a14      	ldr	r2, [pc, #80]	; (800063c <_ZN5Clock3runEv+0x33c>)
 80005ec:	fba2 2303 	umull	r2, r3, r2, r3
 80005f0:	08db      	lsrs	r3, r3, #3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	f1c3 030c 	rsb	r3, r3, #12
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	3386      	adds	r3, #134	; 0x86
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	4413      	add	r3, r2
 8000600:	2201      	movs	r2, #1
 8000602:	605a      	str	r2, [r3, #4]
	  oneYear[12 - (getDate.Year % 10)] = 1;
 8000604:	7cfa      	ldrb	r2, [r7, #19]
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <_ZN5Clock3runEv+0x33c>)
 8000608:	fba3 1302 	umull	r1, r3, r3, r2
 800060c:	08d9      	lsrs	r1, r3, #3
 800060e:	460b      	mov	r3, r1
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	440b      	add	r3, r1
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	b2db      	uxtb	r3, r3
 800061a:	f1c3 030c 	rsb	r3, r3, #12
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	3392      	adds	r3, #146	; 0x92
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	4413      	add	r3, r2
 8000626:	2201      	movs	r2, #1
 8000628:	605a      	str	r2, [r3, #4]

	  vTaskDelay(delay);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800062e:	4618      	mov	r0, r3
 8000630:	f007 fa60 	bl	8007af4 <vTaskDelay>
  }
 8000634:	e6a9      	b.n	800038a <_ZN5Clock3runEv+0x8a>
 8000636:	bf00      	nop
 8000638:	43fa0000 	.word	0x43fa0000
 800063c:	cccccccd 	.word	0xcccccccd

08000640 <_ZN5Clock8dataSendEv>:

}

void
Clock::dataSend(){
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

	if(!g_power){
 8000648:	4ba4      	ldr	r3, [pc, #656]	; (80008dc <_ZN5Clock8dataSendEv+0x29c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f083 0301 	eor.w	r3, r3, #1
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	f000 81a2 	beq.w	800099c <_ZN5Clock8dataSendEv+0x35c>

		if(!g_data){
 8000658:	4ba1      	ldr	r3, [pc, #644]	; (80008e0 <_ZN5Clock8dataSendEv+0x2a0>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	f083 0301 	eor.w	r3, r3, #1
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	f000 80ca 	beq.w	80007fc <_ZN5Clock8dataSendEv+0x1bc>

			switch (dataPos){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800066e:	2b05      	cmp	r3, #5
 8000670:	f200 8194 	bhi.w	800099c <_ZN5Clock8dataSendEv+0x35c>
 8000674:	a201      	add	r2, pc, #4	; (adr r2, 800067c <_ZN5Clock8dataSendEv+0x3c>)
 8000676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067a:	bf00      	nop
 800067c:	08000695 	.word	0x08000695
 8000680:	080006d1 	.word	0x080006d1
 8000684:	0800070d 	.word	0x0800070d
 8000688:	08000749 	.word	0x08000749
 800068c:	08000785 	.word	0x08000785
 8000690:	080007c1 	.word	0x080007c1

			case 0:

				data.set(!oneHour[g_bit]);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	69d8      	ldr	r0, [r3, #28]
 8000698:	4b92      	ldr	r3, [pc, #584]	; (80008e4 <_ZN5Clock8dataSendEv+0x2a4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	331a      	adds	r3, #26
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	4413      	add	r3, r2
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	bf0c      	ite	eq
 80006aa:	2301      	moveq	r3, #1
 80006ac:	2300      	movne	r3, #0
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4619      	mov	r1, r3
 80006b2:	f001 fa33 	bl	8001b1c <_ZN13PinController3setEb>
				l1Controller.set(SET);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6a1b      	ldr	r3, [r3, #32]
 80006ba:	2101      	movs	r1, #1
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fa2d 	bl	8001b1c <_ZN13PinController3setEb>
				l6Controller.set(RESET);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fa27 	bl	8001b1c <_ZN13PinController3setEb>
				break;
 80006ce:	e165      	b.n	800099c <_ZN5Clock8dataSendEv+0x35c>

			case 1:

				data.set(tenMin[g_bit]);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	69d8      	ldr	r0, [r3, #28]
 80006d4:	4b83      	ldr	r3, [pc, #524]	; (80008e4 <_ZN5Clock8dataSendEv+0x2a4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	3326      	adds	r3, #38	; 0x26
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4413      	add	r3, r2
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	bf14      	ite	ne
 80006e6:	2301      	movne	r3, #1
 80006e8:	2300      	moveq	r3, #0
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	4619      	mov	r1, r3
 80006ee:	f001 fa15 	bl	8001b1c <_ZN13PinController3setEb>
				l1Controller.set(RESET);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6a1b      	ldr	r3, [r3, #32]
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fa0f 	bl	8001b1c <_ZN13PinController3setEb>
				l2Controller.set(SET);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000702:	2101      	movs	r1, #1
 8000704:	4618      	mov	r0, r3
 8000706:	f001 fa09 	bl	8001b1c <_ZN13PinController3setEb>
				break;
 800070a:	e147      	b.n	800099c <_ZN5Clock8dataSendEv+0x35c>

			case 2:

				data.set(oneMin[g_bit]);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	69d8      	ldr	r0, [r3, #28]
 8000710:	4b74      	ldr	r3, [pc, #464]	; (80008e4 <_ZN5Clock8dataSendEv+0x2a4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	3332      	adds	r3, #50	; 0x32
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	4413      	add	r3, r2
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	2b00      	cmp	r3, #0
 8000720:	bf14      	ite	ne
 8000722:	2301      	movne	r3, #1
 8000724:	2300      	moveq	r3, #0
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4619      	mov	r1, r3
 800072a:	f001 f9f7 	bl	8001b1c <_ZN13PinController3setEb>
				l2Controller.set(RESET);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f001 f9f1 	bl	8001b1c <_ZN13PinController3setEb>
				l3Controller.set(SET);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800073e:	2101      	movs	r1, #1
 8000740:	4618      	mov	r0, r3
 8000742:	f001 f9eb 	bl	8001b1c <_ZN13PinController3setEb>
				break;
 8000746:	e129      	b.n	800099c <_ZN5Clock8dataSendEv+0x35c>

			case 3:

				data.set(tenSec[g_bit]);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	69d8      	ldr	r0, [r3, #28]
 800074c:	4b65      	ldr	r3, [pc, #404]	; (80008e4 <_ZN5Clock8dataSendEv+0x2a4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	333e      	adds	r3, #62	; 0x3e
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	bf14      	ite	ne
 800075e:	2301      	movne	r3, #1
 8000760:	2300      	moveq	r3, #0
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4619      	mov	r1, r3
 8000766:	f001 f9d9 	bl	8001b1c <_ZN13PinController3setEb>
				l3Controller.set(RESET);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f001 f9d3 	bl	8001b1c <_ZN13PinController3setEb>
				l4Controller.set(SET);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077a:	2101      	movs	r1, #1
 800077c:	4618      	mov	r0, r3
 800077e:	f001 f9cd 	bl	8001b1c <_ZN13PinController3setEb>
				break;
 8000782:	e10b      	b.n	800099c <_ZN5Clock8dataSendEv+0x35c>

			case 4:

				data.set(oneSec[g_bit]);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	69d8      	ldr	r0, [r3, #28]
 8000788:	4b56      	ldr	r3, [pc, #344]	; (80008e4 <_ZN5Clock8dataSendEv+0x2a4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	334a      	adds	r3, #74	; 0x4a
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4413      	add	r3, r2
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	bf14      	ite	ne
 800079a:	2301      	movne	r3, #1
 800079c:	2300      	moveq	r3, #0
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	f001 f9bb 	bl	8001b1c <_ZN13PinController3setEb>
				l4Controller.set(RESET);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 f9b5 	bl	8001b1c <_ZN13PinController3setEb>
				l5Controller.set(SET);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	2101      	movs	r1, #1
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 f9af 	bl	8001b1c <_ZN13PinController3setEb>
				break;
 80007be:	e0ed      	b.n	800099c <_ZN5Clock8dataSendEv+0x35c>

			case 5:

				data.set(tenHour[g_bit]);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	69d8      	ldr	r0, [r3, #28]
 80007c4:	4b47      	ldr	r3, [pc, #284]	; (80008e4 <_ZN5Clock8dataSendEv+0x2a4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	330e      	adds	r3, #14
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4413      	add	r3, r2
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bf14      	ite	ne
 80007d6:	2301      	movne	r3, #1
 80007d8:	2300      	moveq	r3, #0
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4619      	mov	r1, r3
 80007de:	f001 f99d 	bl	8001b1c <_ZN13PinController3setEb>
				l5Controller.set(RESET);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 f997 	bl	8001b1c <_ZN13PinController3setEb>
				l6Controller.set(SET);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f2:	2101      	movs	r1, #1
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 f991 	bl	8001b1c <_ZN13PinController3setEb>
				break;
 80007fa:	e0cf      	b.n	800099c <_ZN5Clock8dataSendEv+0x35c>
			}

		}
		else {

			switch (dataPos){
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8000802:	2b05      	cmp	r3, #5
 8000804:	f200 80ca 	bhi.w	800099c <_ZN5Clock8dataSendEv+0x35c>
 8000808:	a201      	add	r2, pc, #4	; (adr r2, 8000810 <_ZN5Clock8dataSendEv+0x1d0>)
 800080a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080e:	bf00      	nop
 8000810:	08000829 	.word	0x08000829
 8000814:	08000865 	.word	0x08000865
 8000818:	080008a1 	.word	0x080008a1
 800081c:	080008e9 	.word	0x080008e9
 8000820:	08000925 	.word	0x08000925
 8000824:	08000961 	.word	0x08000961

			case 0:

				data.set(oneDate[g_bit]);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	69d8      	ldr	r0, [r3, #28]
 800082c:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <_ZN5Clock8dataSendEv+0x2a4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	3362      	adds	r3, #98	; 0x62
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	bf14      	ite	ne
 800083e:	2301      	movne	r3, #1
 8000840:	2300      	moveq	r3, #0
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4619      	mov	r1, r3
 8000846:	f001 f969 	bl	8001b1c <_ZN13PinController3setEb>
				l1Controller.set(SET);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6a1b      	ldr	r3, [r3, #32]
 800084e:	2101      	movs	r1, #1
 8000850:	4618      	mov	r0, r3
 8000852:	f001 f963 	bl	8001b1c <_ZN13PinController3setEb>
				l6Controller.set(RESET);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f95d 	bl	8001b1c <_ZN13PinController3setEb>
				break;
 8000862:	e09b      	b.n	800099c <_ZN5Clock8dataSendEv+0x35c>

			case 1:

				data.set(tenMonth[g_bit]);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	69d8      	ldr	r0, [r3, #28]
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <_ZN5Clock8dataSendEv+0x2a4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	336e      	adds	r3, #110	; 0x6e
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	bf14      	ite	ne
 800087a:	2301      	movne	r3, #1
 800087c:	2300      	moveq	r3, #0
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4619      	mov	r1, r3
 8000882:	f001 f94b 	bl	8001b1c <_ZN13PinController3setEb>
				l1Controller.set(RESET);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6a1b      	ldr	r3, [r3, #32]
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f001 f945 	bl	8001b1c <_ZN13PinController3setEb>
				l2Controller.set(SET);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000896:	2101      	movs	r1, #1
 8000898:	4618      	mov	r0, r3
 800089a:	f001 f93f 	bl	8001b1c <_ZN13PinController3setEb>
				break;
 800089e:	e07d      	b.n	800099c <_ZN5Clock8dataSendEv+0x35c>

			case 2:

				data.set(oneMonth[g_bit]);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	69d8      	ldr	r0, [r3, #28]
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <_ZN5Clock8dataSendEv+0x2a4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	337a      	adds	r3, #122	; 0x7a
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bf14      	ite	ne
 80008b6:	2301      	movne	r3, #1
 80008b8:	2300      	moveq	r3, #0
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	4619      	mov	r1, r3
 80008be:	f001 f92d 	bl	8001b1c <_ZN13PinController3setEb>
				l2Controller.set(RESET);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 f927 	bl	8001b1c <_ZN13PinController3setEb>
				l3Controller.set(SET);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d2:	2101      	movs	r1, #1
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 f921 	bl	8001b1c <_ZN13PinController3setEb>
				break;
 80008da:	e05f      	b.n	800099c <_ZN5Clock8dataSendEv+0x35c>
 80008dc:	200001a1 	.word	0x200001a1
 80008e0:	200001a0 	.word	0x200001a0
 80008e4:	20000908 	.word	0x20000908

			case 3:

				data.set(tenYear[g_bit]);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	69d8      	ldr	r0, [r3, #28]
 80008ec:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <_ZN5Clock8dataSendEv+0x390>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	3386      	adds	r3, #134	; 0x86
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf14      	ite	ne
 80008fe:	2301      	movne	r3, #1
 8000900:	2300      	moveq	r3, #0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4619      	mov	r1, r3
 8000906:	f001 f909 	bl	8001b1c <_ZN13PinController3setEb>
				l3Controller.set(RESET);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f001 f903 	bl	8001b1c <_ZN13PinController3setEb>
				l4Controller.set(SET);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091a:	2101      	movs	r1, #1
 800091c:	4618      	mov	r0, r3
 800091e:	f001 f8fd 	bl	8001b1c <_ZN13PinController3setEb>
				break;
 8000922:	e03b      	b.n	800099c <_ZN5Clock8dataSendEv+0x35c>

			case 4:

				data.set(oneYear[g_bit]);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69d8      	ldr	r0, [r3, #28]
 8000928:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <_ZN5Clock8dataSendEv+0x390>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	3392      	adds	r3, #146	; 0x92
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4413      	add	r3, r2
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf14      	ite	ne
 800093a:	2301      	movne	r3, #1
 800093c:	2300      	moveq	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4619      	mov	r1, r3
 8000942:	f001 f8eb 	bl	8001b1c <_ZN13PinController3setEb>
				l4Controller.set(RESET);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f001 f8e5 	bl	8001b1c <_ZN13PinController3setEb>
				l5Controller.set(SET);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	2101      	movs	r1, #1
 8000958:	4618      	mov	r0, r3
 800095a:	f001 f8df 	bl	8001b1c <_ZN13PinController3setEb>
				break;
 800095e:	e01d      	b.n	800099c <_ZN5Clock8dataSendEv+0x35c>

			case 5:

				data.set(tenDate[g_bit]);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	69d8      	ldr	r0, [r3, #28]
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <_ZN5Clock8dataSendEv+0x390>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	3356      	adds	r3, #86	; 0x56
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	bf14      	ite	ne
 8000976:	2301      	movne	r3, #1
 8000978:	2300      	moveq	r3, #0
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4619      	mov	r1, r3
 800097e:	f001 f8cd 	bl	8001b1c <_ZN13PinController3setEb>
				l5Controller.set(RESET);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f001 f8c7 	bl	8001b1c <_ZN13PinController3setEb>
				l6Controller.set(SET);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000992:	2101      	movs	r1, #1
 8000994:	4618      	mov	r0, r3
 8000996:	f001 f8c1 	bl	8001b1c <_ZN13PinController3setEb>
				break;
 800099a:	bf00      	nop
			}

		}

	}
	if (g_bit == 11){
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <_ZN5Clock8dataSendEv+0x390>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b0b      	cmp	r3, #11
 80009a2:	d110      	bne.n	80009c6 <_ZN5Clock8dataSendEv+0x386>

		if(dataPos < 5) dataPos++;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	dc07      	bgt.n	80009be <_ZN5Clock8dataSendEv+0x37e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		else dataPos = 0;

	}

}
 80009bc:	e003      	b.n	80009c6 <_ZN5Clock8dataSendEv+0x386>
		else dataPos = 0;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000908 	.word	0x20000908

080009d4 <_ZN5ClockD1Ev>:
#include "stm32f1xx_hal.h"
#include "stdio.h"
#include "PWM.h"
#include "PinController.h"

class Clock : public Task {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <_ZN5ClockD1Ev+0x20>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fbd3 	bl	8000190 <_ZN4TaskD1Ev>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	080097fc 	.word	0x080097fc

080009f8 <_ZN5ClockD0Ev>:
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ffe7 	bl	80009d4 <_ZN5ClockD1Ev>
 8000a06:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f008 fb92 	bl	8009134 <_ZdlPvj>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d005      	beq.n	8000a36 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	6879      	ldr	r1, [r7, #4]
 8000a32:	2203      	movs	r2, #3
 8000a34:	4798      	blx	r3
    }
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <_ZN3PinD1Ev>:


/* TODO: has to be rewritten using timers. */


class Pin : public Object {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <_ZN3PinD1Ev+0x2c>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3314      	adds	r3, #20
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f89e 	bl	8000b94 <_ZN13SoftwareTimerD1Ev>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 fb1a 	bl	8001094 <_ZN6ObjectD1Ev>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	0800988c 	.word	0x0800988c

08000a70 <_ZN3PinD0Ev>:
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ffe1 	bl	8000a40 <_ZN3PinD1Ev>
 8000a7e:	2140      	movs	r1, #64	; 0x40
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f008 fb57 	bl	8009134 <_ZdlPvj>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <_ZN4GPinC1EP12GPIO_TypeDeft13GPIO_PinState>:


#include <GPin.h>


GPin::GPin(GPIO_TypeDef *handle, uint16_t pin, GPIO_PinState activeState)
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	80fb      	strh	r3, [r7, #6]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	717b      	strb	r3, [r7, #5]
  : Pin(),
    handle(handle),
    pin(pin),
    activeState(activeState)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 fc77 	bl	80013a0 <_ZN3PinC1Ej>
 8000ab2:	4a09      	ldr	r2, [pc, #36]	; (8000ad8 <_ZN4GPinC1EP12GPIO_TypeDeft13GPIO_PinState+0x48>)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	601a      	str	r2, [r3, #0]
    handle(handle),
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	641a      	str	r2, [r3, #64]	; 0x40
    pin(pin),
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	88fa      	ldrh	r2, [r7, #6]
 8000ac2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    activeState(activeState)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	797a      	ldrb	r2, [r7, #5]
 8000aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
{

}
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	08009818 	.word	0x08009818

08000adc <_ZN4GPin4turnEb>:


void
GPin::turn(bool on)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	70fb      	strb	r3, [r7, #3]
  Pin::turn(on);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	78fa      	ldrb	r2, [r7, #3]
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fcc0 	bl	8001474 <_ZN3Pin4turnEb>

  auto inactiveState = activeState == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	bf14      	ite	ne
 8000afe:	2301      	movne	r3, #1
 8000b00:	2300      	moveq	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	73fb      	strb	r3, [r7, #15]

  auto state = on ? activeState : inactiveState;
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d003      	beq.n	8000b14 <_ZN4GPin4turnEb+0x38>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000b12:	e000      	b.n	8000b16 <_ZN4GPin4turnEb+0x3a>
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	73bb      	strb	r3, [r7, #14]

  HAL_GPIO_WritePin(handle, pin, state);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b22:	7bba      	ldrb	r2, [r7, #14]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f002 fb53 	bl	80031d0 <HAL_GPIO_WritePin>
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <_ZN4GPinD1Ev>:

#include "Pin.h"
#include "main.h"


class GPin : public Pin {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <_ZN4GPinD1Ev+0x20>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff7b 	bl	8000a40 <_ZN3PinD1Ev>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	08009818 	.word	0x08009818

08000b58 <_ZN4GPinD0Ev>:
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ffe7 	bl	8000b34 <_ZN4GPinD1Ev>
 8000b66:	2148      	movs	r1, #72	; 0x48
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f008 fae3 	bl	8009134 <_ZdlPvj>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_ZNSt8functionIFvvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff49 	bl	8000a1a <_ZNSt14_Function_baseD1Ev>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <_ZN13SoftwareTimerD1Ev>:

#include "d_debug.h"
#include "Object.h"


class SoftwareTimer : public Object {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <_ZN13SoftwareTimerD1Ev+0x2c>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	330c      	adds	r3, #12
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ffe6 	bl	8000b78 <_ZNSt8functionIFvvEED1Ev>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fa70 	bl	8001094 <_ZN6ObjectD1Ev>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	080098c0 	.word	0x080098c0

08000bc4 <_ZN13SoftwareTimerD0Ev>:
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ffe1 	bl	8000b94 <_ZN13SoftwareTimerD1Ev>
 8000bd2:	2128      	movs	r1, #40	; 0x28
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f008 faad 	bl	8009134 <_ZdlPvj>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	bf0c      	ite	eq
 8000bf4:	2301      	moveq	r3, #1
 8000bf6:	2300      	movne	r3, #0
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <_ZN4Gpio10pinToIndexEt>:

  /* XXX: lazy Thursday time. Rework this shit. */

  Gpio *next;

  static inline int pinToIndex(uint16_t pin) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80fb      	strh	r3, [r7, #6]
    d_debug_assert(GPIO_PIN_0 == 0x0001);
    d_debug_assert(GPIO_PIN_15 == 0x8000);

    for (int i = 0; i < 16; i++) {
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	e00c      	b.n	8000c2e <_ZN4Gpio10pinToIndexEt+0x2a>
      if ((pin >> i) & 1) {
 8000c14:	88fa      	ldrh	r2, [r7, #6]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	fa42 f303 	asr.w	r3, r2, r3
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <_ZN4Gpio10pinToIndexEt+0x24>
        return i;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	e009      	b.n	8000c3c <_ZN4Gpio10pinToIndexEt+0x38>
    for (int i = 0; i < 16; i++) {
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	ddef      	ble.n	8000c14 <_ZN4Gpio10pinToIndexEt+0x10>
      }
    }

    d_debug_assert(false);
 8000c34:	f001 fbde 	bl	80023f4 <Error_Handler>

    return -1;
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <_ZNK4Gpio7useExtiEv>:

  inline bool useExti() const { return !!extiCallback; }
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	330c      	adds	r3, #12
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 f8bd 	bl	8000dd0 <_ZNKSt8functionIFvvEEcvbEv>
 8000c56:	4603      	mov	r3, r0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_ZN4Gpio6StaticC1Ev>:

Gpio *Gpio::openHandles[Gpio::MaxOpenHandlesCount];
Gpio::Static Gpio::s;


Gpio::Static::Static()
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
{
	for (int i = 0; i < MaxOpenHandlesCount; i++) {
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	e007      	b.n	8000c7e <_ZN4Gpio6StaticC1Ev+0x1e>
		openHandles[i] = nullptr;
 8000c6e:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <_ZN4Gpio6StaticC1Ev+0x30>)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2100      	movs	r1, #0
 8000c74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MaxOpenHandlesCount; i++) {
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	ddf4      	ble.n	8000c6e <_ZN4Gpio6StaticC1Ev+0xe>
	}
}
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4618      	mov	r0, r3
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	2000007c 	.word	0x2000007c

08000c94 <_ZN4GpioC1EP12GPIO_TypeDeftSt8functionIFvvEE>:


Gpio::Gpio(GPIO_TypeDef *handle, uint16_t pin, ExtiCallback extiCallback)
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	80fb      	strh	r3, [r7, #6]
  : handle(handle),
    pin(pin),
    extiCallback(extiCallback),
    next(nullptr)
 8000ca4:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <_ZN4GpioC1EP12GPIO_TypeDeftSt8functionIFvvEE+0x8c>)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	601a      	str	r2, [r3, #0]
  : handle(handle),
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	605a      	str	r2, [r3, #4]
    pin(pin),
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	88fa      	ldrh	r2, [r7, #6]
 8000cb4:	811a      	strh	r2, [r3, #8]
    extiCallback(extiCallback),
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	330c      	adds	r3, #12
 8000cba:	6839      	ldr	r1, [r7, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 f8a9 	bl	8000e14 <_ZNSt8functionIFvvEEC1ERKS1_>
    next(nullptr)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
{
  if (useExti()) {
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f7ff ffbb 	bl	8000c44 <_ZNK4Gpio7useExtiEv>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d020      	beq.n	8000d16 <_ZN4GpioC1EP12GPIO_TypeDeftSt8functionIFvvEE+0x82>
    auto index = pinToIndex(pin);
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff94 	bl	8000c04 <_ZN4Gpio10pinToIndexEt>
 8000cdc:	6138      	str	r0, [r7, #16]

    if (openHandles[index] == nullptr) {
 8000cde:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <_ZN4GpioC1EP12GPIO_TypeDeftSt8functionIFvvEE+0x90>)
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d105      	bne.n	8000cf6 <_ZN4GpioC1EP12GPIO_TypeDeftSt8functionIFvvEE+0x62>
      openHandles[index] = this;
 8000cea:	490e      	ldr	r1, [pc, #56]	; (8000d24 <_ZN4GpioC1EP12GPIO_TypeDeftSt8functionIFvvEE+0x90>)
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000cf4:	e00f      	b.n	8000d16 <_ZN4GpioC1EP12GPIO_TypeDeftSt8functionIFvvEE+0x82>
    } else {
      auto gpio = openHandles[index];
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <_ZN4GpioC1EP12GPIO_TypeDeftSt8functionIFvvEE+0x90>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfe:	617b      	str	r3, [r7, #20]

      for (; gpio->next != nullptr; gpio = gpio->next);
 8000d00:	e002      	b.n	8000d08 <_ZN4GpioC1EP12GPIO_TypeDeftSt8functionIFvvEE+0x74>
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f8      	bne.n	8000d02 <_ZN4GpioC1EP12GPIO_TypeDeftSt8functionIFvvEE+0x6e>

      gpio->next = this;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	61da      	str	r2, [r3, #28]
    }
  }
}
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	08009834 	.word	0x08009834
 8000d24:	2000007c 	.word	0x2000007c

08000d28 <_ZN4Gpio8getStateEv>:

bool
Gpio::getState()
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(handle, pin);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	891b      	ldrh	r3, [r3, #8]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	f002 fa22 	bl	8003184 <HAL_GPIO_ReadPin>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	bf14      	ite	ne
 8000d46:	2301      	movne	r3, #1
 8000d48:	2300      	moveq	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_ZN4Gpio6onExtiEv>:


void
Gpio::onExti()
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if (extiCallback) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	330c      	adds	r3, #12
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 f835 	bl	8000dd0 <_ZNKSt8functionIFvvEEcvbEv>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d004      	beq.n	8000d76 <_ZN4Gpio6onExtiEv+0x22>
	  extiCallback();
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	330c      	adds	r3, #12
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 f87a 	bl	8000e6a <_ZNKSt8functionIFvvEEclEv>
  }
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_GPIO_EXTI_Callback>:
extern "C" {


void
HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	80fb      	strh	r3, [r7, #6]
  auto gpio = Gpio::openHandles[Gpio::pinToIndex(pin)];
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff39 	bl	8000c04 <_ZN4Gpio10pinToIndexEt>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <HAL_GPIO_EXTI_Callback+0x4c>)
 8000d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9a:	60fb      	str	r3, [r7, #12]

  for (; gpio != nullptr; gpio = gpio->next) {
 8000d9c:	e00d      	b.n	8000dba <HAL_GPIO_EXTI_Callback+0x3a>
    if (gpio->useExti()) {
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f7ff ff50 	bl	8000c44 <_ZNK4Gpio7useExtiEv>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d004      	beq.n	8000db4 <HAL_GPIO_EXTI_Callback+0x34>
      gpio->onExti();
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68f8      	ldr	r0, [r7, #12]
 8000db2:	4798      	blx	r3
  for (; gpio != nullptr; gpio = gpio->next) {
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	69db      	ldr	r3, [r3, #28]
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1ee      	bne.n	8000d9e <HAL_GPIO_EXTI_Callback+0x1e>


  }


}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000007c 	.word	0x2000007c

08000dd0 <_ZNKSt8functionIFvvEEcvbEv>:
       *  @return @c true when this %function object contains a target,
       *  or @c false when it is empty.
       *
       *  This function will not throw an %exception.
       */
      explicit operator bool() const noexcept
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff02 	bl	8000be4 <_ZNKSt14_Function_base8_M_emptyEv>
 8000de0:	4603      	mov	r3, r0
 8000de2:	f083 0301 	eor.w	r3, r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	6053      	str	r3, [r2, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	461a      	mov	r2, r3
 8000e22:	2300      	movs	r3, #0
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	6053      	str	r3, [r2, #4]
 8000e28:	6093      	str	r3, [r2, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ffdf 	bl	8000df0 <_ZNSt14_Function_baseC1Ev>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8000e38:	6838      	ldr	r0, [r7, #0]
 8000e3a:	f7ff ffc9 	bl	8000dd0 <_ZNKSt8functionIFvvEEcvbEv>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d00d      	beq.n	8000e60 <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	6839      	ldr	r1, [r7, #0]
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
      }
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff feb5 	bl	8000be4 <_ZNKSt14_Function_base8_M_emptyEv>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 8000e80:	f008 f96b 	bl	800915a <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4798      	blx	r3
 8000e8e:	bf00      	nop
      }
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <_Z41__static_initialization_and_destruction_0ii>:
}
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d107      	bne.n	8000eb8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d102      	bne.n	8000eb8 <_Z41__static_initialization_and_destruction_0ii+0x20>
Gpio::Static Gpio::s;
 8000eb2:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000eb4:	f7ff fed4 	bl	8000c60 <_ZN4Gpio6StaticC1Ev>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200000bc 	.word	0x200000bc

08000ec4 <_GLOBAL__sub_I__ZN4Gpio11openHandlesE>:
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f7ff ffe3 	bl	8000e98 <_Z41__static_initialization_and_destruction_0ii>
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_ZN4MenuC1ER4GpioS1_S1_PKc>:
#include <Menu.h>

extern bool g_power;
extern bool g_data;

Menu::Menu(Gpio &left, Gpio &mid, Gpio &right, const char *name)
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
: Task(256, DefaultPriority + 2, name),
  left(left),
  mid(mid),
  right(right)
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eec:	f000 fefa 	bl	8001ce4 <_ZN4TaskC1EjjPKc>
 8000ef0:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <_ZN4MenuC1ER4GpioS1_S1_PKc+0x4c>)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	601a      	str	r2, [r3, #0]
  left(left),
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	615a      	str	r2, [r3, #20]
  mid(mid),
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	619a      	str	r2, [r3, #24]
  right(right)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	61da      	str	r2, [r3, #28]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2232      	movs	r2, #50	; 0x32
 8000f0c:	621a      	str	r2, [r3, #32]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
  // TODO Auto-generated constructor stub
}
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	08009840 	.word	0x08009840

08000f24 <_ZN4Menu3runEv>:

void
Menu::run() {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  for (;;) {

	  if(mid.getState()){
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fef9 	bl	8000d28 <_ZN4Gpio8getStateEv>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d01f      	beq.n	8000f7c <_ZN4Menu3runEv+0x58>

	      vTaskDelay(500);
 8000f3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f40:	f006 fdd8 	bl	8007af4 <vTaskDelay>

	      if(mid.getState()){
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff feed 	bl	8000d28 <_ZN4Gpio8getStateEv>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d02f      	beq.n	8000fb4 <_ZN4Menu3runEv+0x90>

	    	  vTaskDelay(1000);
 8000f54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f58:	f006 fdcc 	bl	8007af4 <vTaskDelay>

	    	  if(mid.getState()){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fee1 	bl	8000d28 <_ZN4Gpio8getStateEv>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d023      	beq.n	8000fb4 <_ZN4Menu3runEv+0x90>

	    		  g_power = !g_power;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <_ZN4Menu3runEv+0x9c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	f083 0301 	eor.w	r3, r3, #1
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <_ZN4Menu3runEv+0x9c>)
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	e01b      	b.n	8000fb4 <_ZN4Menu3runEv+0x90>
	      }
	  }

	  else {

		  if(left.getState() || right.getState()){
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fed1 	bl	8000d28 <_ZN4Gpio8getStateEv>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d107      	bne.n	8000f9c <_ZN4Menu3runEv+0x78>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fec9 	bl	8000d28 <_ZN4Gpio8getStateEv>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <_ZN4Menu3runEv+0x7c>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <_ZN4Menu3runEv+0x7e>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d006      	beq.n	8000fb4 <_ZN4Menu3runEv+0x90>

			  g_data = !g_data;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <_ZN4Menu3runEv+0xa0>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	f083 0301 	eor.w	r3, r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <_ZN4Menu3runEv+0xa0>)
 8000fb2:	701a      	strb	r2, [r3, #0]

		  }

	  }

      vTaskDelay(delay);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 fd9b 	bl	8007af4 <vTaskDelay>
	  if(mid.getState()){
 8000fbe:	e7b5      	b.n	8000f2c <_ZN4Menu3runEv+0x8>
 8000fc0:	200001a1 	.word	0x200001a1
 8000fc4:	200001a0 	.word	0x200001a0

08000fc8 <_ZN4MenuD1Ev>:
#include "main.h"
#include "stm32f1xx_hal.h"
#include "stdio.h"
#include "Gpio.h"

class Menu : public Task {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <_ZN4MenuD1Ev+0x20>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff f8d9 	bl	8000190 <_ZN4TaskD1Ev>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	08009840 	.word	0x08009840

08000fec <_ZN4MenuD0Ev>:
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ffe7 	bl	8000fc8 <_ZN4MenuD1Ev>
 8000ffa:	2128      	movs	r1, #40	; 0x28
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f008 f899 	bl	8009134 <_ZdlPvj>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <_ZN6Object5startEPKcj>:
bool Object::connected = false;


void
Object::start(const char *portName, unsigned int spinTimeout)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < MaxObjectsCount; i++) {
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e015      	b.n	8001048 <_ZN6Object5startEPKcj+0x3c>
		if (objects[i] != nullptr) {
 800101c:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <_ZN6Object5startEPKcj+0x84>)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00c      	beq.n	8001042 <_ZN6Object5startEPKcj+0x36>
		  objects[i]->onInit();
 8001028:	4a19      	ldr	r2, [pc, #100]	; (8001090 <_ZN6Object5startEPKcj+0x84>)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001030:	4917      	ldr	r1, [pc, #92]	; (8001090 <_ZN6Object5startEPKcj+0x84>)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3308      	adds	r3, #8
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4610      	mov	r0, r2
 8001040:	4798      	blx	r3
	for (int i = 0; i < MaxObjectsCount; i++) {
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b37      	cmp	r3, #55	; 0x37
 800104c:	dde6      	ble.n	800101c <_ZN6Object5startEPKcj+0x10>
		}
	}

	for (int i = 0; i < MaxObjectsCount; i++) {
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	e015      	b.n	8001080 <_ZN6Object5startEPKcj+0x74>
		if (objects[i] != nullptr) {
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <_ZN6Object5startEPKcj+0x84>)
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00c      	beq.n	800107a <_ZN6Object5startEPKcj+0x6e>
			objects[i]->onStart();
 8001060:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <_ZN6Object5startEPKcj+0x84>)
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001068:	4909      	ldr	r1, [pc, #36]	; (8001090 <_ZN6Object5startEPKcj+0x84>)
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	330c      	adds	r3, #12
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4610      	mov	r0, r2
 8001078:	4798      	blx	r3
	for (int i = 0; i < MaxObjectsCount; i++) {
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	3301      	adds	r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b37      	cmp	r3, #55	; 0x37
 8001084:	dde6      	ble.n	8001054 <_ZN6Object5startEPKcj+0x48>
		}
	}
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200000c0 	.word	0x200000c0

08001094 <_ZN6ObjectD1Ev>:

Object::~Object()
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <_ZN6ObjectD1Ev+0x1c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	601a      	str	r2, [r3, #0]
{
	d_debug_assert(0);
 80010a2:	f001 f9a7 	bl	80023f4 <Error_Handler>
}
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	0800985c 	.word	0x0800985c

080010b4 <_ZN6ObjectD0Ev>:
Object::~Object()
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
}
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffe9 	bl	8001094 <_ZN6ObjectD1Ev>
 80010c2:	210c      	movs	r1, #12
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f008 f835 	bl	8009134 <_ZdlPvj>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_ZN6ObjectC1EPKc>:


Object::Object(const char *name)
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
	: name(name),
	  memoryCorrupt(this)
 80010de:	4a13      	ldr	r2, [pc, #76]	; (800112c <_ZN6ObjectC1EPKc+0x58>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	601a      	str	r2, [r3, #0]
	: name(name),
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	605a      	str	r2, [r3, #4]
	  memoryCorrupt(this)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	609a      	str	r2, [r3, #8]
{
	int i;

	for (i = 0; i < MaxObjectsCount && objects[i] != nullptr; i++);
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	e002      	b.n	80010fc <_ZN6ObjectC1EPKc+0x28>
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3301      	adds	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b37      	cmp	r3, #55	; 0x37
 8001100:	dc05      	bgt.n	800110e <_ZN6ObjectC1EPKc+0x3a>
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <_ZN6ObjectC1EPKc+0x5c>)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f3      	bne.n	80010f6 <_ZN6ObjectC1EPKc+0x22>
	d_debug_assert(i != MaxObjectsCount);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2b38      	cmp	r3, #56	; 0x38
 8001112:	d101      	bne.n	8001118 <_ZN6ObjectC1EPKc+0x44>
 8001114:	f001 f96e 	bl	80023f4 <Error_Handler>

	objects[i] = this;
 8001118:	4905      	ldr	r1, [pc, #20]	; (8001130 <_ZN6ObjectC1EPKc+0x5c>)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	0800985c 	.word	0x0800985c
 8001130:	200000c0 	.word	0x200000c0

08001134 <_ZN6Object7onStartEv>:


void
Object::onStart() {
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <_ZN6Object6onInitEv>:

void Object::onInit() {
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]

}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <d_debug_assert_halv>:


static inline void
d_debug_assert_halv(HAL_StatusTypeDef value, HAL_StatusTypeDef expected,
        const char *file, int line)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60ba      	str	r2, [r7, #8]
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4603      	mov	r3, r0
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	460b      	mov	r3, r1
 8001168:	73bb      	strb	r3, [r7, #14]
    if (value != expected) {
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	429a      	cmp	r2, r3
 8001170:	d001      	beq.n	8001176 <d_debug_assert_halv+0x1e>
#else


        UNUSED(file);
        UNUSED(line);
        d_debug_fatal("ASSERTH: %u != %u", value, expected);
 8001172:	f001 f93f 	bl	80023f4 <Error_Handler>

#endif


    }
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <_ZN3PWMC1EP19__TIM_HandleTypeDefiPKc>:

#include "d_debug.h"
#include "PWM.h"


PWM::PWM(TIM_HandleTypeDef *htim, int ch, const char *name)
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	603b      	str	r3, [r7, #0]
: Object(name),
  htim(htim),
  ch(ch)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6839      	ldr	r1, [r7, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff9e 	bl	80010d4 <_ZN6ObjectC1EPKc>
 8001198:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <_ZN3PWMC1EP19__TIM_HandleTypeDefiPKc+0x34>)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	601a      	str	r2, [r3, #0]
  htim(htim),
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	60da      	str	r2, [r3, #12]
  ch(ch)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	611a      	str	r2, [r3, #16]
{

}
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	08009874 	.word	0x08009874

080011b8 <_ZN3PWM7onStartEv>:


void
PWM::onStart()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  d_debug_assert_hok(HAL_TIM_PWM_Start(htim, ch));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4610      	mov	r0, r2
 80011cc:	f004 f84e 	bl	800526c <HAL_TIM_PWM_Start>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4618      	mov	r0, r3
 80011d4:	2300      	movs	r3, #0
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	f7ff ffbd 	bl	8001158 <d_debug_assert_halv>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <_ZN3PWM3setEf>:


void
PWM::set(float pwm)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]

  __HAL_TIM_SET_COMPARE(htim, ch, (uint16_t)pwm);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d109      	bne.n	800120c <_ZN3PWM3setEf+0x26>
 80011f8:	6838      	ldr	r0, [r7, #0]
 80011fa:	f7fe ffa9 	bl	8000150 <__aeabi_f2uiz>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29a      	uxth	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	635a      	str	r2, [r3, #52]	; 0x34

}
 800120a:	e024      	b.n	8001256 <_ZN3PWM3setEf+0x70>
  __HAL_TIM_SET_COMPARE(htim, ch, (uint16_t)pwm);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	2b04      	cmp	r3, #4
 8001212:	d109      	bne.n	8001228 <_ZN3PWM3setEf+0x42>
 8001214:	6838      	ldr	r0, [r7, #0]
 8001216:	f7fe ff9b 	bl	8000150 <__aeabi_f2uiz>
 800121a:	4603      	mov	r3, r0
 800121c:	b29a      	uxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001226:	e016      	b.n	8001256 <_ZN3PWM3setEf+0x70>
  __HAL_TIM_SET_COMPARE(htim, ch, (uint16_t)pwm);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	2b08      	cmp	r3, #8
 800122e:	d109      	bne.n	8001244 <_ZN3PWM3setEf+0x5e>
 8001230:	6838      	ldr	r0, [r7, #0]
 8001232:	f7fe ff8d 	bl	8000150 <__aeabi_f2uiz>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001242:	e008      	b.n	8001256 <_ZN3PWM3setEf+0x70>
  __HAL_TIM_SET_COMPARE(htim, ch, (uint16_t)pwm);
 8001244:	6838      	ldr	r0, [r7, #0]
 8001246:	f7fe ff83 	bl	8000150 <__aeabi_f2uiz>
 800124a:	4603      	mov	r3, r0
 800124c:	b29a      	uxth	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <_ZN3PWMD1Ev>:

#include "main.h"
#include "Object.h"


class PWM : Object{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	4a05      	ldr	r2, [pc, #20]	; (8001280 <_ZN3PWMD1Ev+0x20>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff0f 	bl	8001094 <_ZN6ObjectD1Ev>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	08009874 	.word	0x08009874

08001284 <_ZN3PWMD0Ev>:
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ffe7 	bl	8001260 <_ZN3PWMD1Ev>
 8001292:	2114      	movs	r1, #20
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f007 ff4d 	bl	8009134 <_ZdlPvj>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <_ZN13SoftwareTimer11ticksFromMsEjm>:

	using Callback = std::function<void()>;


	static inline const constexpr TickType_t
	ticksFromMs(unsigned int ms, TickType_t minTicks = 1)
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	{
		return std::max(minTicks, pdMS_TO_TICKS(ms));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
 80012e0:	4a08      	ldr	r2, [pc, #32]	; (8001304 <_ZN13SoftwareTimer11ticksFromMsEjm+0x38>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	099b      	lsrs	r3, r3, #6
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	f107 020c 	add.w	r2, r7, #12
 80012ee:	463b      	mov	r3, r7
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f8cc 	bl	8001490 <_ZSt3maxImERKT_S2_S2_>
 80012f8:	4603      	mov	r3, r0
 80012fa:	681b      	ldr	r3, [r3, #0]
	}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	10624dd3 	.word	0x10624dd3

08001308 <_ZNK3Pin4isOnEv>:
	explicit Pin(unsigned int blinkPeriod = DefaultBlinkPeriod);

	void onStart();

	inline bool
	isOn() const
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	{
		return static_cast<bool>(on);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7b1b      	ldrb	r3, [r3, #12]
 8001314:	b2db      	uxtb	r3, r3
	}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <_ZNK3Pin10isBlinkingEv>:
		setOn(!isOn());
	}


	inline bool
	isBlinking() const
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	{
		return static_cast<bool>(blinking);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7b5b      	ldrb	r3, [r3, #13]
 800132c:	b2db      	uxtb	r3, r3
	}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <_ZN3Pin9onTimeoutEv>:
#include "Pin.h"


void
Pin::onTimeout()
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	auto blinking = isBlinking();
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ffed 	bl	8001320 <_ZNK3Pin10isBlinkingEv>
 8001346:	4603      	mov	r3, r0
 8001348:	73fb      	strb	r3, [r7, #15]

	if (blinking) {
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00e      	beq.n	800136e <_ZN3Pin9onTimeoutEv+0x36>
		turn(!isOn());
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3310      	adds	r3, #16
 8001356:	681c      	ldr	r4, [r3, #0]
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffd5 	bl	8001308 <_ZNK3Pin4isOnEv>
 800135e:	4603      	mov	r3, r0
 8001360:	f083 0301 	eor.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	4619      	mov	r1, r3
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	47a0      	blx	r4
 800136c:	e00f      	b.n	800138e <_ZN3Pin9onTimeoutEv+0x56>
	} else if (blinking != lastBlinking) {
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	429a      	cmp	r2, r3
 8001378:	d009      	beq.n	800138e <_ZN3Pin9onTimeoutEv+0x56>
		turn(defaultState);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3310      	adds	r3, #16
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001388:	4611      	mov	r1, r2
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	4798      	blx	r3
	}

	lastBlinking = blinking;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bd90      	pop	{r4, r7, pc}
	...

080013a0 <_ZN3PinC1Ej>:


Pin::Pin(unsigned int blinkPeriod)
 80013a0:	b5b0      	push	{r4, r5, r7, lr}
 80013a2:	b08e      	sub	sp, #56	; 0x38
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	: on(false),
	  blinking(false),
	  blinkPeriod(blinkPeriod),
	  timer(SoftwareTimer::ticksFromMs(blinkPeriod),
			std::bind(&Pin::onTimeout, this))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4921      	ldr	r1, [pc, #132]	; (8001434 <_ZN3PinC1Ej+0x94>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fe90 	bl	80010d4 <_ZN6ObjectC1EPKc>
 80013b4:	4a20      	ldr	r2, [pc, #128]	; (8001438 <_ZN3PinC1Ej+0x98>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	601a      	str	r2, [r3, #0]
	: on(false),
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	731a      	strb	r2, [r3, #12]
	  blinking(false),
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	735a      	strb	r2, [r3, #13]
	  blinkPeriod(blinkPeriod),
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	611a      	str	r2, [r3, #16]
	  timer(SoftwareTimer::ticksFromMs(blinkPeriod),
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f103 0414 	add.w	r4, r3, #20
 80013d2:	2101      	movs	r1, #1
 80013d4:	6838      	ldr	r0, [r7, #0]
 80013d6:	f7ff ff79 	bl	80012cc <_ZN13SoftwareTimer11ticksFromMsEjm>
 80013da:	4605      	mov	r5, r0
			std::bind(&Pin::onTimeout, this))
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <_ZN3PinC1Ej+0x9c>)
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013e8:	f107 0318 	add.w	r3, r7, #24
 80013ec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80013f0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 f887 	bl	8001508 <_ZSt4bindIM3PinFvvEJPS0_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISA_EEE5valueES8_JDpT0_EE4typeEOS8_DpOSF_>
	  timer(SoftwareTimer::ticksFromMs(blinkPeriod),
 80013fa:	f107 0218 	add.w	r2, r7, #24
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f897 	bl	8001538 <_ZNSt8functionIFvvEEC1ISt5_BindIFM3PinFvvEPS4_EEvEEOT_>
 800140a:	f107 0208 	add.w	r2, r7, #8
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <_ZN3PinC1Ej+0xa0>)
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	2301      	movs	r3, #1
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2300      	movs	r3, #0
 8001418:	4629      	mov	r1, r5
 800141a:	4620      	mov	r0, r4
 800141c:	f000 fbea 	bl	8001bf4 <_ZN13SoftwareTimerC1EmSt8functionIFvvEEbbPKc>
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fba7 	bl	8000b78 <_ZNSt8functionIFvvEED1Ev>
{

}
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4618      	mov	r0, r3
 800142e:	3730      	adds	r7, #48	; 0x30
 8001430:	46bd      	mov	sp, r7
 8001432:	bdb0      	pop	{r4, r5, r7, pc}
 8001434:	0800957c 	.word	0x0800957c
 8001438:	0800988c 	.word	0x0800988c
 800143c:	08001339 	.word	0x08001339
 8001440:	08009584 	.word	0x08009584

08001444 <_ZN3Pin7onStartEv>:


void
Pin::onStart()
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	defaultState = isOn();
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff5b 	bl	8001308 <_ZNK3Pin4isOnEv>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	lastBlinking = isBlinking();
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff5f 	bl	8001320 <_ZNK3Pin10isBlinkingEv>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZN3Pin4turnEb>:


void
Pin::turn(bool on)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	70fb      	strb	r3, [r7, #3]
	this->on = on;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	78fa      	ldrb	r2, [r7, #3]
 8001484:	731a      	strb	r2, [r3, #12]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <_ZSt3maxImERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d201      	bcs.n	80014aa <_ZSt3maxImERKT_S2_S2_+0x1a>
	return __b;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	e000      	b.n	80014ac <_ZSt3maxImERKT_S2_S2_+0x1c>
      return __a;
 80014aa:	687b      	ldr	r3, [r7, #4]
    }
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <_ZNSt5tupleIJP3PinEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f899 	bl	80015fe <_ZNSt11_Tuple_implILj0EJP3PinEEC1EOS2_>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <_ZNSt5_BindIFM3PinFvvEPS0_EEC1EOS5_>:
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f103 0208 	add.w	r2, r3, #8
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	3308      	adds	r3, #8
 80014f6:	4619      	mov	r1, r3
 80014f8:	4610      	mov	r0, r2
 80014fa:	f7ff ffdc 	bl	80014b6 <_ZNSt5tupleIJP3PinEEC1EOS2_>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_ZSt4bindIM3PinFvvEJPS0_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISA_EEE5valueES8_JDpT0_EE4typeEOS8_DpOSF_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline _GLIBCXX20_CONSTEXPR typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 8001514:	68b8      	ldr	r0, [r7, #8]
 8001516:	f000 f83f 	bl	8001598 <_ZSt7forwardIM3PinFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800151a:	4604      	mov	r4, r0
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f845 	bl	80015ac <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	4621      	mov	r1, r4
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 f849 	bl	80015c0 <_ZNSt5_BindIFM3PinFvvEPS0_EEC1IJS3_EEEOS2_DpOT_>
    }
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}
	...

08001538 <_ZNSt8functionIFvvEEC1ISt5_BindIFM3PinFvvEPS4_EEvEEOT_>:
	function(_Functor&& __f)
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	461a      	mov	r2, r3
 8001546:	2300      	movs	r3, #0
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	6053      	str	r3, [r2, #4]
 800154c:	6093      	str	r3, [r2, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fc4d 	bl	8000df0 <_ZNSt14_Function_baseC1Ev>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800155c:	6838      	ldr	r0, [r7, #0]
 800155e:	f000 f85d 	bl	800161c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE21_M_not_empty_functionIS7_EEbRKT_>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00e      	beq.n	8001586 <_ZNSt8functionIFvvEEC1ISt5_BindIFM3PinFvvEPS4_EEvEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8001568:	687c      	ldr	r4, [r7, #4]
 800156a:	6838      	ldr	r0, [r7, #0]
 800156c:	f000 f860 	bl	8001630 <_ZSt7forwardISt5_BindIFM3PinFvvEPS1_EEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001570:	4603      	mov	r3, r0
 8001572:	4619      	mov	r1, r3
 8001574:	4620      	mov	r0, r4
 8001576:	f000 f865 	bl	8001644 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE15_M_init_functorIS7_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <_ZNSt8functionIFvvEEC1ISt5_BindIFM3PinFvvEPS4_EEvEEOT_+0x58>)
 800157e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a04      	ldr	r2, [pc, #16]	; (8001594 <_ZNSt8functionIFvvEEC1ISt5_BindIFM3PinFvvEPS4_EEvEEOT_+0x5c>)
 8001584:	609a      	str	r2, [r3, #8]
	}
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bd90      	pop	{r4, r7, pc}
 8001590:	08001669 	.word	0x08001669
 8001594:	08001687 	.word	0x08001687

08001598 <_ZSt7forwardIM3PinFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <_ZNSt5_BindIFM3PinFvvEPS0_EEC1IJS3_EEEOS2_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 80015cc:	68b8      	ldr	r0, [r7, #8]
 80015ce:	f000 f879 	bl	80016c4 <_ZSt4moveIRM3PinFvvEEONSt16remove_referenceIT_E4typeEOS5_>
 80015d2:	4602      	mov	r2, r0
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015da:	e883 0003 	stmia.w	r3, {r0, r1}
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f103 0408 	add.w	r4, r3, #8
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ffe1 	bl	80015ac <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4619      	mov	r1, r3
 80015ee:	4620      	mov	r0, r4
 80015f0:	f000 f872 	bl	80016d8 <_ZNSt5tupleIJP3PinEEC1IJS1_ELb1ELb1EEEDpOT_>
	{ }
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}

080015fe <_ZNSt11_Tuple_implILj0EJP3PinEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	601a      	str	r2, [r3, #0]
      { }
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE21_M_not_empty_functionIS7_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	  { return true; }
 8001624:	2301      	movs	r3, #1
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <_ZSt7forwardISt5_BindIFM3PinFvvEPS1_EEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE15_M_init_functorIS7_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800164e:	6838      	ldr	r0, [r7, #0]
 8001650:	f7ff ffee 	bl	8001630 <_ZSt7forwardISt5_BindIFM3PinFvvEPS1_EEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001654:	4603      	mov	r3, r0
 8001656:	4622      	mov	r2, r4
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f84f 	bl	80016fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE9_M_createIS7_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bd90      	pop	{r4, r7, pc}

08001668 <_ZNSt17_Function_handlerIFvvESt5_BindIFM3PinFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f860 	bl	8001736 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE14_M_get_pointerERKSt9_Any_data>
 8001676:	4603      	mov	r3, r0
 8001678:	4618      	mov	r0, r3
 800167a:	f000 f869 	bl	8001750 <_ZSt10__invoke_rIvRSt5_BindIFM3PinFvvEPS1_EEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESB_E4typeEOSE_DpOSF_>
				     std::forward<_ArgTypes>(__args)...);
 800167e:	bf00      	nop
      }
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_ZNSt17_Function_handlerIFvvESt5_BindIFM3PinFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8001686:	b590      	push	{r4, r7, lr}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	4613      	mov	r3, r2
 8001692:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d109      	bne.n	80016ae <_ZNSt17_Function_handlerIFvvESt5_BindIFM3PinFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f000 f868 	bl	8001770 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM3PinFvvEPS2_EEEERT_v>
 80016a0:	4604      	mov	r4, r0
 80016a2:	68b8      	ldr	r0, [r7, #8]
 80016a4:	f000 f847 	bl	8001736 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE14_M_get_pointerERKSt9_Any_data>
 80016a8:	4603      	mov	r3, r0
 80016aa:	6023      	str	r3, [r4, #0]
	    break;
 80016ac:	e005      	b.n	80016ba <_ZNSt17_Function_handlerIFvvESt5_BindIFM3PinFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	461a      	mov	r2, r3
 80016b2:	68b9      	ldr	r1, [r7, #8]
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 f867 	bl	8001788 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>
	return false;
 80016ba:	2300      	movs	r3, #0
      }
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}

080016c4 <_ZSt4moveIRM3PinFvvEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <_ZNSt5tupleIJP3PinEEC1IJS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 80016e2:	687c      	ldr	r4, [r7, #4]
 80016e4:	6838      	ldr	r0, [r7, #0]
 80016e6:	f7ff ff61 	bl	80015ac <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4619      	mov	r1, r3
 80016ee:	4620      	mov	r0, r4
 80016f0:	f000 f884 	bl	80017fc <_ZNSt11_Tuple_implILj0EJP3PinEEC1IS1_EEOT_>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd90      	pop	{r4, r7, pc}

080016fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE9_M_createIS7_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 80016fe:	b5b0      	push	{r4, r5, r7, lr}
 8001700:	b084      	sub	sp, #16
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 800170a:	68b8      	ldr	r0, [r7, #8]
 800170c:	f7ff ff90 	bl	8001630 <_ZSt7forwardISt5_BindIFM3PinFvvEPS1_EEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001710:	4605      	mov	r5, r0
 8001712:	200c      	movs	r0, #12
 8001714:	f007 fd10 	bl	8009138 <_Znwj>
 8001718:	4603      	mov	r3, r0
 800171a:	461c      	mov	r4, r3
 800171c:	4629      	mov	r1, r5
 800171e:	4620      	mov	r0, r4
 8001720:	f7ff fed9 	bl	80014d6 <_ZNSt5_BindIFM3PinFvvEPS0_EEC1EOS5_>
	    __dest._M_access<_Functor*>()
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 f823 	bl	8001770 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM3PinFvvEPS2_EEEERT_v>
 800172a:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 800172c:	601c      	str	r4, [r3, #0]
	  }
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bdb0      	pop	{r4, r5, r7, pc}

08001736 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f86f 	bl	8001822 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM3PinFvvEPS2_EEEERKT_v>
 8001744:	4603      	mov	r3, r0
 8001746:	681b      	ldr	r3, [r3, #0]
	}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_ZSt10__invoke_rIvRSt5_BindIFM3PinFvvEPS1_EEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESB_E4typeEOSE_DpOSF_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 f86e 	bl	800183a <_ZSt7forwardIRSt5_BindIFM3PinFvvEPS1_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 800175e:	4603      	mov	r3, r0
 8001760:	4619      	mov	r1, r3
 8001762:	4620      	mov	r0, r4
 8001764:	f000 f873 	bl	800184e <_ZSt13__invoke_implIvRSt5_BindIFM3PinFvvEPS1_EEJEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bd90      	pop	{r4, r7, pc}

08001770 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM3PinFvvEPS2_EEEERT_v>:
      _M_access()
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fd93 	bl	80012a4 <_ZNSt9_Any_data9_M_accessEv>
 800177e:	4603      	mov	r3, r0
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	4613      	mov	r3, r2
 8001794:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d82a      	bhi.n	80017f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x6a>
 800179c:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1c>)
 800179e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a2:	bf00      	nop
 80017a4:	080017b5 	.word	0x080017b5
 80017a8:	080017c3 	.word	0x080017c3
 80017ac:	080017d7 	.word	0x080017d7
 80017b0:	080017e9 	.word	0x080017e9
	      __dest._M_access<const type_info*>() = nullptr;
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 f85a 	bl	800186e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
	      break;
 80017c0:	e017      	b.n	80017f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f7ff ffd4 	bl	8001770 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM3PinFvvEPS2_EEEERT_v>
 80017c8:	4604      	mov	r4, r0
 80017ca:	68b8      	ldr	r0, [r7, #8]
 80017cc:	f7ff ffb3 	bl	8001736 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE14_M_get_pointerERKSt9_Any_data>
 80017d0:	4603      	mov	r3, r0
 80017d2:	6023      	str	r3, [r4, #0]
	      break;
 80017d4:	e00d      	b.n	80017f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 80017d6:	68b8      	ldr	r0, [r7, #8]
 80017d8:	f7ff ffad 	bl	8001736 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE14_M_get_pointerERKSt9_Any_data>
 80017dc:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 80017de:	4619      	mov	r1, r3
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f000 f850 	bl	8001886 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE15_M_init_functorIRKS7_EEvRSt9_Any_dataOT_>
	      break;
 80017e6:	e004      	b.n	80017f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 80017e8:	4621      	mov	r1, r4
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 f85d 	bl	80018aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 80017f0:	bf00      	nop
	  return false;
 80017f2:	2300      	movs	r3, #0
	}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd90      	pop	{r4, r7, pc}

080017fc <_ZNSt11_Tuple_implILj0EJP3PinEEC1IS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8001806:	687c      	ldr	r4, [r7, #4]
 8001808:	6838      	ldr	r0, [r7, #0]
 800180a:	f7ff fecf 	bl	80015ac <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800180e:	4603      	mov	r3, r0
 8001810:	4619      	mov	r1, r3
 8001812:	4620      	mov	r0, r4
 8001814:	f000 f85d 	bl	80018d2 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1IS1_EEOT_>
	{ }
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bd90      	pop	{r4, r7, pc}

08001822 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM3PinFvvEPS2_EEEERKT_v>:
      _M_access() const
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fd44 	bl	80012b8 <_ZNKSt9_Any_data9_M_accessEv>
 8001830:	4603      	mov	r3, r0
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_ZSt7forwardIRSt5_BindIFM3PinFvvEPS1_EEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <_ZSt13__invoke_implIvRSt5_BindIFM3PinFvvEPS1_EEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	7138      	strb	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8001858:	6838      	ldr	r0, [r7, #0]
 800185a:	f7ff ffee 	bl	800183a <_ZSt7forwardIRSt5_BindIFM3PinFvvEPS1_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 800185e:	4603      	mov	r3, r0
 8001860:	4618      	mov	r0, r3
 8001862:	f000 f847 	bl	80018f4 <_ZNSt5_BindIFM3PinFvvEPS0_EEclIJEvEET0_DpOT_>
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fd14 	bl	80012a4 <_ZNSt9_Any_data9_M_accessEv>
 800187c:	4603      	mov	r3, r0
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE15_M_init_functorIRKS7_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8001886:	b590      	push	{r4, r7, lr}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8001890:	6838      	ldr	r0, [r7, #0]
 8001892:	f000 f840 	bl	8001916 <_ZSt7forwardIRKSt5_BindIFM3PinFvvEPS1_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001896:	4603      	mov	r3, r0
 8001898:	4622      	mov	r2, r4
 800189a:	4619      	mov	r1, r3
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f844 	bl	800192a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE9_M_createIRKS7_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}

080018aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff5b 	bl	8001770 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM3PinFvvEPS2_EEEERT_v>
 80018ba:	4603      	mov	r3, r0
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x20>
 80018c2:	210c      	movs	r1, #12
 80018c4:	4618      	mov	r0, r3
 80018c6:	f007 fc35 	bl	8009134 <_ZdlPvj>
	}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80018dc:	6838      	ldr	r0, [r7, #0]
 80018de:	f7ff fe65 	bl	80015ac <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 80018e2:	4603      	mov	r3, r0
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_ZNSt5_BindIFM3PinFvvEPS0_EEclIJEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 80018fc:	f000 f832 	bl	8001964 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	  return this->__call<_Result>(
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	4622      	mov	r2, r4
 8001906:	4619      	mov	r1, r3
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f832 	bl	8001972 <_ZNSt5_BindIFM3PinFvvEPS0_EE6__callIvJEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	      _Bound_indexes());
 800190e:	bf00      	nop
	}
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bd90      	pop	{r4, r7, pc}

08001916 <_ZSt7forwardIRKSt5_BindIFM3PinFvvEPS1_EEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM3PinFvvEPS2_EEE9_M_createIRKS7_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 800192a:	b5b0      	push	{r4, r5, r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8001936:	68b8      	ldr	r0, [r7, #8]
 8001938:	f7ff ffed 	bl	8001916 <_ZSt7forwardIRKSt5_BindIFM3PinFvvEPS1_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 800193c:	4605      	mov	r5, r0
 800193e:	200c      	movs	r0, #12
 8001940:	f007 fbfa 	bl	8009138 <_Znwj>
 8001944:	4603      	mov	r3, r0
 8001946:	461c      	mov	r4, r3
 8001948:	4623      	mov	r3, r4
 800194a:	462a      	mov	r2, r5
 800194c:	ca07      	ldmia	r2, {r0, r1, r2}
 800194e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    __dest._M_access<_Functor*>()
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f7ff ff0c 	bl	8001770 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM3PinFvvEPS2_EEEERT_v>
 8001958:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 800195a:	601c      	str	r4, [r3, #0]
	  }
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bdb0      	pop	{r4, r5, r7, pc}

08001964 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8001968:	bf00      	nop
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <_ZNSt5_BindIFM3PinFvvEPS0_EE6__callIvJEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 8001972:	b590      	push	{r4, r7, lr}
 8001974:	b087      	sub	sp, #28
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 800197e:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3308      	adds	r3, #8
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f810 	bl	80019aa <_ZSt3getILj0EJP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 800198a:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f816 	bl	80019c4 <_ZNVKSt3_MuIP3PinLb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>
 8001998:	4603      	mov	r3, r0
 800199a:	4619      	mov	r1, r3
 800199c:	4620      	mov	r0, r4
 800199e:	f000 f81f 	bl	80019e0 <_ZSt8__invokeIRM3PinFvvEJRPS0_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS7_DpOS8_>
	      );
 80019a2:	bf00      	nop
	}
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd90      	pop	{r4, r7, pc}

080019aa <_ZSt3getILj0EJP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f829 	bl	8001a0c <_ZSt12__get_helperILj0EP3PinJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_ZNVKSt3_MuIP3PinLb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 80019d0:	68b8      	ldr	r0, [r7, #8]
 80019d2:	f000 f827 	bl	8001a24 <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_ZSt8__invokeIRM3PinFvvEJRPS0_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS7_DpOS8_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 80019e0:	b5b0      	push	{r4, r5, r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f824 	bl	8001a38 <_ZSt7forwardIRM3PinFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80019f0:	4604      	mov	r4, r0
 80019f2:	6838      	ldr	r0, [r7, #0]
 80019f4:	f000 f816 	bl	8001a24 <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4621      	mov	r1, r4
 80019fe:	4628      	mov	r0, r5
 8001a00:	f000 f824 	bl	8001a4c <_ZSt13__invoke_implIvRM3PinFvvERPS0_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 8001a04:	bf00      	nop
    }
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bdb0      	pop	{r4, r5, r7, pc}

08001a0c <_ZSt12__get_helperILj0EP3PinJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f840 	bl	8001a9a <_ZNSt11_Tuple_implILj0EJP3PinEE7_M_headERS2_>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <_ZSt7forwardIRM3PinFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <_ZSt13__invoke_implIvRM3PinFvvERPS0_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	7338      	strb	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ffe3 	bl	8001a24 <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	6852      	ldr	r2, [r2, #4]
 8001a66:	1052      	asrs	r2, r2, #1
 8001a68:	1899      	adds	r1, r3, r2
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	6852      	ldr	r2, [r2, #4]
 8001a6e:	f002 0201 	and.w	r2, r2, #1
 8001a72:	2a00      	cmp	r2, #0
 8001a74:	d102      	bne.n	8001a7c <_ZSt13__invoke_implIvRM3PinFvvERPS0_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x30>
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	e008      	b.n	8001a8e <_ZSt13__invoke_implIvRM3PinFvvERPS0_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x42>
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	6852      	ldr	r2, [r2, #4]
 8001a80:	1052      	asrs	r2, r2, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4608      	mov	r0, r1
 8001a90:	4798      	blx	r3
 8001a92:	bf00      	nop
    }
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <_ZNSt11_Tuple_implILj0EJP3PinEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 f805 	bl	8001ab4 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <_ZN3Pin5setOnEb>:
	setOn(bool on)
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	70fb      	strb	r3, [r7, #3]
		turn(on);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3310      	adds	r3, #16
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	4798      	blx	r3
	}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_ZN13PinControllerC1ER3PinPKc>:

#include "d_debug.h"



PinController::PinController(Pin &pin, const char *name)
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
	: Object(name),
	  pin(pin)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fae9 	bl	80010d4 <_ZN6ObjectC1EPKc>
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <_ZN13PinControllerC1ER3PinPKc+0x2c>)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
{
}
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	080098a8 	.word	0x080098a8

08001b1c <_ZN13PinController3setEb>:

void
PinController::set(bool state) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	70fb      	strb	r3, [r7, #3]
	pin.setOn(state);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	78fa      	ldrb	r2, [r7, #3]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ffc9 	bl	8001ac8 <_ZN3Pin5setOnEb>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <_ZN13PinControllerD1Ev>:
#include <Pin.h>

#include "Object.h"


class PinController : public Object{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <_ZN13PinControllerD1Ev+0x20>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fa9f 	bl	8001094 <_ZN6ObjectD1Ev>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	080098a8 	.word	0x080098a8

08001b64 <_ZN13PinControllerD0Ev>:
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ffe7 	bl	8001b40 <_ZN13PinControllerD1Ev>
 8001b72:	2154      	movs	r1, #84	; 0x54
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f007 fadd 	bl	8009134 <_ZdlPvj>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_ZNK6Object7getNameEv>:
		return connected;
	}


	inline const char *
	getName() const
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	{
		return name;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
	}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <_ZN13SoftwareTimer5startEm>:
		d_debug_assert(rc == pdPASS);
	}


	inline void
	start(TickType_t timeout = portMAX_DELAY)
 8001b9a:	b590      	push	{r4, r7, lr}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af02      	add	r7, sp, #8
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
	{
		d_debug_assert(handle != nullptr);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <_ZN13SoftwareTimer5startEm+0x16>
 8001bac:	f000 fc22 	bl	80023f4 <Error_Handler>

		xTimerStart(handle, timeout);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001bb4:	f006 f8ee 	bl	8007d94 <xTaskGetTickCount>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f006 fdb8 	bl	8008738 <xTimerGenericCommand>
	}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd90      	pop	{r4, r7, pc}

08001bd0 <_ZN13SoftwareTimer13timerCallbackEPv>:
/* TODO: Support for calls from ISR. */


void
SoftwareTimer::timerCallback(TimerHandle_t handle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	reinterpret_cast<SoftwareTimer *>(pvTimerGetTimerID(handle))->run();
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f007 f877 	bl	8008ccc <pvTimerGetTimerID>
 8001bde:	4603      	mov	r3, r0
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	3210      	adds	r2, #16
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	4790      	blx	r2
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <_ZN13SoftwareTimerC1EmSt8functionIFvvEEbbPKc>:


SoftwareTimer::SoftwareTimer(TickType_t period,
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	70fb      	strb	r3, [r7, #3]
	: Object(name),
	  callback(callback),
	  period(period),
	  oneShot(oneShot),
	  autoStart(autoStart),
	  handle(nullptr)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	69f9      	ldr	r1, [r7, #28]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fa64 	bl	80010d4 <_ZN6ObjectC1EPKc>
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <_ZN13SoftwareTimerC1EmSt8functionIFvvEEbbPKc+0x50>)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	601a      	str	r2, [r3, #0]
	  callback(callback),
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	330c      	adds	r3, #12
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff f8fb 	bl	8000e14 <_ZNSt8functionIFvvEEC1ERKS1_>
	  period(period),
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	61da      	str	r2, [r3, #28]
	  oneShot(oneShot),
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	f883 2020 	strb.w	r2, [r3, #32]
	  autoStart(autoStart),
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	7e3a      	ldrb	r2, [r7, #24]
 8001c30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	  handle(nullptr)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
{

}
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	080098c0 	.word	0x080098c0

08001c48 <_ZN13SoftwareTimer6onInitEv>:


void
SoftwareTimer::onInit()
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	6078      	str	r0, [r7, #4]
	handle = xTimerCreate(getName(), period,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff96 	bl	8001b84 <_ZNK6Object7getNameEv>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69d9      	ldr	r1, [r3, #28]
						  oneShot ? pdFALSE : pdTRUE,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
	handle = xTimerCreate(getName(), period,
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <_ZN13SoftwareTimer6onInitEv+0x22>
 8001c66:	2200      	movs	r2, #0
 8001c68:	e000      	b.n	8001c6c <_ZN13SoftwareTimer6onInitEv+0x24>
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <_ZN13SoftwareTimer6onInitEv+0x48>)
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f006 fd0d 	bl	8008690 <xTimerCreate>
 8001c76:	4602      	mov	r2, r0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24
						  this, &SoftwareTimer::timerCallback);

	d_debug_assert(handle != nullptr);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <_ZN13SoftwareTimer6onInitEv+0x40>
 8001c84:	f000 fbb6 	bl	80023f4 <Error_Handler>
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	08001bd1 	.word	0x08001bd1

08001c94 <_ZN13SoftwareTimer7onStartEv>:


void
SoftwareTimer::onStart()
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	if (autoStart) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <_ZN13SoftwareTimer7onStartEv+0x1c>
		start();
 8001ca6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ff75 	bl	8001b9a <_ZN13SoftwareTimer5startEm>
	}
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <_ZN13SoftwareTimer3runEv>:


void
SoftwareTimer::run()
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	if (callback) {
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	330c      	adds	r3, #12
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff f883 	bl	8000dd0 <_ZNKSt8functionIFvvEEcvbEv>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d004      	beq.n	8001cda <_ZN13SoftwareTimer3runEv+0x22>
		callback();
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	330c      	adds	r3, #12
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff f8c8 	bl	8000e6a <_ZNKSt8functionIFvvEEclEv>
	}
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <_ZN4TaskC1EjjPKc>:

bool g_data = 0;
bool g_power = 0;
int g_unit = 0;

Task::Task(unsigned int stackSize, unsigned int priority, const char *name)
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
	: Object(name),
	  stackSize(stackSize),
	  priority(priority)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6839      	ldr	r1, [r7, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f9ec 	bl	80010d4 <_ZN6ObjectC1EPKc>
 8001cfc:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <_ZN4TaskC1EjjPKc+0x34>)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	601a      	str	r2, [r3, #0]
	  stackSize(stackSize),
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	60da      	str	r2, [r3, #12]
	  priority(priority)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]
{

}
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	080098dc 	.word	0x080098dc

08001d1c <_ZN4Task7onStartEv>:


void
Task::onStart()
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	6078      	str	r0, [r7, #4]
	auto rc = xTaskCreate(&Task::task, getName(), stackSize,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff2c 	bl	8001b84 <_ZNK6Object7getNameEv>
 8001d2c:	4601      	mov	r1, r0
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	b29a      	uxth	r2, r3
			this, priority, NULL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
	auto rc = xTaskCreate(&Task::task, getName(), stackSize,
 8001d38:	2000      	movs	r0, #0
 8001d3a:	9001      	str	r0, [sp, #4]
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4806      	ldr	r0, [pc, #24]	; (8001d5c <_ZN4Task7onStartEv+0x40>)
 8001d42:	f005 fd11 	bl	8007768 <xTaskCreate>
 8001d46:	60f8      	str	r0, [r7, #12]

	d_debug_assert(rc == pdPASS);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d001      	beq.n	8001d52 <_ZN4Task7onStartEv+0x36>
 8001d4e:	f000 fb51 	bl	80023f4 <Error_Handler>
}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	08001d61 	.word	0x08001d61

08001d60 <_ZN4Task4taskEPv>:


void
Task::task(void * thiz)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	auto task = reinterpret_cast<Task *>(thiz);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	60fb      	str	r3, [r7, #12]

	task->run();
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	3310      	adds	r3, #16
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	4798      	blx	r3
}
 8001d78:	bf00      	nop
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <d_main>:

extern "C" {

void
d_main()
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af02      	add	r7, sp, #8
  auto rc = xTaskCreate(d_main_task, "d_main_task", 352, NULL, Task::DefaultPriority, NULL);
 8001d86:	2300      	movs	r3, #0
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8001d94:	4908      	ldr	r1, [pc, #32]	; (8001db8 <d_main+0x38>)
 8001d96:	4809      	ldr	r0, [pc, #36]	; (8001dbc <d_main+0x3c>)
 8001d98:	f005 fce6 	bl	8007768 <xTaskCreate>
 8001d9c:	6078      	str	r0, [r7, #4]
  d_debug_assert(rc == pdPASS);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d001      	beq.n	8001da8 <d_main+0x28>
 8001da4:	f000 fb26 	bl	80023f4 <Error_Handler>
  vTaskDelete(NULL);
 8001da8:	2000      	movs	r0, #0
 8001daa:	f005 fe31 	bl	8007a10 <vTaskDelete>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	08009594 	.word	0x08009594
 8001dbc:	08001dd5 	.word	0x08001dd5

08001dc0 <clockControl>:


}

void
clockControl(){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	clock.dataSend();
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <clockControl+0x10>)
 8001dc6:	f7fe fc3b 	bl	8000640 <_ZN5Clock8dataSendEv>
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000684 	.word	0x20000684

08001dd4 <_ZL11d_main_taskPv>:


static void
d_main_task(void *)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  d_debug_init();
  Object::start(nullptr, UpdatePeriod);
 8001ddc:	2164      	movs	r1, #100	; 0x64
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff f914 	bl	800100c <_ZN6Object5startEPKcj>

  for (;;)
  {
	  vTaskDelay(1000);
 8001de4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de8:	f005 fe84 	bl	8007af4 <vTaskDelay>
 8001dec:	e7fa      	b.n	8001de4 <_ZL11d_main_taskPv+0x10>

08001dee <_ZNSt8functionIFvvEEC1EDn>:
      function(nullptr_t) noexcept
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	6053      	str	r3, [r2, #4]
 8001e02:	6093      	str	r3, [r2, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fff2 	bl	8000df0 <_ZNSt14_Function_baseC1Ev>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZN4GpioD1Ev>:
class Gpio {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <_ZN4GpioD1Ev+0x24>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	330c      	adds	r3, #12
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fea2 	bl	8000b78 <_ZNSt8functionIFvvEED1Ev>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	08009834 	.word	0x08009834

08001e44 <_Z41__static_initialization_and_destruction_0ii>:
  }
}
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b096      	sub	sp, #88	; 0x58
 8001e48:	af08      	add	r7, sp, #32
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	f040 80b0 	bne.w	8001fb6 <_Z41__static_initialization_and_destruction_0ii+0x172>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	f040 80aa 	bne.w	8001fb6 <_Z41__static_initialization_and_destruction_0ii+0x172>
PWM clockPeriphPWM(&htim1, TIM_CHANNEL_2, "clockPeriphPWM");
 8001e62:	4b79      	ldr	r3, [pc, #484]	; (8002048 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8001e64:	2204      	movs	r2, #4
 8001e66:	4979      	ldr	r1, [pc, #484]	; (800204c <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8001e68:	4879      	ldr	r0, [pc, #484]	; (8002050 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8001e6a:	f7ff f989 	bl	8001180 <_ZN3PWMC1EP19__TIM_HandleTypeDefiPKc>
GPin L1(L1_GPIO_Port, L1_Pin, GPIO_PIN_SET);
 8001e6e:	2301      	movs	r3, #1
 8001e70:	2280      	movs	r2, #128	; 0x80
 8001e72:	4978      	ldr	r1, [pc, #480]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8001e74:	4878      	ldr	r0, [pc, #480]	; (8002058 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8001e76:	f7fe fe0b 	bl	8000a90 <_ZN4GPinC1EP12GPIO_TypeDeft13GPIO_PinState>
PinController l1Controller(L1, "l1_control");
 8001e7a:	4a78      	ldr	r2, [pc, #480]	; (800205c <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8001e7c:	4976      	ldr	r1, [pc, #472]	; (8002058 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8001e7e:	4878      	ldr	r0, [pc, #480]	; (8002060 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8001e80:	f7ff fe34 	bl	8001aec <_ZN13PinControllerC1ER3PinPKc>
GPin L2(L2_GPIO_Port, L2_Pin, GPIO_PIN_SET);
 8001e84:	2301      	movs	r3, #1
 8001e86:	2240      	movs	r2, #64	; 0x40
 8001e88:	4972      	ldr	r1, [pc, #456]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8001e8a:	4876      	ldr	r0, [pc, #472]	; (8002064 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8001e8c:	f7fe fe00 	bl	8000a90 <_ZN4GPinC1EP12GPIO_TypeDeft13GPIO_PinState>
PinController l2Controller(L2, "l2_control");
 8001e90:	4a75      	ldr	r2, [pc, #468]	; (8002068 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8001e92:	4974      	ldr	r1, [pc, #464]	; (8002064 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8001e94:	4875      	ldr	r0, [pc, #468]	; (800206c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8001e96:	f7ff fe29 	bl	8001aec <_ZN13PinControllerC1ER3PinPKc>
GPin L3(L3_GPIO_Port, L3_Pin, GPIO_PIN_SET);
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	496d      	ldr	r1, [pc, #436]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8001ea0:	4873      	ldr	r0, [pc, #460]	; (8002070 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8001ea2:	f7fe fdf5 	bl	8000a90 <_ZN4GPinC1EP12GPIO_TypeDeft13GPIO_PinState>
PinController l3Controller(L3, "l3_control");
 8001ea6:	4a73      	ldr	r2, [pc, #460]	; (8002074 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8001ea8:	4971      	ldr	r1, [pc, #452]	; (8002070 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8001eaa:	4873      	ldr	r0, [pc, #460]	; (8002078 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8001eac:	f7ff fe1e 	bl	8001aec <_ZN13PinControllerC1ER3PinPKc>
GPin L4(L4_GPIO_Port, L4_Pin, GPIO_PIN_SET);
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	2210      	movs	r2, #16
 8001eb4:	4967      	ldr	r1, [pc, #412]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8001eb6:	4871      	ldr	r0, [pc, #452]	; (800207c <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8001eb8:	f7fe fdea 	bl	8000a90 <_ZN4GPinC1EP12GPIO_TypeDeft13GPIO_PinState>
PinController l4Controller(L4, "l4_control");
 8001ebc:	4a70      	ldr	r2, [pc, #448]	; (8002080 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8001ebe:	496f      	ldr	r1, [pc, #444]	; (800207c <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8001ec0:	4870      	ldr	r0, [pc, #448]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8001ec2:	f7ff fe13 	bl	8001aec <_ZN13PinControllerC1ER3PinPKc>
GPin L5(L5_GPIO_Port, L5_Pin, GPIO_PIN_SET);
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	2208      	movs	r2, #8
 8001eca:	4962      	ldr	r1, [pc, #392]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8001ecc:	486e      	ldr	r0, [pc, #440]	; (8002088 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8001ece:	f7fe fddf 	bl	8000a90 <_ZN4GPinC1EP12GPIO_TypeDeft13GPIO_PinState>
PinController l5Controller(L5, "l5_control");
 8001ed2:	4a6e      	ldr	r2, [pc, #440]	; (800208c <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8001ed4:	496c      	ldr	r1, [pc, #432]	; (8002088 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8001ed6:	486e      	ldr	r0, [pc, #440]	; (8002090 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8001ed8:	f7ff fe08 	bl	8001aec <_ZN13PinControllerC1ER3PinPKc>
GPin L6(L6_GPIO_Port, L6_Pin, GPIO_PIN_SET);
 8001edc:	2301      	movs	r3, #1
 8001ede:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ee2:	496c      	ldr	r1, [pc, #432]	; (8002094 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8001ee4:	486c      	ldr	r0, [pc, #432]	; (8002098 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8001ee6:	f7fe fdd3 	bl	8000a90 <_ZN4GPinC1EP12GPIO_TypeDeft13GPIO_PinState>
PinController l6Controller(L6, "l6_control");
 8001eea:	4a6c      	ldr	r2, [pc, #432]	; (800209c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8001eec:	496a      	ldr	r1, [pc, #424]	; (8002098 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8001eee:	486c      	ldr	r0, [pc, #432]	; (80020a0 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8001ef0:	f7ff fdfc 	bl	8001aec <_ZN13PinControllerC1ER3PinPKc>
GPin DATA(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001efa:	4966      	ldr	r1, [pc, #408]	; (8002094 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8001efc:	4869      	ldr	r0, [pc, #420]	; (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8001efe:	f7fe fdc7 	bl	8000a90 <_ZN4GPinC1EP12GPIO_TypeDeft13GPIO_PinState>
PinController dataController(DATA, "data_control");
 8001f02:	4a69      	ldr	r2, [pc, #420]	; (80020a8 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8001f04:	4967      	ldr	r1, [pc, #412]	; (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8001f06:	4869      	ldr	r0, [pc, #420]	; (80020ac <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8001f08:	f7ff fdf0 	bl	8001aec <_ZN13PinControllerC1ER3PinPKc>
Gpio buttonLeft(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin);
 8001f0c:	f107 0308 	add.w	r3, r7, #8
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff6b 	bl	8001dee <_ZNSt8functionIFvvEEC1EDn>
 8001f18:	f107 0308 	add.w	r3, r7, #8
 8001f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f20:	494c      	ldr	r1, [pc, #304]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8001f22:	4863      	ldr	r0, [pc, #396]	; (80020b0 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8001f24:	f7fe feb6 	bl	8000c94 <_ZN4GpioC1EP12GPIO_TypeDeftSt8functionIFvvEE>
 8001f28:	f107 0308 	add.w	r3, r7, #8
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fe23 	bl	8000b78 <_ZNSt8functionIFvvEED1Ev>
Gpio buttonMid(BUTTON_MIDDLE_GPIO_Port, BUTTON_MIDDLE_Pin);
 8001f32:	f107 0318 	add.w	r3, r7, #24
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff58 	bl	8001dee <_ZNSt8functionIFvvEEC1EDn>
 8001f3e:	f107 0318 	add.w	r3, r7, #24
 8001f42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f46:	4943      	ldr	r1, [pc, #268]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8001f48:	485a      	ldr	r0, [pc, #360]	; (80020b4 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8001f4a:	f7fe fea3 	bl	8000c94 <_ZN4GpioC1EP12GPIO_TypeDeftSt8functionIFvvEE>
 8001f4e:	f107 0318 	add.w	r3, r7, #24
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fe10 	bl	8000b78 <_ZNSt8functionIFvvEED1Ev>
Gpio buttonRight(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin);
 8001f58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ff45 	bl	8001dee <_ZNSt8functionIFvvEEC1EDn>
 8001f64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f6c:	4939      	ldr	r1, [pc, #228]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8001f6e:	4852      	ldr	r0, [pc, #328]	; (80020b8 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8001f70:	f7fe fe90 	bl	8000c94 <_ZN4GpioC1EP12GPIO_TypeDeftSt8functionIFvvEE>
 8001f74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fdfd 	bl	8000b78 <_ZNSt8functionIFvvEED1Ev>
Menu menu(buttonLeft, buttonMid, buttonRight, "menu");
 8001f7e:	4b4f      	ldr	r3, [pc, #316]	; (80020bc <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	4b4d      	ldr	r3, [pc, #308]	; (80020b8 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8001f84:	4a4b      	ldr	r2, [pc, #300]	; (80020b4 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8001f86:	494a      	ldr	r1, [pc, #296]	; (80020b0 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8001f88:	484d      	ldr	r0, [pc, #308]	; (80020c0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8001f8a:	f7fe ffa3 	bl	8000ed4 <_ZN4MenuC1ER4GpioS1_S1_PKc>
Clock clock(&hrtc, clockPeriphPWM, dataController, l1Controller, l2Controller, l3Controller, l4Controller, l5Controller, l6Controller, "clock");
 8001f8e:	4b4d      	ldr	r3, [pc, #308]	; (80020c4 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8001f90:	9306      	str	r3, [sp, #24]
 8001f92:	4b43      	ldr	r3, [pc, #268]	; (80020a0 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8001f94:	9305      	str	r3, [sp, #20]
 8001f96:	4b3e      	ldr	r3, [pc, #248]	; (8002090 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8001f98:	9304      	str	r3, [sp, #16]
 8001f9a:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8001f9c:	9303      	str	r3, [sp, #12]
 8001f9e:	4b36      	ldr	r3, [pc, #216]	; (8002078 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8001fa0:	9302      	str	r3, [sp, #8]
 8001fa2:	4b32      	ldr	r3, [pc, #200]	; (800206c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	4b40      	ldr	r3, [pc, #256]	; (80020ac <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8001fac:	4a28      	ldr	r2, [pc, #160]	; (8002050 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8001fae:	4946      	ldr	r1, [pc, #280]	; (80020c8 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8001fb0:	4846      	ldr	r0, [pc, #280]	; (80020cc <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8001fb2:	f7fe f90f 	bl	80001d4 <_ZN5ClockC1EP17RTC_HandleTypeDefR3PWMR13PinControllerS5_S5_S5_S5_S5_S5_PKc>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d140      	bne.n	800203e <_Z41__static_initialization_and_destruction_0ii+0x1fa>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d13b      	bne.n	800203e <_Z41__static_initialization_and_destruction_0ii+0x1fa>
 8001fc6:	4841      	ldr	r0, [pc, #260]	; (80020cc <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8001fc8:	f7fe fd04 	bl	80009d4 <_ZN5ClockD1Ev>
Menu menu(buttonLeft, buttonMid, buttonRight, "menu");
 8001fcc:	483c      	ldr	r0, [pc, #240]	; (80020c0 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8001fce:	f7fe fffb 	bl	8000fc8 <_ZN4MenuD1Ev>
Gpio buttonRight(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin);
 8001fd2:	4839      	ldr	r0, [pc, #228]	; (80020b8 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8001fd4:	f7ff ff22 	bl	8001e1c <_ZN4GpioD1Ev>
Gpio buttonMid(BUTTON_MIDDLE_GPIO_Port, BUTTON_MIDDLE_Pin);
 8001fd8:	4836      	ldr	r0, [pc, #216]	; (80020b4 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8001fda:	f7ff ff1f 	bl	8001e1c <_ZN4GpioD1Ev>
Gpio buttonLeft(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin);
 8001fde:	4834      	ldr	r0, [pc, #208]	; (80020b0 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8001fe0:	f7ff ff1c 	bl	8001e1c <_ZN4GpioD1Ev>
PinController dataController(DATA, "data_control");
 8001fe4:	4831      	ldr	r0, [pc, #196]	; (80020ac <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8001fe6:	f7ff fdab 	bl	8001b40 <_ZN13PinControllerD1Ev>
GPin DATA(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 8001fea:	482e      	ldr	r0, [pc, #184]	; (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8001fec:	f7fe fda2 	bl	8000b34 <_ZN4GPinD1Ev>
PinController l6Controller(L6, "l6_control");
 8001ff0:	482b      	ldr	r0, [pc, #172]	; (80020a0 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8001ff2:	f7ff fda5 	bl	8001b40 <_ZN13PinControllerD1Ev>
GPin L6(L6_GPIO_Port, L6_Pin, GPIO_PIN_SET);
 8001ff6:	4828      	ldr	r0, [pc, #160]	; (8002098 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8001ff8:	f7fe fd9c 	bl	8000b34 <_ZN4GPinD1Ev>
PinController l5Controller(L5, "l5_control");
 8001ffc:	4824      	ldr	r0, [pc, #144]	; (8002090 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8001ffe:	f7ff fd9f 	bl	8001b40 <_ZN13PinControllerD1Ev>
GPin L5(L5_GPIO_Port, L5_Pin, GPIO_PIN_SET);
 8002002:	4821      	ldr	r0, [pc, #132]	; (8002088 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8002004:	f7fe fd96 	bl	8000b34 <_ZN4GPinD1Ev>
PinController l4Controller(L4, "l4_control");
 8002008:	481e      	ldr	r0, [pc, #120]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 800200a:	f7ff fd99 	bl	8001b40 <_ZN13PinControllerD1Ev>
GPin L4(L4_GPIO_Port, L4_Pin, GPIO_PIN_SET);
 800200e:	481b      	ldr	r0, [pc, #108]	; (800207c <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8002010:	f7fe fd90 	bl	8000b34 <_ZN4GPinD1Ev>
PinController l3Controller(L3, "l3_control");
 8002014:	4818      	ldr	r0, [pc, #96]	; (8002078 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8002016:	f7ff fd93 	bl	8001b40 <_ZN13PinControllerD1Ev>
GPin L3(L3_GPIO_Port, L3_Pin, GPIO_PIN_SET);
 800201a:	4815      	ldr	r0, [pc, #84]	; (8002070 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 800201c:	f7fe fd8a 	bl	8000b34 <_ZN4GPinD1Ev>
PinController l2Controller(L2, "l2_control");
 8002020:	4812      	ldr	r0, [pc, #72]	; (800206c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8002022:	f7ff fd8d 	bl	8001b40 <_ZN13PinControllerD1Ev>
GPin L2(L2_GPIO_Port, L2_Pin, GPIO_PIN_SET);
 8002026:	480f      	ldr	r0, [pc, #60]	; (8002064 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8002028:	f7fe fd84 	bl	8000b34 <_ZN4GPinD1Ev>
PinController l1Controller(L1, "l1_control");
 800202c:	480c      	ldr	r0, [pc, #48]	; (8002060 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 800202e:	f7ff fd87 	bl	8001b40 <_ZN13PinControllerD1Ev>
GPin L1(L1_GPIO_Port, L1_Pin, GPIO_PIN_SET);
 8002032:	4809      	ldr	r0, [pc, #36]	; (8002058 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8002034:	f7fe fd7e 	bl	8000b34 <_ZN4GPinD1Ev>
PWM clockPeriphPWM(&htim1, TIM_CHANNEL_2, "clockPeriphPWM");
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 800203a:	f7ff f911 	bl	8001260 <_ZN3PWMD1Ev>
}
 800203e:	bf00      	nop
 8002040:	3738      	adds	r7, #56	; 0x38
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	080095a0 	.word	0x080095a0
 800204c:	200009d0 	.word	0x200009d0
 8002050:	200001a4 	.word	0x200001a4
 8002054:	40010c00 	.word	0x40010c00
 8002058:	200001b8 	.word	0x200001b8
 800205c:	080095b0 	.word	0x080095b0
 8002060:	20000200 	.word	0x20000200
 8002064:	20000254 	.word	0x20000254
 8002068:	080095bc 	.word	0x080095bc
 800206c:	2000029c 	.word	0x2000029c
 8002070:	200002f0 	.word	0x200002f0
 8002074:	080095c8 	.word	0x080095c8
 8002078:	20000338 	.word	0x20000338
 800207c:	2000038c 	.word	0x2000038c
 8002080:	080095d4 	.word	0x080095d4
 8002084:	200003d4 	.word	0x200003d4
 8002088:	20000428 	.word	0x20000428
 800208c:	080095e0 	.word	0x080095e0
 8002090:	20000470 	.word	0x20000470
 8002094:	40010800 	.word	0x40010800
 8002098:	200004c4 	.word	0x200004c4
 800209c:	080095ec 	.word	0x080095ec
 80020a0:	2000050c 	.word	0x2000050c
 80020a4:	20000560 	.word	0x20000560
 80020a8:	080095f8 	.word	0x080095f8
 80020ac:	200005a8 	.word	0x200005a8
 80020b0:	200005fc 	.word	0x200005fc
 80020b4:	2000061c 	.word	0x2000061c
 80020b8:	2000063c 	.word	0x2000063c
 80020bc:	08009608 	.word	0x08009608
 80020c0:	2000065c 	.word	0x2000065c
 80020c4:	08009610 	.word	0x08009610
 80020c8:	2000090c 	.word	0x2000090c
 80020cc:	20000684 	.word	0x20000684

080020d0 <_GLOBAL__sub_I_clockPeriphPWM>:
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020d8:	2001      	movs	r0, #1
 80020da:	f7ff feb3 	bl	8001e44 <_Z41__static_initialization_and_destruction_0ii>
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_GLOBAL__sub_D_clockPeriphPWM>:
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020e8:	2000      	movs	r0, #0
 80020ea:	f7ff feab 	bl	8001e44 <_Z41__static_initialization_and_destruction_0ii>
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <MX_FREERTOS_Init+0x18>)
 800210a:	2100      	movs	r1, #0
 800210c:	4804      	ldr	r0, [pc, #16]	; (8002120 <MX_FREERTOS_Init+0x1c>)
 800210e:	f004 fc61 	bl	80069d4 <osThreadNew>
 8002112:	4603      	mov	r3, r0
 8002114:	4a03      	ldr	r2, [pc, #12]	; (8002124 <MX_FREERTOS_Init+0x20>)
 8002116:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	080098f0 	.word	0x080098f0
 8002120:	08002129 	.word	0x08002129
 8002124:	20000904 	.word	0x20000904

08002128 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  d_main();
 8002130:	f7ff fe26 	bl	8001d80 <d_main>
  /* USER CODE END StartDefaultTask */
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002142:	f107 0310 	add.w	r3, r7, #16
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002150:	4b52      	ldr	r3, [pc, #328]	; (800229c <MX_GPIO_Init+0x160>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	4a51      	ldr	r2, [pc, #324]	; (800229c <MX_GPIO_Init+0x160>)
 8002156:	f043 0310 	orr.w	r3, r3, #16
 800215a:	6193      	str	r3, [r2, #24]
 800215c:	4b4f      	ldr	r3, [pc, #316]	; (800229c <MX_GPIO_Init+0x160>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002168:	4b4c      	ldr	r3, [pc, #304]	; (800229c <MX_GPIO_Init+0x160>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4a4b      	ldr	r2, [pc, #300]	; (800229c <MX_GPIO_Init+0x160>)
 800216e:	f043 0320 	orr.w	r3, r3, #32
 8002172:	6193      	str	r3, [r2, #24]
 8002174:	4b49      	ldr	r3, [pc, #292]	; (800229c <MX_GPIO_Init+0x160>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002180:	4b46      	ldr	r3, [pc, #280]	; (800229c <MX_GPIO_Init+0x160>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a45      	ldr	r2, [pc, #276]	; (800229c <MX_GPIO_Init+0x160>)
 8002186:	f043 0304 	orr.w	r3, r3, #4
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b43      	ldr	r3, [pc, #268]	; (800229c <MX_GPIO_Init+0x160>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002198:	4b40      	ldr	r3, [pc, #256]	; (800229c <MX_GPIO_Init+0x160>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a3f      	ldr	r2, [pc, #252]	; (800229c <MX_GPIO_Init+0x160>)
 800219e:	f043 0308 	orr.w	r3, r3, #8
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b3d      	ldr	r3, [pc, #244]	; (800229c <MX_GPIO_Init+0x160>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET);
 80021b0:	2201      	movs	r2, #1
 80021b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021b6:	483a      	ldr	r0, [pc, #232]	; (80022a0 <MX_GPIO_Init+0x164>)
 80021b8:	f001 f80a 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L6_GPIO_Port, L6_Pin, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c2:	4837      	ldr	r0, [pc, #220]	; (80022a0 <MX_GPIO_Init+0x164>)
 80021c4:	f001 f804 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L5_Pin|L4_Pin|L3_Pin|L2_Pin
 80021c8:	2200      	movs	r2, #0
 80021ca:	21f8      	movs	r1, #248	; 0xf8
 80021cc:	4835      	ldr	r0, [pc, #212]	; (80022a4 <MX_GPIO_Init+0x168>)
 80021ce:	f000 ffff 	bl	80031d0 <HAL_GPIO_WritePin>
                          |L1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021d2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80021d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d8:	2303      	movs	r3, #3
 80021da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	4619      	mov	r1, r3
 80021e2:	4831      	ldr	r0, [pc, #196]	; (80022a8 <MX_GPIO_Init+0x16c>)
 80021e4:	f000 fd60 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80021e8:	f641 43ff 	movw	r3, #7423	; 0x1cff
 80021ec:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ee:	2303      	movs	r3, #3
 80021f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f2:	f107 0310 	add.w	r3, r7, #16
 80021f6:	4619      	mov	r1, r3
 80021f8:	4829      	ldr	r0, [pc, #164]	; (80022a0 <MX_GPIO_Init+0x164>)
 80021fa:	f000 fd55 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80021fe:	f648 7307 	movw	r3, #36615	; 0x8f07
 8002202:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002204:	2303      	movs	r3, #3
 8002206:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002208:	f107 0310 	add.w	r3, r7, #16
 800220c:	4619      	mov	r1, r3
 800220e:	4825      	ldr	r0, [pc, #148]	; (80022a4 <MX_GPIO_Init+0x168>)
 8002210:	f000 fd4a 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON_LEFT_Pin|BUTTON_RIGHT_Pin;
 8002214:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <MX_GPIO_Init+0x170>)
 800221c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002222:	f107 0310 	add.w	r3, r7, #16
 8002226:	4619      	mov	r1, r3
 8002228:	481e      	ldr	r0, [pc, #120]	; (80022a4 <MX_GPIO_Init+0x168>)
 800222a:	f000 fd3d 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_MIDDLE_Pin;
 800222e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002234:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <MX_GPIO_Init+0x174>)
 8002236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_MIDDLE_GPIO_Port, &GPIO_InitStruct);
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	4619      	mov	r1, r3
 8002242:	4818      	ldr	r0, [pc, #96]	; (80022a4 <MX_GPIO_Init+0x168>)
 8002244:	f000 fd30 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DATA_Pin|L6_Pin;
 8002248:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800224c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224e:	2301      	movs	r3, #1
 8002250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002256:	2303      	movs	r3, #3
 8002258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 0310 	add.w	r3, r7, #16
 800225e:	4619      	mov	r1, r3
 8002260:	480f      	ldr	r0, [pc, #60]	; (80022a0 <MX_GPIO_Init+0x164>)
 8002262:	f000 fd21 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = L5_Pin|L4_Pin|L3_Pin|L2_Pin
 8002266:	23f8      	movs	r3, #248	; 0xf8
 8002268:	613b      	str	r3, [r7, #16]
                          |L1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226a:	2301      	movs	r3, #1
 800226c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002272:	2303      	movs	r3, #3
 8002274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002276:	f107 0310 	add.w	r3, r7, #16
 800227a:	4619      	mov	r1, r3
 800227c:	4809      	ldr	r0, [pc, #36]	; (80022a4 <MX_GPIO_Init+0x168>)
 800227e:	f000 fd13 	bl	8002ca8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2105      	movs	r1, #5
 8002286:	2028      	movs	r0, #40	; 0x28
 8002288:	f000 fcca 	bl	8002c20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800228c:	2028      	movs	r0, #40	; 0x28
 800228e:	f000 fcf3 	bl	8002c78 <HAL_NVIC_EnableIRQ>

}
 8002292:	bf00      	nop
 8002294:	3720      	adds	r7, #32
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010800 	.word	0x40010800
 80022a4:	40010c00 	.word	0x40010c00
 80022a8:	40011000 	.word	0x40011000
 80022ac:	10310000 	.word	0x10310000
 80022b0:	10210000 	.word	0x10210000

080022b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022b8:	f000 fbb6 	bl	8002a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022bc:	f000 f812 	bl	80022e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022c0:	f7ff ff3c 	bl	800213c <MX_GPIO_Init>
  MX_TIM1_Init();
 80022c4:	f000 fa90 	bl	80027e8 <MX_TIM1_Init>
  MX_RTC_Init();
 80022c8:	f000 f8a4 	bl	8002414 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 80022cc:	4804      	ldr	r0, [pc, #16]	; (80022e0 <main+0x2c>)
 80022ce:	f002 feed 	bl	80050ac <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80022d2:	f004 fb19 	bl	8006908 <osKernelInitialize>
  MX_FREERTOS_Init();
 80022d6:	f7ff ff15 	bl	8002104 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80022da:	f004 fb47 	bl	800696c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022de:	e7fe      	b.n	80022de <main+0x2a>
 80022e0:	200009d0 	.word	0x200009d0

080022e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b094      	sub	sp, #80	; 0x50
 80022e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ee:	2228      	movs	r2, #40	; 0x28
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f007 f802 	bl	80092fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002314:	2309      	movs	r3, #9
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800231e:	2300      	movs	r3, #0
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002322:	2301      	movs	r3, #1
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002326:	2301      	movs	r3, #1
 8002328:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800232a:	2302      	movs	r3, #2
 800232c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800232e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002332:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002334:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002338:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800233a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800233e:	4618      	mov	r0, r3
 8002340:	f000 ff9c 	bl	800327c <HAL_RCC_OscConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800234a:	f000 f853 	bl	80023f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800234e:	230f      	movs	r3, #15
 8002350:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002352:	2302      	movs	r3, #2
 8002354:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800235a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800235e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002360:	2300      	movs	r3, #0
 8002362:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	2102      	movs	r1, #2
 800236a:	4618      	mov	r0, r3
 800236c:	f001 faf4 	bl	8003958 <HAL_RCC_ClockConfig>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002376:	f000 f83d 	bl	80023f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800237a:	2301      	movs	r3, #1
 800237c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800237e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002382:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	4618      	mov	r0, r3
 8002388:	f001 fd66 	bl	8003e58 <HAL_RCCEx_PeriphCLKConfig>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002392:	f000 f82f 	bl	80023f4 <Error_Handler>
  }
}
 8002396:	bf00      	nop
 8002398:	3750      	adds	r7, #80	; 0x50
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023b2:	f000 fb4f 	bl	8002a54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM1) {
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d10e      	bne.n	80023de <HAL_TIM_PeriodElapsedCallback+0x3e>
    if(g_bit < 11){
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b0a      	cmp	r3, #10
 80023c6:	dc05      	bgt.n	80023d4 <HAL_TIM_PeriodElapsedCallback+0x34>
    	g_bit++;
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e002      	b.n	80023da <HAL_TIM_PeriodElapsedCallback+0x3a>
    }
    else {
    	g_bit = 0;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
    }
    clockControl();
 80023da:	f7ff fcf1 	bl	8001dc0 <clockControl>
  }

  /* USER CODE END Callback 1 */
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40000800 	.word	0x40000800
 80023ec:	40012c00 	.word	0x40012c00
 80023f0:	20000908 	.word	0x20000908

080023f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023f8:	b672      	cpsid	i
}
 80023fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023fc:	e7fe      	b.n	80023fc <Error_Handler+0x8>

080023fe <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
	...

08002414 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	2100      	movs	r1, #0
 800241e:	460a      	mov	r2, r1
 8002420:	801a      	strh	r2, [r3, #0]
 8002422:	460a      	mov	r2, r1
 8002424:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002426:	2300      	movs	r3, #0
 8002428:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <MX_RTC_Init+0x8c>)
 800242c:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <MX_RTC_Init+0x90>)
 800242e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <MX_RTC_Init+0x8c>)
 8002432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002436:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002438:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <MX_RTC_Init+0x8c>)
 800243a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800243e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002440:	4817      	ldr	r0, [pc, #92]	; (80024a0 <MX_RTC_Init+0x8c>)
 8002442:	f001 fee9 	bl	8004218 <HAL_RTC_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 800244c:	f7ff ffd2 	bl	80023f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002450:	2300      	movs	r3, #0
 8002452:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002454:	2300      	movs	r3, #0
 8002456:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002458:	2300      	movs	r3, #0
 800245a:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2201      	movs	r2, #1
 8002460:	4619      	mov	r1, r3
 8002462:	480f      	ldr	r0, [pc, #60]	; (80024a0 <MX_RTC_Init+0x8c>)
 8002464:	f001 ffa2 	bl	80043ac <HAL_RTC_SetTime>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800246e:	f7ff ffc1 	bl	80023f4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002472:	2301      	movs	r3, #1
 8002474:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002476:	2301      	movs	r3, #1
 8002478:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800247a:	2301      	movs	r3, #1
 800247c:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 800247e:	2300      	movs	r3, #0
 8002480:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002482:	463b      	mov	r3, r7
 8002484:	2201      	movs	r2, #1
 8002486:	4619      	mov	r1, r3
 8002488:	4805      	ldr	r0, [pc, #20]	; (80024a0 <MX_RTC_Init+0x8c>)
 800248a:	f002 f95b 	bl	8004744 <HAL_RTC_SetDate>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002494:	f7ff ffae 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	2000090c 	.word	0x2000090c
 80024a4:	40002800 	.word	0x40002800

080024a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <HAL_RTC_MspInit+0x3c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d110      	bne.n	80024dc <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80024ba:	f000 fed3 	bl	8003264 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_RTC_MspInit+0x40>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <HAL_RTC_MspInit+0x40>)
 80024c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024c8:	61d3      	str	r3, [r2, #28]
 80024ca:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <HAL_RTC_MspInit+0x40>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_RTC_MspInit+0x44>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40002800 	.word	0x40002800
 80024e8:	40021000 	.word	0x40021000
 80024ec:	4242043c 	.word	0x4242043c

080024f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_MspInit+0x68>)
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	4a17      	ldr	r2, [pc, #92]	; (8002558 <HAL_MspInit+0x68>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6193      	str	r3, [r2, #24]
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_MspInit+0x68>)
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	4b12      	ldr	r3, [pc, #72]	; (8002558 <HAL_MspInit+0x68>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4a11      	ldr	r2, [pc, #68]	; (8002558 <HAL_MspInit+0x68>)
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002518:	61d3      	str	r3, [r2, #28]
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <HAL_MspInit+0x68>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	210f      	movs	r1, #15
 800252a:	f06f 0001 	mvn.w	r0, #1
 800252e:	f000 fb77 	bl	8002c20 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_MspInit+0x6c>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	4a04      	ldr	r2, [pc, #16]	; (800255c <HAL_MspInit+0x6c>)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	40010000 	.word	0x40010000

08002560 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08e      	sub	sp, #56	; 0x38
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002576:	4b34      	ldr	r3, [pc, #208]	; (8002648 <HAL_InitTick+0xe8>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4a33      	ldr	r2, [pc, #204]	; (8002648 <HAL_InitTick+0xe8>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	61d3      	str	r3, [r2, #28]
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <HAL_InitTick+0xe8>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800258e:	f107 0210 	add.w	r2, r7, #16
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f001 fbfd 	bl	8003d98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d103      	bne.n	80025b0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025a8:	f001 fbce 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 80025ac:	6378      	str	r0, [r7, #52]	; 0x34
 80025ae:	e004      	b.n	80025ba <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80025b0:	f001 fbca 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 80025b4:	4603      	mov	r3, r0
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025bc:	4a23      	ldr	r2, [pc, #140]	; (800264c <HAL_InitTick+0xec>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9b      	lsrs	r3, r3, #18
 80025c4:	3b01      	subs	r3, #1
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80025c8:	4b21      	ldr	r3, [pc, #132]	; (8002650 <HAL_InitTick+0xf0>)
 80025ca:	4a22      	ldr	r2, [pc, #136]	; (8002654 <HAL_InitTick+0xf4>)
 80025cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80025ce:	4b20      	ldr	r3, [pc, #128]	; (8002650 <HAL_InitTick+0xf0>)
 80025d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025d4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80025d6:	4a1e      	ldr	r2, [pc, #120]	; (8002650 <HAL_InitTick+0xf0>)
 80025d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025da:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80025dc:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <HAL_InitTick+0xf0>)
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e2:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <HAL_InitTick+0xf0>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_InitTick+0xf0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80025ee:	4818      	ldr	r0, [pc, #96]	; (8002650 <HAL_InitTick+0xf0>)
 80025f0:	f002 fcca 	bl	8004f88 <HAL_TIM_Base_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80025fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d11b      	bne.n	800263a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002602:	4813      	ldr	r0, [pc, #76]	; (8002650 <HAL_InitTick+0xf0>)
 8002604:	f002 fd52 	bl	80050ac <HAL_TIM_Base_Start_IT>
 8002608:	4603      	mov	r3, r0
 800260a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800260e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002612:	2b00      	cmp	r3, #0
 8002614:	d111      	bne.n	800263a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002616:	201e      	movs	r0, #30
 8002618:	f000 fb2e 	bl	8002c78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b0f      	cmp	r3, #15
 8002620:	d808      	bhi.n	8002634 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002622:	2200      	movs	r2, #0
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	201e      	movs	r0, #30
 8002628:	f000 fafa 	bl	8002c20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800262c:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <HAL_InitTick+0xf8>)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e002      	b.n	800263a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800263a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800263e:	4618      	mov	r0, r3
 8002640:	3738      	adds	r7, #56	; 0x38
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	431bde83 	.word	0x431bde83
 8002650:	20000920 	.word	0x20000920
 8002654:	40000800 	.word	0x40000800
 8002658:	20000004 	.word	0x20000004

0800265c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002660:	e7fe      	b.n	8002660 <NMI_Handler+0x4>

08002662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002666:	e7fe      	b.n	8002666 <HardFault_Handler+0x4>

08002668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800266c:	e7fe      	b.n	800266c <MemManage_Handler+0x4>

0800266e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002672:	e7fe      	b.n	8002672 <BusFault_Handler+0x4>

08002674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002678:	e7fe      	b.n	8002678 <UsageFault_Handler+0x4>

0800267a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
	...

08002688 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <TIM1_UP_IRQHandler+0x10>)
 800268e:	f002 fe6d 	bl	800536c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200009d0 	.word	0x200009d0

0800269c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <TIM4_IRQHandler+0x10>)
 80026a2:	f002 fe63 	bl	800536c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000920 	.word	0x20000920

080026b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_LEFT_Pin);
 80026b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80026b8:	f000 fdbc 	bl	8003234 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_MIDDLE_Pin);
 80026bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026c0:	f000 fdb8 	bl	8003234 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_RIGHT_Pin);
 80026c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026c8:	f000 fdb4 	bl	8003234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
	return 1;
 80026d4:	2301      	movs	r3, #1
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <_kill>:

int _kill(int pid, int sig)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026e8:	f006 feba 	bl	8009460 <__errno>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2216      	movs	r2, #22
 80026f0:	601a      	str	r2, [r3, #0]
	return -1;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <_exit>:

void _exit (int status)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002706:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff ffe7 	bl	80026de <_kill>
	while (1) {}		/* Make sure we hang here */
 8002710:	e7fe      	b.n	8002710 <_exit+0x12>
	...

08002714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800271c:	4a14      	ldr	r2, [pc, #80]	; (8002770 <_sbrk+0x5c>)
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <_sbrk+0x60>)
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <_sbrk+0x64>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <_sbrk+0x64>)
 8002732:	4a12      	ldr	r2, [pc, #72]	; (800277c <_sbrk+0x68>)
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <_sbrk+0x64>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	429a      	cmp	r2, r3
 8002742:	d207      	bcs.n	8002754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002744:	f006 fe8c 	bl	8009460 <__errno>
 8002748:	4603      	mov	r3, r0
 800274a:	220c      	movs	r2, #12
 800274c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002752:	e009      	b.n	8002768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <_sbrk+0x64>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <_sbrk+0x64>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	4a05      	ldr	r2, [pc, #20]	; (8002778 <_sbrk+0x64>)
 8002764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002766:	68fb      	ldr	r3, [r7, #12]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20005000 	.word	0x20005000
 8002774:	00000200 	.word	0x00000200
 8002778:	200009cc 	.word	0x200009cc
 800277c:	20001748 	.word	0x20001748

08002780 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002784:	4b15      	ldr	r3, [pc, #84]	; (80027dc <SystemInit+0x5c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a14      	ldr	r2, [pc, #80]	; (80027dc <SystemInit+0x5c>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002790:	4b12      	ldr	r3, [pc, #72]	; (80027dc <SystemInit+0x5c>)
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	4911      	ldr	r1, [pc, #68]	; (80027dc <SystemInit+0x5c>)
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <SystemInit+0x60>)
 8002798:	4013      	ands	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <SystemInit+0x5c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <SystemInit+0x5c>)
 80027a2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80027a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027aa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <SystemInit+0x5c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <SystemInit+0x5c>)
 80027b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <SystemInit+0x5c>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a07      	ldr	r2, [pc, #28]	; (80027dc <SystemInit+0x5c>)
 80027be:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80027c2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <SystemInit+0x5c>)
 80027c6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80027ca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <SystemInit+0x64>)
 80027ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027d2:	609a      	str	r2, [r3, #8]
#endif 
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	40021000 	.word	0x40021000
 80027e0:	f8ff0000 	.word	0xf8ff0000
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b096      	sub	sp, #88	; 0x58
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	611a      	str	r2, [r3, #16]
 8002816:	615a      	str	r2, [r3, #20]
 8002818:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	2220      	movs	r2, #32
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f006 fd6b 	bl	80092fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002826:	4b3e      	ldr	r3, [pc, #248]	; (8002920 <MX_TIM1_Init+0x138>)
 8002828:	4a3e      	ldr	r2, [pc, #248]	; (8002924 <MX_TIM1_Init+0x13c>)
 800282a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90-1;
 800282c:	4b3c      	ldr	r3, [pc, #240]	; (8002920 <MX_TIM1_Init+0x138>)
 800282e:	2259      	movs	r2, #89	; 0x59
 8002830:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002832:	4b3b      	ldr	r3, [pc, #236]	; (8002920 <MX_TIM1_Init+0x138>)
 8002834:	2200      	movs	r2, #0
 8002836:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002838:	4b39      	ldr	r3, [pc, #228]	; (8002920 <MX_TIM1_Init+0x138>)
 800283a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800283e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002840:	4b37      	ldr	r3, [pc, #220]	; (8002920 <MX_TIM1_Init+0x138>)
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002846:	4b36      	ldr	r3, [pc, #216]	; (8002920 <MX_TIM1_Init+0x138>)
 8002848:	2200      	movs	r2, #0
 800284a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284c:	4b34      	ldr	r3, [pc, #208]	; (8002920 <MX_TIM1_Init+0x138>)
 800284e:	2200      	movs	r2, #0
 8002850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002852:	4833      	ldr	r0, [pc, #204]	; (8002920 <MX_TIM1_Init+0x138>)
 8002854:	f002 fb98 	bl	8004f88 <HAL_TIM_Base_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800285e:	f7ff fdc9 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002866:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002868:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800286c:	4619      	mov	r1, r3
 800286e:	482c      	ldr	r0, [pc, #176]	; (8002920 <MX_TIM1_Init+0x138>)
 8002870:	f003 f81a 	bl	80058a8 <HAL_TIM_ConfigClockSource>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800287a:	f7ff fdbb 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800287e:	4828      	ldr	r0, [pc, #160]	; (8002920 <MX_TIM1_Init+0x138>)
 8002880:	f002 fc58 	bl	8005134 <HAL_TIM_PWM_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800288a:	f7ff fdb3 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002892:	2300      	movs	r3, #0
 8002894:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002896:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800289a:	4619      	mov	r1, r3
 800289c:	4820      	ldr	r0, [pc, #128]	; (8002920 <MX_TIM1_Init+0x138>)
 800289e:	f003 febb 	bl	8006618 <HAL_TIMEx_MasterConfigSynchronization>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80028a8:	f7ff fda4 	bl	80023f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ac:	2360      	movs	r3, #96	; 0x60
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028b8:	2300      	movs	r3, #0
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028c0:	2300      	movs	r3, #0
 80028c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028c4:	2300      	movs	r3, #0
 80028c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028cc:	2204      	movs	r2, #4
 80028ce:	4619      	mov	r1, r3
 80028d0:	4813      	ldr	r0, [pc, #76]	; (8002920 <MX_TIM1_Init+0x138>)
 80028d2:	f002 fe73 	bl	80055bc <HAL_TIM_PWM_ConfigChannel>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80028dc:	f7ff fd8a 	bl	80023f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028e0:	2300      	movs	r3, #0
 80028e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	4619      	mov	r1, r3
 8002902:	4807      	ldr	r0, [pc, #28]	; (8002920 <MX_TIM1_Init+0x138>)
 8002904:	f003 ff1e 	bl	8006744 <HAL_TIMEx_ConfigBreakDeadTime>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800290e:	f7ff fd71 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002912:	4803      	ldr	r0, [pc, #12]	; (8002920 <MX_TIM1_Init+0x138>)
 8002914:	f000 f82e 	bl	8002974 <HAL_TIM_MspPostInit>

}
 8002918:	bf00      	nop
 800291a:	3758      	adds	r7, #88	; 0x58
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	200009d0 	.word	0x200009d0
 8002924:	40012c00 	.word	0x40012c00

08002928 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a0d      	ldr	r2, [pc, #52]	; (800296c <HAL_TIM_Base_MspInit+0x44>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d113      	bne.n	8002962 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800293a:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <HAL_TIM_Base_MspInit+0x48>)
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	4a0c      	ldr	r2, [pc, #48]	; (8002970 <HAL_TIM_Base_MspInit+0x48>)
 8002940:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002944:	6193      	str	r3, [r2, #24]
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <HAL_TIM_Base_MspInit+0x48>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2105      	movs	r1, #5
 8002956:	2019      	movs	r0, #25
 8002958:	f000 f962 	bl	8002c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800295c:	2019      	movs	r0, #25
 800295e:	f000 f98b 	bl	8002c78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40012c00 	.word	0x40012c00
 8002970:	40021000 	.word	0x40021000

08002974 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 0310 	add.w	r3, r7, #16
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_TIM_MspPostInit+0x5c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d118      	bne.n	80029c6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <HAL_TIM_MspPostInit+0x60>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	4a0e      	ldr	r2, [pc, #56]	; (80029d4 <HAL_TIM_MspPostInit+0x60>)
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	6193      	str	r3, [r2, #24]
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <HAL_TIM_MspPostInit+0x60>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CLOCK_PERIPH_Pin;
 80029ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	2302      	movs	r3, #2
 80029b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CLOCK_PERIPH_GPIO_Port, &GPIO_InitStruct);
 80029ba:	f107 0310 	add.w	r3, r7, #16
 80029be:	4619      	mov	r1, r3
 80029c0:	4805      	ldr	r0, [pc, #20]	; (80029d8 <HAL_TIM_MspPostInit+0x64>)
 80029c2:	f000 f971 	bl	8002ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029c6:	bf00      	nop
 80029c8:	3720      	adds	r7, #32
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40010800 	.word	0x40010800

080029dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80029dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80029de:	e003      	b.n	80029e8 <LoopCopyDataInit>

080029e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80029e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80029e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80029e6:	3104      	adds	r1, #4

080029e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80029e8:	480a      	ldr	r0, [pc, #40]	; (8002a14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80029ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80029ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80029f0:	d3f6      	bcc.n	80029e0 <CopyDataInit>
  ldr r2, =_sbss
 80029f2:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80029f4:	e002      	b.n	80029fc <LoopFillZerobss>

080029f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80029f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80029f8:	f842 3b04 	str.w	r3, [r2], #4

080029fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80029fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a00:	d3f9      	bcc.n	80029f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a02:	f7ff febd 	bl	8002780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a06:	f006 fd31 	bl	800946c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a0a:	f7ff fc53 	bl	80022b4 <main>
  bx lr
 8002a0e:	4770      	bx	lr
  ldr r3, =_sidata
 8002a10:	08009940 	.word	0x08009940
  ldr r0, =_sdata
 8002a14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a18:	20000060 	.word	0x20000060
  ldr r2, =_sbss
 8002a1c:	20000060 	.word	0x20000060
  ldr r3, = _ebss
 8002a20:	20001744 	.word	0x20001744

08002a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a24:	e7fe      	b.n	8002a24 <ADC1_2_IRQHandler>
	...

08002a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_Init+0x28>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <HAL_Init+0x28>)
 8002a32:	f043 0310 	orr.w	r3, r3, #16
 8002a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a38:	2003      	movs	r0, #3
 8002a3a:	f000 f8d1 	bl	8002be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a3e:	200f      	movs	r0, #15
 8002a40:	f7ff fd8e 	bl	8002560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a44:	f7ff fd54 	bl	80024f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40022000 	.word	0x40022000

08002a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_IncTick+0x1c>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_IncTick+0x20>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	4a03      	ldr	r2, [pc, #12]	; (8002a74 <HAL_IncTick+0x20>)
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	20000008 	.word	0x20000008
 8002a74:	20000a7c 	.word	0x20000a7c

08002a78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a7c:	4b02      	ldr	r3, [pc, #8]	; (8002a88 <HAL_GetTick+0x10>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	20000a7c 	.word	0x20000a7c

08002a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002abe:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	60d3      	str	r3, [r2, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad8:	4b04      	ldr	r3, [pc, #16]	; (8002aec <__NVIC_GetPriorityGrouping+0x18>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	0a1b      	lsrs	r3, r3, #8
 8002ade:	f003 0307 	and.w	r3, r3, #7
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	db0b      	blt.n	8002b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4906      	ldr	r1, [pc, #24]	; (8002b24 <__NVIC_EnableIRQ+0x34>)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2001      	movs	r0, #1
 8002b12:	fa00 f202 	lsl.w	r2, r0, r2
 8002b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	e000e100 	.word	0xe000e100

08002b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	db0a      	blt.n	8002b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	490c      	ldr	r1, [pc, #48]	; (8002b74 <__NVIC_SetPriority+0x4c>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b50:	e00a      	b.n	8002b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4908      	ldr	r1, [pc, #32]	; (8002b78 <__NVIC_SetPriority+0x50>)
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	3b04      	subs	r3, #4
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	440b      	add	r3, r1
 8002b66:	761a      	strb	r2, [r3, #24]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000e100 	.word	0xe000e100
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f1c3 0307 	rsb	r3, r3, #7
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	bf28      	it	cs
 8002b9a:	2304      	movcs	r3, #4
 8002b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d902      	bls.n	8002bac <NVIC_EncodePriority+0x30>
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3b03      	subs	r3, #3
 8002baa:	e000      	b.n	8002bae <NVIC_EncodePriority+0x32>
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	43d9      	mvns	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	4313      	orrs	r3, r2
         );
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b07      	cmp	r3, #7
 8002bec:	d00f      	beq.n	8002c0e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b06      	cmp	r3, #6
 8002bf2:	d00c      	beq.n	8002c0e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d009      	beq.n	8002c0e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d006      	beq.n	8002c0e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d003      	beq.n	8002c0e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c06:	2192      	movs	r1, #146	; 0x92
 8002c08:	4804      	ldr	r0, [pc, #16]	; (8002c1c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002c0a:	f7ff fbf8 	bl	80023fe <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ff3c 	bl	8002a8c <__NVIC_SetPriorityGrouping>
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	08009624 	.word	0x08009624

08002c20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b0f      	cmp	r3, #15
 8002c36:	d903      	bls.n	8002c40 <HAL_NVIC_SetPriority+0x20>
 8002c38:	21aa      	movs	r1, #170	; 0xaa
 8002c3a:	480e      	ldr	r0, [pc, #56]	; (8002c74 <HAL_NVIC_SetPriority+0x54>)
 8002c3c:	f7ff fbdf 	bl	80023fe <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b0f      	cmp	r3, #15
 8002c44:	d903      	bls.n	8002c4e <HAL_NVIC_SetPriority+0x2e>
 8002c46:	21ab      	movs	r1, #171	; 0xab
 8002c48:	480a      	ldr	r0, [pc, #40]	; (8002c74 <HAL_NVIC_SetPriority+0x54>)
 8002c4a:	f7ff fbd8 	bl	80023fe <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c4e:	f7ff ff41 	bl	8002ad4 <__NVIC_GetPriorityGrouping>
 8002c52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	68b9      	ldr	r1, [r7, #8]
 8002c58:	6978      	ldr	r0, [r7, #20]
 8002c5a:	f7ff ff8f 	bl	8002b7c <NVIC_EncodePriority>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff ff5e 	bl	8002b28 <__NVIC_SetPriority>
}
 8002c6c:	bf00      	nop
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	08009624 	.word	0x08009624

08002c78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da03      	bge.n	8002c92 <HAL_NVIC_EnableIRQ+0x1a>
 8002c8a:	21be      	movs	r1, #190	; 0xbe
 8002c8c:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <HAL_NVIC_EnableIRQ+0x2c>)
 8002c8e:	f7ff fbb6 	bl	80023fe <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff ff2a 	bl	8002af0 <__NVIC_EnableIRQ>
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	08009624 	.word	0x08009624

08002ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	; 0x28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a96      	ldr	r2, [pc, #600]	; (8002f18 <HAL_GPIO_Init+0x270>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d013      	beq.n	8002cea <HAL_GPIO_Init+0x42>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a95      	ldr	r2, [pc, #596]	; (8002f1c <HAL_GPIO_Init+0x274>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00f      	beq.n	8002cea <HAL_GPIO_Init+0x42>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a94      	ldr	r2, [pc, #592]	; (8002f20 <HAL_GPIO_Init+0x278>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00b      	beq.n	8002cea <HAL_GPIO_Init+0x42>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a93      	ldr	r2, [pc, #588]	; (8002f24 <HAL_GPIO_Init+0x27c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d007      	beq.n	8002cea <HAL_GPIO_Init+0x42>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a92      	ldr	r2, [pc, #584]	; (8002f28 <HAL_GPIO_Init+0x280>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x42>
 8002ce2:	21bd      	movs	r1, #189	; 0xbd
 8002ce4:	4891      	ldr	r0, [pc, #580]	; (8002f2c <HAL_GPIO_Init+0x284>)
 8002ce6:	f7ff fb8a 	bl	80023fe <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_GPIO_Init+0x58>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	041b      	lsls	r3, r3, #16
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x60>
 8002d00:	21be      	movs	r1, #190	; 0xbe
 8002d02:	488a      	ldr	r0, [pc, #552]	; (8002f2c <HAL_GPIO_Init+0x284>)
 8002d04:	f7ff fb7b 	bl	80023fe <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 821c 	beq.w	800314a <HAL_GPIO_Init+0x4a2>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	f000 8217 	beq.w	800314a <HAL_GPIO_Init+0x4a2>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b11      	cmp	r3, #17
 8002d22:	f000 8212 	beq.w	800314a <HAL_GPIO_Init+0x4a2>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	f000 820d 	beq.w	800314a <HAL_GPIO_Init+0x4a2>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b12      	cmp	r3, #18
 8002d36:	f000 8208 	beq.w	800314a <HAL_GPIO_Init+0x4a2>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4a7c      	ldr	r2, [pc, #496]	; (8002f30 <HAL_GPIO_Init+0x288>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	f000 8202 	beq.w	800314a <HAL_GPIO_Init+0x4a2>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4a7a      	ldr	r2, [pc, #488]	; (8002f34 <HAL_GPIO_Init+0x28c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	f000 81fc 	beq.w	800314a <HAL_GPIO_Init+0x4a2>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4a78      	ldr	r2, [pc, #480]	; (8002f38 <HAL_GPIO_Init+0x290>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	f000 81f6 	beq.w	800314a <HAL_GPIO_Init+0x4a2>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4a76      	ldr	r2, [pc, #472]	; (8002f3c <HAL_GPIO_Init+0x294>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	f000 81f0 	beq.w	800314a <HAL_GPIO_Init+0x4a2>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4a74      	ldr	r2, [pc, #464]	; (8002f40 <HAL_GPIO_Init+0x298>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	f000 81ea 	beq.w	800314a <HAL_GPIO_Init+0x4a2>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4a72      	ldr	r2, [pc, #456]	; (8002f44 <HAL_GPIO_Init+0x29c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	f000 81e4 	beq.w	800314a <HAL_GPIO_Init+0x4a2>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	f000 81df 	beq.w	800314a <HAL_GPIO_Init+0x4a2>
 8002d8c:	21bf      	movs	r1, #191	; 0xbf
 8002d8e:	4867      	ldr	r0, [pc, #412]	; (8002f2c <HAL_GPIO_Init+0x284>)
 8002d90:	f7ff fb35 	bl	80023fe <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d94:	e1d9      	b.n	800314a <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d96:	2201      	movs	r2, #1
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69fa      	ldr	r2, [r7, #28]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	f040 81c8 	bne.w	8003144 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a58      	ldr	r2, [pc, #352]	; (8002f18 <HAL_GPIO_Init+0x270>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d013      	beq.n	8002de4 <HAL_GPIO_Init+0x13c>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a57      	ldr	r2, [pc, #348]	; (8002f1c <HAL_GPIO_Init+0x274>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00f      	beq.n	8002de4 <HAL_GPIO_Init+0x13c>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a56      	ldr	r2, [pc, #344]	; (8002f20 <HAL_GPIO_Init+0x278>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00b      	beq.n	8002de4 <HAL_GPIO_Init+0x13c>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a55      	ldr	r2, [pc, #340]	; (8002f24 <HAL_GPIO_Init+0x27c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d007      	beq.n	8002de4 <HAL_GPIO_Init+0x13c>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a54      	ldr	r2, [pc, #336]	; (8002f28 <HAL_GPIO_Init+0x280>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x13c>
 8002ddc:	21cd      	movs	r1, #205	; 0xcd
 8002dde:	4853      	ldr	r0, [pc, #332]	; (8002f2c <HAL_GPIO_Init+0x284>)
 8002de0:	f7ff fb0d 	bl	80023fe <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4a56      	ldr	r2, [pc, #344]	; (8002f44 <HAL_GPIO_Init+0x29c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	f000 80c1 	beq.w	8002f72 <HAL_GPIO_Init+0x2ca>
 8002df0:	4a54      	ldr	r2, [pc, #336]	; (8002f44 <HAL_GPIO_Init+0x29c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	f200 80e7 	bhi.w	8002fc6 <HAL_GPIO_Init+0x31e>
 8002df8:	4a4f      	ldr	r2, [pc, #316]	; (8002f38 <HAL_GPIO_Init+0x290>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	f000 80b9 	beq.w	8002f72 <HAL_GPIO_Init+0x2ca>
 8002e00:	4a4d      	ldr	r2, [pc, #308]	; (8002f38 <HAL_GPIO_Init+0x290>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	f200 80df 	bhi.w	8002fc6 <HAL_GPIO_Init+0x31e>
 8002e08:	4a4d      	ldr	r2, [pc, #308]	; (8002f40 <HAL_GPIO_Init+0x298>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	f000 80b1 	beq.w	8002f72 <HAL_GPIO_Init+0x2ca>
 8002e10:	4a4b      	ldr	r2, [pc, #300]	; (8002f40 <HAL_GPIO_Init+0x298>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	f200 80d7 	bhi.w	8002fc6 <HAL_GPIO_Init+0x31e>
 8002e18:	4a46      	ldr	r2, [pc, #280]	; (8002f34 <HAL_GPIO_Init+0x28c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	f000 80a9 	beq.w	8002f72 <HAL_GPIO_Init+0x2ca>
 8002e20:	4a44      	ldr	r2, [pc, #272]	; (8002f34 <HAL_GPIO_Init+0x28c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	f200 80cf 	bhi.w	8002fc6 <HAL_GPIO_Init+0x31e>
 8002e28:	4a44      	ldr	r2, [pc, #272]	; (8002f3c <HAL_GPIO_Init+0x294>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	f000 80a1 	beq.w	8002f72 <HAL_GPIO_Init+0x2ca>
 8002e30:	4a42      	ldr	r2, [pc, #264]	; (8002f3c <HAL_GPIO_Init+0x294>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	f200 80c7 	bhi.w	8002fc6 <HAL_GPIO_Init+0x31e>
 8002e38:	2b12      	cmp	r3, #18
 8002e3a:	d82b      	bhi.n	8002e94 <HAL_GPIO_Init+0x1ec>
 8002e3c:	2b12      	cmp	r3, #18
 8002e3e:	f200 80c2 	bhi.w	8002fc6 <HAL_GPIO_Init+0x31e>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <HAL_GPIO_Init+0x1a0>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002f73 	.word	0x08002f73
 8002e4c:	08002e9d 	.word	0x08002e9d
 8002e50:	08002eef 	.word	0x08002eef
 8002e54:	08002fc1 	.word	0x08002fc1
 8002e58:	08002fc7 	.word	0x08002fc7
 8002e5c:	08002fc7 	.word	0x08002fc7
 8002e60:	08002fc7 	.word	0x08002fc7
 8002e64:	08002fc7 	.word	0x08002fc7
 8002e68:	08002fc7 	.word	0x08002fc7
 8002e6c:	08002fc7 	.word	0x08002fc7
 8002e70:	08002fc7 	.word	0x08002fc7
 8002e74:	08002fc7 	.word	0x08002fc7
 8002e78:	08002fc7 	.word	0x08002fc7
 8002e7c:	08002fc7 	.word	0x08002fc7
 8002e80:	08002fc7 	.word	0x08002fc7
 8002e84:	08002fc7 	.word	0x08002fc7
 8002e88:	08002fc7 	.word	0x08002fc7
 8002e8c:	08002ec5 	.word	0x08002ec5
 8002e90:	08002f49 	.word	0x08002f49
 8002e94:	4a26      	ldr	r2, [pc, #152]	; (8002f30 <HAL_GPIO_Init+0x288>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d06b      	beq.n	8002f72 <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e9a:	e094      	b.n	8002fc6 <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d00b      	beq.n	8002ebc <HAL_GPIO_Init+0x214>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d007      	beq.n	8002ebc <HAL_GPIO_Init+0x214>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x214>
 8002eb4:	21d5      	movs	r1, #213	; 0xd5
 8002eb6:	481d      	ldr	r0, [pc, #116]	; (8002f2c <HAL_GPIO_Init+0x284>)
 8002eb8:	f7ff faa1 	bl	80023fe <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	623b      	str	r3, [r7, #32]
          break;
 8002ec2:	e081      	b.n	8002fc8 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d00b      	beq.n	8002ee4 <HAL_GPIO_Init+0x23c>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d007      	beq.n	8002ee4 <HAL_GPIO_Init+0x23c>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d003      	beq.n	8002ee4 <HAL_GPIO_Init+0x23c>
 8002edc:	21dc      	movs	r1, #220	; 0xdc
 8002ede:	4813      	ldr	r0, [pc, #76]	; (8002f2c <HAL_GPIO_Init+0x284>)
 8002ee0:	f7ff fa8d 	bl	80023fe <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	623b      	str	r3, [r7, #32]
          break;
 8002eec:	e06c      	b.n	8002fc8 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d00b      	beq.n	8002f0e <HAL_GPIO_Init+0x266>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d007      	beq.n	8002f0e <HAL_GPIO_Init+0x266>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x266>
 8002f06:	21e3      	movs	r1, #227	; 0xe3
 8002f08:	4808      	ldr	r0, [pc, #32]	; (8002f2c <HAL_GPIO_Init+0x284>)
 8002f0a:	f7ff fa78 	bl	80023fe <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	3308      	adds	r3, #8
 8002f14:	623b      	str	r3, [r7, #32]
          break;
 8002f16:	e057      	b.n	8002fc8 <HAL_GPIO_Init+0x320>
 8002f18:	40010800 	.word	0x40010800
 8002f1c:	40010c00 	.word	0x40010c00
 8002f20:	40011000 	.word	0x40011000
 8002f24:	40011400 	.word	0x40011400
 8002f28:	40011800 	.word	0x40011800
 8002f2c:	08009660 	.word	0x08009660
 8002f30:	10110000 	.word	0x10110000
 8002f34:	10210000 	.word	0x10210000
 8002f38:	10310000 	.word	0x10310000
 8002f3c:	10120000 	.word	0x10120000
 8002f40:	10220000 	.word	0x10220000
 8002f44:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d00b      	beq.n	8002f68 <HAL_GPIO_Init+0x2c0>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d007      	beq.n	8002f68 <HAL_GPIO_Init+0x2c0>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x2c0>
 8002f60:	21ea      	movs	r1, #234	; 0xea
 8002f62:	4880      	ldr	r0, [pc, #512]	; (8003164 <HAL_GPIO_Init+0x4bc>)
 8002f64:	f7ff fa4b 	bl	80023fe <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	330c      	adds	r3, #12
 8002f6e:	623b      	str	r3, [r7, #32]
          break;
 8002f70:	e02a      	b.n	8002fc8 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_GPIO_Init+0x2ea>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d007      	beq.n	8002f92 <HAL_GPIO_Init+0x2ea>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x2ea>
 8002f8a:	21f7      	movs	r1, #247	; 0xf7
 8002f8c:	4875      	ldr	r0, [pc, #468]	; (8003164 <HAL_GPIO_Init+0x4bc>)
 8002f8e:	f7ff fa36 	bl	80023fe <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	623b      	str	r3, [r7, #32]
          break;
 8002f9e:	e013      	b.n	8002fc8 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d105      	bne.n	8002fb4 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fa8:	2308      	movs	r3, #8
 8002faa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	611a      	str	r2, [r3, #16]
          break;
 8002fb2:	e009      	b.n	8002fc8 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	615a      	str	r2, [r3, #20]
          break;
 8002fbe:	e003      	b.n	8002fc8 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	623b      	str	r3, [r7, #32]
          break;
 8002fc4:	e000      	b.n	8002fc8 <HAL_GPIO_Init+0x320>
          break;
 8002fc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2bff      	cmp	r3, #255	; 0xff
 8002fcc:	d801      	bhi.n	8002fd2 <HAL_GPIO_Init+0x32a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	e001      	b.n	8002fd6 <HAL_GPIO_Init+0x32e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2bff      	cmp	r3, #255	; 0xff
 8002fdc:	d802      	bhi.n	8002fe4 <HAL_GPIO_Init+0x33c>
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	e002      	b.n	8002fea <HAL_GPIO_Init+0x342>
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	3b08      	subs	r3, #8
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	210f      	movs	r1, #15
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	6a39      	ldr	r1, [r7, #32]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	fa01 f303 	lsl.w	r3, r1, r3
 8003004:	431a      	orrs	r2, r3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8096 	beq.w	8003144 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003018:	4b53      	ldr	r3, [pc, #332]	; (8003168 <HAL_GPIO_Init+0x4c0>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	4a52      	ldr	r2, [pc, #328]	; (8003168 <HAL_GPIO_Init+0x4c0>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6193      	str	r3, [r2, #24]
 8003024:	4b50      	ldr	r3, [pc, #320]	; (8003168 <HAL_GPIO_Init+0x4c0>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003030:	4a4e      	ldr	r2, [pc, #312]	; (800316c <HAL_GPIO_Init+0x4c4>)
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	089b      	lsrs	r3, r3, #2
 8003036:	3302      	adds	r3, #2
 8003038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	220f      	movs	r2, #15
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a46      	ldr	r2, [pc, #280]	; (8003170 <HAL_GPIO_Init+0x4c8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d013      	beq.n	8003084 <HAL_GPIO_Init+0x3dc>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a45      	ldr	r2, [pc, #276]	; (8003174 <HAL_GPIO_Init+0x4cc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00d      	beq.n	8003080 <HAL_GPIO_Init+0x3d8>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a44      	ldr	r2, [pc, #272]	; (8003178 <HAL_GPIO_Init+0x4d0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d007      	beq.n	800307c <HAL_GPIO_Init+0x3d4>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a43      	ldr	r2, [pc, #268]	; (800317c <HAL_GPIO_Init+0x4d4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d101      	bne.n	8003078 <HAL_GPIO_Init+0x3d0>
 8003074:	2303      	movs	r3, #3
 8003076:	e006      	b.n	8003086 <HAL_GPIO_Init+0x3de>
 8003078:	2304      	movs	r3, #4
 800307a:	e004      	b.n	8003086 <HAL_GPIO_Init+0x3de>
 800307c:	2302      	movs	r3, #2
 800307e:	e002      	b.n	8003086 <HAL_GPIO_Init+0x3de>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <HAL_GPIO_Init+0x3de>
 8003084:	2300      	movs	r3, #0
 8003086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003088:	f002 0203 	and.w	r2, r2, #3
 800308c:	0092      	lsls	r2, r2, #2
 800308e:	4093      	lsls	r3, r2
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003096:	4935      	ldr	r1, [pc, #212]	; (800316c <HAL_GPIO_Init+0x4c4>)
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	3302      	adds	r3, #2
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d006      	beq.n	80030be <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030b0:	4b33      	ldr	r3, [pc, #204]	; (8003180 <HAL_GPIO_Init+0x4d8>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4932      	ldr	r1, [pc, #200]	; (8003180 <HAL_GPIO_Init+0x4d8>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]
 80030bc:	e006      	b.n	80030cc <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030be:	4b30      	ldr	r3, [pc, #192]	; (8003180 <HAL_GPIO_Init+0x4d8>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	492e      	ldr	r1, [pc, #184]	; (8003180 <HAL_GPIO_Init+0x4d8>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030d8:	4b29      	ldr	r3, [pc, #164]	; (8003180 <HAL_GPIO_Init+0x4d8>)
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	4928      	ldr	r1, [pc, #160]	; (8003180 <HAL_GPIO_Init+0x4d8>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
 80030e4:	e006      	b.n	80030f4 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030e6:	4b26      	ldr	r3, [pc, #152]	; (8003180 <HAL_GPIO_Init+0x4d8>)
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	4924      	ldr	r1, [pc, #144]	; (8003180 <HAL_GPIO_Init+0x4d8>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d006      	beq.n	800310e <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003100:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <HAL_GPIO_Init+0x4d8>)
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	491e      	ldr	r1, [pc, #120]	; (8003180 <HAL_GPIO_Init+0x4d8>)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	608b      	str	r3, [r1, #8]
 800310c:	e006      	b.n	800311c <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800310e:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <HAL_GPIO_Init+0x4d8>)
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	43db      	mvns	r3, r3
 8003116:	491a      	ldr	r1, [pc, #104]	; (8003180 <HAL_GPIO_Init+0x4d8>)
 8003118:	4013      	ands	r3, r2
 800311a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d006      	beq.n	8003136 <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003128:	4b15      	ldr	r3, [pc, #84]	; (8003180 <HAL_GPIO_Init+0x4d8>)
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	4914      	ldr	r1, [pc, #80]	; (8003180 <HAL_GPIO_Init+0x4d8>)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	60cb      	str	r3, [r1, #12]
 8003134:	e006      	b.n	8003144 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_GPIO_Init+0x4d8>)
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	43db      	mvns	r3, r3
 800313e:	4910      	ldr	r1, [pc, #64]	; (8003180 <HAL_GPIO_Init+0x4d8>)
 8003140:	4013      	ands	r3, r2
 8003142:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	3301      	adds	r3, #1
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	f47f ae1e 	bne.w	8002d96 <HAL_GPIO_Init+0xee>
  }
}
 800315a:	bf00      	nop
 800315c:	bf00      	nop
 800315e:	3728      	adds	r7, #40	; 0x28
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	08009660 	.word	0x08009660
 8003168:	40021000 	.word	0x40021000
 800316c:	40010000 	.word	0x40010000
 8003170:	40010800 	.word	0x40010800
 8003174:	40010c00 	.word	0x40010c00
 8003178:	40011000 	.word	0x40011000
 800317c:	40011400 	.word	0x40011400
 8003180:	40010400 	.word	0x40010400

08003184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003190:	887b      	ldrh	r3, [r7, #2]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d004      	beq.n	80031a0 <HAL_GPIO_ReadPin+0x1c>
 8003196:	887b      	ldrh	r3, [r7, #2]
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	041b      	lsls	r3, r3, #16
 800319c:	2b00      	cmp	r3, #0
 800319e:	d004      	beq.n	80031aa <HAL_GPIO_ReadPin+0x26>
 80031a0:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80031a4:	4809      	ldr	r0, [pc, #36]	; (80031cc <HAL_GPIO_ReadPin+0x48>)
 80031a6:	f7ff f92a 	bl	80023fe <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	887b      	ldrh	r3, [r7, #2]
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
 80031ba:	e001      	b.n	80031c0 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031bc:	2300      	movs	r3, #0
 80031be:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	08009660 	.word	0x08009660

080031d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	807b      	strh	r3, [r7, #2]
 80031dc:	4613      	mov	r3, r2
 80031de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80031e0:	887b      	ldrh	r3, [r7, #2]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_GPIO_WritePin+0x20>
 80031e6:	887b      	ldrh	r3, [r7, #2]
 80031e8:	0c1b      	lsrs	r3, r3, #16
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d004      	beq.n	80031fa <HAL_GPIO_WritePin+0x2a>
 80031f0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80031f4:	480e      	ldr	r0, [pc, #56]	; (8003230 <HAL_GPIO_WritePin+0x60>)
 80031f6:	f7ff f902 	bl	80023fe <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80031fa:	787b      	ldrb	r3, [r7, #1]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d007      	beq.n	8003210 <HAL_GPIO_WritePin+0x40>
 8003200:	787b      	ldrb	r3, [r7, #1]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d004      	beq.n	8003210 <HAL_GPIO_WritePin+0x40>
 8003206:	f240 11d5 	movw	r1, #469	; 0x1d5
 800320a:	4809      	ldr	r0, [pc, #36]	; (8003230 <HAL_GPIO_WritePin+0x60>)
 800320c:	f7ff f8f7 	bl	80023fe <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003210:	787b      	ldrb	r3, [r7, #1]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800321c:	e003      	b.n	8003226 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800321e:	887b      	ldrh	r3, [r7, #2]
 8003220:	041a      	lsls	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	08009660 	.word	0x08009660

08003234 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800323e:	4b08      	ldr	r3, [pc, #32]	; (8003260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d006      	beq.n	8003258 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800324a:	4a05      	ldr	r2, [pc, #20]	; (8003260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fd fd94 	bl	8000d80 <HAL_GPIO_EXTI_Callback>
  }
}
 8003258:	bf00      	nop
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40010400 	.word	0x40010400

08003264 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <HAL_PWR_EnableBkUpAccess+0x14>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]
}
 800326e:	bf00      	nop
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	420e0020 	.word	0x420e0020

0800327c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e35a      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01c      	beq.n	80032d0 <HAL_RCC_OscConfig+0x54>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d116      	bne.n	80032d0 <HAL_RCC_OscConfig+0x54>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d110      	bne.n	80032d0 <HAL_RCC_OscConfig+0x54>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <HAL_RCC_OscConfig+0x54>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d104      	bne.n	80032d0 <HAL_RCC_OscConfig+0x54>
 80032c6:	f240 1167 	movw	r1, #359	; 0x167
 80032ca:	488f      	ldr	r0, [pc, #572]	; (8003508 <HAL_RCC_OscConfig+0x28c>)
 80032cc:	f7ff f897 	bl	80023fe <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 809a 	beq.w	8003412 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00e      	beq.n	8003304 <HAL_RCC_OscConfig+0x88>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ee:	d009      	beq.n	8003304 <HAL_RCC_OscConfig+0x88>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032f8:	d004      	beq.n	8003304 <HAL_RCC_OscConfig+0x88>
 80032fa:	f240 116d 	movw	r1, #365	; 0x16d
 80032fe:	4882      	ldr	r0, [pc, #520]	; (8003508 <HAL_RCC_OscConfig+0x28c>)
 8003300:	f7ff f87d 	bl	80023fe <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003304:	4b81      	ldr	r3, [pc, #516]	; (800350c <HAL_RCC_OscConfig+0x290>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b04      	cmp	r3, #4
 800330e:	d00c      	beq.n	800332a <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003310:	4b7e      	ldr	r3, [pc, #504]	; (800350c <HAL_RCC_OscConfig+0x290>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b08      	cmp	r3, #8
 800331a:	d112      	bne.n	8003342 <HAL_RCC_OscConfig+0xc6>
 800331c:	4b7b      	ldr	r3, [pc, #492]	; (800350c <HAL_RCC_OscConfig+0x290>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003328:	d10b      	bne.n	8003342 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332a:	4b78      	ldr	r3, [pc, #480]	; (800350c <HAL_RCC_OscConfig+0x290>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d06c      	beq.n	8003410 <HAL_RCC_OscConfig+0x194>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d168      	bne.n	8003410 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e300      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334a:	d106      	bne.n	800335a <HAL_RCC_OscConfig+0xde>
 800334c:	4b6f      	ldr	r3, [pc, #444]	; (800350c <HAL_RCC_OscConfig+0x290>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a6e      	ldr	r2, [pc, #440]	; (800350c <HAL_RCC_OscConfig+0x290>)
 8003352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	e02e      	b.n	80033b8 <HAL_RCC_OscConfig+0x13c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x100>
 8003362:	4b6a      	ldr	r3, [pc, #424]	; (800350c <HAL_RCC_OscConfig+0x290>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a69      	ldr	r2, [pc, #420]	; (800350c <HAL_RCC_OscConfig+0x290>)
 8003368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b67      	ldr	r3, [pc, #412]	; (800350c <HAL_RCC_OscConfig+0x290>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a66      	ldr	r2, [pc, #408]	; (800350c <HAL_RCC_OscConfig+0x290>)
 8003374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0x13c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x124>
 8003386:	4b61      	ldr	r3, [pc, #388]	; (800350c <HAL_RCC_OscConfig+0x290>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a60      	ldr	r2, [pc, #384]	; (800350c <HAL_RCC_OscConfig+0x290>)
 800338c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b5e      	ldr	r3, [pc, #376]	; (800350c <HAL_RCC_OscConfig+0x290>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a5d      	ldr	r2, [pc, #372]	; (800350c <HAL_RCC_OscConfig+0x290>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0x13c>
 80033a0:	4b5a      	ldr	r3, [pc, #360]	; (800350c <HAL_RCC_OscConfig+0x290>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a59      	ldr	r2, [pc, #356]	; (800350c <HAL_RCC_OscConfig+0x290>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b57      	ldr	r3, [pc, #348]	; (800350c <HAL_RCC_OscConfig+0x290>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a56      	ldr	r2, [pc, #344]	; (800350c <HAL_RCC_OscConfig+0x290>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7ff fb5a 	bl	8002a78 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c8:	f7ff fb56 	bl	8002a78 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e2b4      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b4c      	ldr	r3, [pc, #304]	; (800350c <HAL_RCC_OscConfig+0x290>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x14c>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7ff fb46 	bl	8002a78 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f0:	f7ff fb42 	bl	8002a78 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e2a0      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	4b42      	ldr	r3, [pc, #264]	; (800350c <HAL_RCC_OscConfig+0x290>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x174>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8080 	beq.w	8003520 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCC_OscConfig+0x1be>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d004      	beq.n	800343a <HAL_RCC_OscConfig+0x1be>
 8003430:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003434:	4834      	ldr	r0, [pc, #208]	; (8003508 <HAL_RCC_OscConfig+0x28c>)
 8003436:	f7fe ffe2 	bl	80023fe <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	2b1f      	cmp	r3, #31
 8003440:	d904      	bls.n	800344c <HAL_RCC_OscConfig+0x1d0>
 8003442:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003446:	4830      	ldr	r0, [pc, #192]	; (8003508 <HAL_RCC_OscConfig+0x28c>)
 8003448:	f7fe ffd9 	bl	80023fe <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800344c:	4b2f      	ldr	r3, [pc, #188]	; (800350c <HAL_RCC_OscConfig+0x290>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00b      	beq.n	8003470 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003458:	4b2c      	ldr	r3, [pc, #176]	; (800350c <HAL_RCC_OscConfig+0x290>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b08      	cmp	r3, #8
 8003462:	d11c      	bne.n	800349e <HAL_RCC_OscConfig+0x222>
 8003464:	4b29      	ldr	r3, [pc, #164]	; (800350c <HAL_RCC_OscConfig+0x290>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d116      	bne.n	800349e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003470:	4b26      	ldr	r3, [pc, #152]	; (800350c <HAL_RCC_OscConfig+0x290>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_OscConfig+0x20c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d001      	beq.n	8003488 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e25d      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003488:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_RCC_OscConfig+0x290>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	491d      	ldr	r1, [pc, #116]	; (800350c <HAL_RCC_OscConfig+0x290>)
 8003498:	4313      	orrs	r3, r2
 800349a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349c:	e040      	b.n	8003520 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d020      	beq.n	80034e8 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a6:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <HAL_RCC_OscConfig+0x294>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7ff fae4 	bl	8002a78 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b4:	f7ff fae0 	bl	8002a78 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e23e      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_RCC_OscConfig+0x290>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <HAL_RCC_OscConfig+0x290>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	490a      	ldr	r1, [pc, #40]	; (800350c <HAL_RCC_OscConfig+0x290>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
 80034e6:	e01b      	b.n	8003520 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCC_OscConfig+0x294>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7ff fac3 	bl	8002a78 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f4:	e00e      	b.n	8003514 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f6:	f7ff fabf 	bl	8002a78 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d907      	bls.n	8003514 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e21d      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
 8003508:	0800969c 	.word	0x0800969c
 800350c:	40021000 	.word	0x40021000
 8003510:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003514:	4b7d      	ldr	r3, [pc, #500]	; (800370c <HAL_RCC_OscConfig+0x490>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1ea      	bne.n	80034f6 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d040      	beq.n	80035ae <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_RCC_OscConfig+0x2ca>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d004      	beq.n	8003546 <HAL_RCC_OscConfig+0x2ca>
 800353c:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003540:	4873      	ldr	r0, [pc, #460]	; (8003710 <HAL_RCC_OscConfig+0x494>)
 8003542:	f7fe ff5c 	bl	80023fe <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d019      	beq.n	8003582 <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800354e:	4b71      	ldr	r3, [pc, #452]	; (8003714 <HAL_RCC_OscConfig+0x498>)
 8003550:	2201      	movs	r2, #1
 8003552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003554:	f7ff fa90 	bl	8002a78 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355c:	f7ff fa8c 	bl	8002a78 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e1ea      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356e:	4b67      	ldr	r3, [pc, #412]	; (800370c <HAL_RCC_OscConfig+0x490>)
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800357a:	2001      	movs	r0, #1
 800357c:	f000 fc4e 	bl	8003e1c <RCC_Delay>
 8003580:	e015      	b.n	80035ae <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003582:	4b64      	ldr	r3, [pc, #400]	; (8003714 <HAL_RCC_OscConfig+0x498>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003588:	f7ff fa76 	bl	8002a78 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003590:	f7ff fa72 	bl	8002a78 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e1d0      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a2:	4b5a      	ldr	r3, [pc, #360]	; (800370c <HAL_RCC_OscConfig+0x490>)
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80bf 	beq.w	800373a <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035bc:	2300      	movs	r3, #0
 80035be:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00c      	beq.n	80035e2 <HAL_RCC_OscConfig+0x366>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d008      	beq.n	80035e2 <HAL_RCC_OscConfig+0x366>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b05      	cmp	r3, #5
 80035d6:	d004      	beq.n	80035e2 <HAL_RCC_OscConfig+0x366>
 80035d8:	f240 2111 	movw	r1, #529	; 0x211
 80035dc:	484c      	ldr	r0, [pc, #304]	; (8003710 <HAL_RCC_OscConfig+0x494>)
 80035de:	f7fe ff0e 	bl	80023fe <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e2:	4b4a      	ldr	r3, [pc, #296]	; (800370c <HAL_RCC_OscConfig+0x490>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10d      	bne.n	800360a <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	4b47      	ldr	r3, [pc, #284]	; (800370c <HAL_RCC_OscConfig+0x490>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	4a46      	ldr	r2, [pc, #280]	; (800370c <HAL_RCC_OscConfig+0x490>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f8:	61d3      	str	r3, [r2, #28]
 80035fa:	4b44      	ldr	r3, [pc, #272]	; (800370c <HAL_RCC_OscConfig+0x490>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003606:	2301      	movs	r3, #1
 8003608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360a:	4b43      	ldr	r3, [pc, #268]	; (8003718 <HAL_RCC_OscConfig+0x49c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d118      	bne.n	8003648 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003616:	4b40      	ldr	r3, [pc, #256]	; (8003718 <HAL_RCC_OscConfig+0x49c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a3f      	ldr	r2, [pc, #252]	; (8003718 <HAL_RCC_OscConfig+0x49c>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003622:	f7ff fa29 	bl	8002a78 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362a:	f7ff fa25 	bl	8002a78 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b64      	cmp	r3, #100	; 0x64
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e183      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	4b36      	ldr	r3, [pc, #216]	; (8003718 <HAL_RCC_OscConfig+0x49c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x3e2>
 8003650:	4b2e      	ldr	r3, [pc, #184]	; (800370c <HAL_RCC_OscConfig+0x490>)
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	4a2d      	ldr	r2, [pc, #180]	; (800370c <HAL_RCC_OscConfig+0x490>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6213      	str	r3, [r2, #32]
 800365c:	e02d      	b.n	80036ba <HAL_RCC_OscConfig+0x43e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x404>
 8003666:	4b29      	ldr	r3, [pc, #164]	; (800370c <HAL_RCC_OscConfig+0x490>)
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4a28      	ldr	r2, [pc, #160]	; (800370c <HAL_RCC_OscConfig+0x490>)
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	6213      	str	r3, [r2, #32]
 8003672:	4b26      	ldr	r3, [pc, #152]	; (800370c <HAL_RCC_OscConfig+0x490>)
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4a25      	ldr	r2, [pc, #148]	; (800370c <HAL_RCC_OscConfig+0x490>)
 8003678:	f023 0304 	bic.w	r3, r3, #4
 800367c:	6213      	str	r3, [r2, #32]
 800367e:	e01c      	b.n	80036ba <HAL_RCC_OscConfig+0x43e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	2b05      	cmp	r3, #5
 8003686:	d10c      	bne.n	80036a2 <HAL_RCC_OscConfig+0x426>
 8003688:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_RCC_OscConfig+0x490>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	4a1f      	ldr	r2, [pc, #124]	; (800370c <HAL_RCC_OscConfig+0x490>)
 800368e:	f043 0304 	orr.w	r3, r3, #4
 8003692:	6213      	str	r3, [r2, #32]
 8003694:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_RCC_OscConfig+0x490>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	4a1c      	ldr	r2, [pc, #112]	; (800370c <HAL_RCC_OscConfig+0x490>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	6213      	str	r3, [r2, #32]
 80036a0:	e00b      	b.n	80036ba <HAL_RCC_OscConfig+0x43e>
 80036a2:	4b1a      	ldr	r3, [pc, #104]	; (800370c <HAL_RCC_OscConfig+0x490>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	4a19      	ldr	r2, [pc, #100]	; (800370c <HAL_RCC_OscConfig+0x490>)
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	6213      	str	r3, [r2, #32]
 80036ae:	4b17      	ldr	r3, [pc, #92]	; (800370c <HAL_RCC_OscConfig+0x490>)
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	4a16      	ldr	r2, [pc, #88]	; (800370c <HAL_RCC_OscConfig+0x490>)
 80036b4:	f023 0304 	bic.w	r3, r3, #4
 80036b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d015      	beq.n	80036ee <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c2:	f7ff f9d9 	bl	8002a78 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7ff f9d5 	bl	8002a78 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e131      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <HAL_RCC_OscConfig+0x490>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0ee      	beq.n	80036ca <HAL_RCC_OscConfig+0x44e>
 80036ec:	e01c      	b.n	8003728 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ee:	f7ff f9c3 	bl	8002a78 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f4:	e012      	b.n	800371c <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7ff f9bf 	bl	8002a78 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	; 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d909      	bls.n	800371c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e11b      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
 800370c:	40021000 	.word	0x40021000
 8003710:	0800969c 	.word	0x0800969c
 8003714:	42420480 	.word	0x42420480
 8003718:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371c:	4b8b      	ldr	r3, [pc, #556]	; (800394c <HAL_RCC_OscConfig+0x6d0>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e6      	bne.n	80036f6 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d105      	bne.n	800373a <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372e:	4b87      	ldr	r3, [pc, #540]	; (800394c <HAL_RCC_OscConfig+0x6d0>)
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	4a86      	ldr	r2, [pc, #536]	; (800394c <HAL_RCC_OscConfig+0x6d0>)
 8003734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003738:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00c      	beq.n	800375c <HAL_RCC_OscConfig+0x4e0>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d008      	beq.n	800375c <HAL_RCC_OscConfig+0x4e0>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d004      	beq.n	800375c <HAL_RCC_OscConfig+0x4e0>
 8003752:	f240 21af 	movw	r1, #687	; 0x2af
 8003756:	487e      	ldr	r0, [pc, #504]	; (8003950 <HAL_RCC_OscConfig+0x6d4>)
 8003758:	f7fe fe51 	bl	80023fe <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80ee 	beq.w	8003942 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003766:	4b79      	ldr	r3, [pc, #484]	; (800394c <HAL_RCC_OscConfig+0x6d0>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b08      	cmp	r3, #8
 8003770:	f000 80ce 	beq.w	8003910 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	2b02      	cmp	r3, #2
 800377a:	f040 80b2 	bne.w	80038e2 <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <HAL_RCC_OscConfig+0x51e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378e:	d004      	beq.n	800379a <HAL_RCC_OscConfig+0x51e>
 8003790:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003794:	486e      	ldr	r0, [pc, #440]	; (8003950 <HAL_RCC_OscConfig+0x6d4>)
 8003796:	f7fe fe32 	bl	80023fe <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d04a      	beq.n	8003838 <HAL_RCC_OscConfig+0x5bc>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037aa:	d045      	beq.n	8003838 <HAL_RCC_OscConfig+0x5bc>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037b4:	d040      	beq.n	8003838 <HAL_RCC_OscConfig+0x5bc>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80037be:	d03b      	beq.n	8003838 <HAL_RCC_OscConfig+0x5bc>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037c8:	d036      	beq.n	8003838 <HAL_RCC_OscConfig+0x5bc>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80037d2:	d031      	beq.n	8003838 <HAL_RCC_OscConfig+0x5bc>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80037dc:	d02c      	beq.n	8003838 <HAL_RCC_OscConfig+0x5bc>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80037e6:	d027      	beq.n	8003838 <HAL_RCC_OscConfig+0x5bc>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037f0:	d022      	beq.n	8003838 <HAL_RCC_OscConfig+0x5bc>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80037fa:	d01d      	beq.n	8003838 <HAL_RCC_OscConfig+0x5bc>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003804:	d018      	beq.n	8003838 <HAL_RCC_OscConfig+0x5bc>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800380e:	d013      	beq.n	8003838 <HAL_RCC_OscConfig+0x5bc>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003818:	d00e      	beq.n	8003838 <HAL_RCC_OscConfig+0x5bc>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003822:	d009      	beq.n	8003838 <HAL_RCC_OscConfig+0x5bc>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800382c:	d004      	beq.n	8003838 <HAL_RCC_OscConfig+0x5bc>
 800382e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003832:	4847      	ldr	r0, [pc, #284]	; (8003950 <HAL_RCC_OscConfig+0x6d4>)
 8003834:	f7fe fde3 	bl	80023fe <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003838:	4b46      	ldr	r3, [pc, #280]	; (8003954 <HAL_RCC_OscConfig+0x6d8>)
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383e:	f7ff f91b 	bl	8002a78 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003846:	f7ff f917 	bl	8002a78 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e075      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003858:	4b3c      	ldr	r3, [pc, #240]	; (800394c <HAL_RCC_OscConfig+0x6d0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f0      	bne.n	8003846 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386c:	d116      	bne.n	800389c <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_RCC_OscConfig+0x60e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800387e:	d004      	beq.n	800388a <HAL_RCC_OscConfig+0x60e>
 8003880:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003884:	4832      	ldr	r0, [pc, #200]	; (8003950 <HAL_RCC_OscConfig+0x6d4>)
 8003886:	f7fe fdba 	bl	80023fe <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800388a:	4b30      	ldr	r3, [pc, #192]	; (800394c <HAL_RCC_OscConfig+0x6d0>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	492d      	ldr	r1, [pc, #180]	; (800394c <HAL_RCC_OscConfig+0x6d0>)
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800389c:	4b2b      	ldr	r3, [pc, #172]	; (800394c <HAL_RCC_OscConfig+0x6d0>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a19      	ldr	r1, [r3, #32]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	430b      	orrs	r3, r1
 80038ae:	4927      	ldr	r1, [pc, #156]	; (800394c <HAL_RCC_OscConfig+0x6d0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b4:	4b27      	ldr	r3, [pc, #156]	; (8003954 <HAL_RCC_OscConfig+0x6d8>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ba:	f7ff f8dd 	bl	8002a78 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c2:	f7ff f8d9 	bl	8002a78 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e037      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038d4:	4b1d      	ldr	r3, [pc, #116]	; (800394c <HAL_RCC_OscConfig+0x6d0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0x646>
 80038e0:	e02f      	b.n	8003942 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e2:	4b1c      	ldr	r3, [pc, #112]	; (8003954 <HAL_RCC_OscConfig+0x6d8>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7ff f8c6 	bl	8002a78 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f0:	f7ff f8c2 	bl	8002a78 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e020      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_RCC_OscConfig+0x6d0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x674>
 800390e:	e018      	b.n	8003942 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e013      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_OscConfig+0x6d0>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	429a      	cmp	r2, r3
 800392e:	d106      	bne.n	800393e <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d001      	beq.n	8003942 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40021000 	.word	0x40021000
 8003950:	0800969c 	.word	0x0800969c
 8003954:	42420060 	.word	0x42420060

08003958 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e176      	b.n	8003c5a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d116      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x4e>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d110      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x4e>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10a      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x4e>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d104      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x4e>
 800399c:	f44f 714e 	mov.w	r1, #824	; 0x338
 80039a0:	4874      	ldr	r0, [pc, #464]	; (8003b74 <HAL_RCC_ClockConfig+0x21c>)
 80039a2:	f7fe fd2c 	bl	80023fe <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x6a>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d007      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x6a>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d004      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x6a>
 80039b8:	f240 3139 	movw	r1, #825	; 0x339
 80039bc:	486d      	ldr	r0, [pc, #436]	; (8003b74 <HAL_RCC_ClockConfig+0x21c>)
 80039be:	f7fe fd1e 	bl	80023fe <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c2:	4b6d      	ldr	r3, [pc, #436]	; (8003b78 <HAL_RCC_ClockConfig+0x220>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d910      	bls.n	80039f2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d0:	4b69      	ldr	r3, [pc, #420]	; (8003b78 <HAL_RCC_ClockConfig+0x220>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 0207 	bic.w	r2, r3, #7
 80039d8:	4967      	ldr	r1, [pc, #412]	; (8003b78 <HAL_RCC_ClockConfig+0x220>)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e0:	4b65      	ldr	r3, [pc, #404]	; (8003b78 <HAL_RCC_ClockConfig+0x220>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d001      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e133      	b.n	8003c5a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d049      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a0a:	4b5c      	ldr	r3, [pc, #368]	; (8003b7c <HAL_RCC_ClockConfig+0x224>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4a5b      	ldr	r2, [pc, #364]	; (8003b7c <HAL_RCC_ClockConfig+0x224>)
 8003a10:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a14:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a22:	4b56      	ldr	r3, [pc, #344]	; (8003b7c <HAL_RCC_ClockConfig+0x224>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4a55      	ldr	r2, [pc, #340]	; (8003b7c <HAL_RCC_ClockConfig+0x224>)
 8003a28:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a2c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d024      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x128>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b80      	cmp	r3, #128	; 0x80
 8003a3c:	d020      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x128>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b90      	cmp	r3, #144	; 0x90
 8003a44:	d01c      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x128>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2ba0      	cmp	r3, #160	; 0xa0
 8003a4c:	d018      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x128>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2bb0      	cmp	r3, #176	; 0xb0
 8003a54:	d014      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x128>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a5c:	d010      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x128>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2bd0      	cmp	r3, #208	; 0xd0
 8003a64:	d00c      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x128>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2be0      	cmp	r3, #224	; 0xe0
 8003a6c:	d008      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x128>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2bf0      	cmp	r3, #240	; 0xf0
 8003a74:	d004      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x128>
 8003a76:	f240 315f 	movw	r1, #863	; 0x35f
 8003a7a:	483e      	ldr	r0, [pc, #248]	; (8003b74 <HAL_RCC_ClockConfig+0x21c>)
 8003a7c:	f7fe fcbf 	bl	80023fe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a80:	4b3e      	ldr	r3, [pc, #248]	; (8003b7c <HAL_RCC_ClockConfig+0x224>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	493b      	ldr	r1, [pc, #236]	; (8003b7c <HAL_RCC_ClockConfig+0x224>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d051      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00c      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x168>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d008      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x168>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d004      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x168>
 8003ab6:	f240 3166 	movw	r1, #870	; 0x366
 8003aba:	482e      	ldr	r0, [pc, #184]	; (8003b74 <HAL_RCC_ClockConfig+0x21c>)
 8003abc:	f7fe fc9f 	bl	80023fe <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d107      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac8:	4b2c      	ldr	r3, [pc, #176]	; (8003b7c <HAL_RCC_ClockConfig+0x224>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d115      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0c0      	b.n	8003c5a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d107      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae0:	4b26      	ldr	r3, [pc, #152]	; (8003b7c <HAL_RCC_ClockConfig+0x224>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d109      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0b4      	b.n	8003c5a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af0:	4b22      	ldr	r3, [pc, #136]	; (8003b7c <HAL_RCC_ClockConfig+0x224>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0ac      	b.n	8003c5a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b00:	4b1e      	ldr	r3, [pc, #120]	; (8003b7c <HAL_RCC_ClockConfig+0x224>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f023 0203 	bic.w	r2, r3, #3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	491b      	ldr	r1, [pc, #108]	; (8003b7c <HAL_RCC_ClockConfig+0x224>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b12:	f7fe ffb1 	bl	8002a78 <HAL_GetTick>
 8003b16:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b18:	e00a      	b.n	8003b30 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b1a:	f7fe ffad 	bl	8002a78 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e094      	b.n	8003c5a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b30:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <HAL_RCC_ClockConfig+0x224>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 020c 	and.w	r2, r3, #12
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d1eb      	bne.n	8003b1a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b42:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <HAL_RCC_ClockConfig+0x220>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d217      	bcs.n	8003b80 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b50:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <HAL_RCC_ClockConfig+0x220>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 0207 	bic.w	r2, r3, #7
 8003b58:	4907      	ldr	r1, [pc, #28]	; (8003b78 <HAL_RCC_ClockConfig+0x220>)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <HAL_RCC_ClockConfig+0x220>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d008      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e073      	b.n	8003c5a <HAL_RCC_ClockConfig+0x302>
 8003b72:	bf00      	nop
 8003b74:	0800969c 	.word	0x0800969c
 8003b78:	40022000 	.word	0x40022000
 8003b7c:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d025      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d018      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x26e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9c:	d013      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x26e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x26e>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bb0:	d009      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x26e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bba:	d004      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x26e>
 8003bbc:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003bc0:	4828      	ldr	r0, [pc, #160]	; (8003c64 <HAL_RCC_ClockConfig+0x30c>)
 8003bc2:	f7fe fc1c 	bl	80023fe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc6:	4b28      	ldr	r3, [pc, #160]	; (8003c68 <HAL_RCC_ClockConfig+0x310>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	4925      	ldr	r1, [pc, #148]	; (8003c68 <HAL_RCC_ClockConfig+0x310>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d026      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d018      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x2c6>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf4:	d013      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x2c6>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003bfe:	d00e      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x2c6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c08:	d009      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x2c6>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c12:	d004      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x2c6>
 8003c14:	f240 31ab 	movw	r1, #939	; 0x3ab
 8003c18:	4812      	ldr	r0, [pc, #72]	; (8003c64 <HAL_RCC_ClockConfig+0x30c>)
 8003c1a:	f7fe fbf0 	bl	80023fe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c1e:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <HAL_RCC_ClockConfig+0x310>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	490e      	ldr	r1, [pc, #56]	; (8003c68 <HAL_RCC_ClockConfig+0x310>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c32:	f000 f821 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8003c36:	4602      	mov	r2, r0
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_RCC_ClockConfig+0x310>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	490a      	ldr	r1, [pc, #40]	; (8003c6c <HAL_RCC_ClockConfig+0x314>)
 8003c44:	5ccb      	ldrb	r3, [r1, r3]
 8003c46:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4a:	4a09      	ldr	r2, [pc, #36]	; (8003c70 <HAL_RCC_ClockConfig+0x318>)
 8003c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_RCC_ClockConfig+0x31c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe fc84 	bl	8002560 <HAL_InitTick>

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	0800969c 	.word	0x0800969c
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	08009914 	.word	0x08009914
 8003c70:	20000000 	.word	0x20000000
 8003c74:	20000004 	.word	0x20000004

08003c78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c78:	b490      	push	{r4, r7}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c7e:	4b29      	ldr	r3, [pc, #164]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xac>)
 8003c80:	1d3c      	adds	r4, r7, #4
 8003c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c88:	f240 2301 	movw	r3, #513	; 0x201
 8003c8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	2300      	movs	r3, #0
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	2300      	movs	r3, #0
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ca2:	4b21      	ldr	r3, [pc, #132]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d002      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x40>
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d003      	beq.n	8003cbe <HAL_RCC_GetSysClockFreq+0x46>
 8003cb6:	e02b      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cb8:	4b1c      	ldr	r3, [pc, #112]	; (8003d2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cba:	623b      	str	r3, [r7, #32]
      break;
 8003cbc:	e02b      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	0c9b      	lsrs	r3, r3, #18
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	3328      	adds	r3, #40	; 0x28
 8003cc8:	443b      	add	r3, r7
 8003cca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003cce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d012      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cda:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	0c5b      	lsrs	r3, r3, #17
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	3328      	adds	r3, #40	; 0x28
 8003ce6:	443b      	add	r3, r7
 8003ce8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003cec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	4a0e      	ldr	r2, [pc, #56]	; (8003d2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cf2:	fb03 f202 	mul.w	r2, r3, r2
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfe:	e004      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	4a0b      	ldr	r2, [pc, #44]	; (8003d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d04:	fb02 f303 	mul.w	r3, r2, r3
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	623b      	str	r3, [r7, #32]
      break;
 8003d0e:	e002      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d12:	623b      	str	r3, [r7, #32]
      break;
 8003d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d16:	6a3b      	ldr	r3, [r7, #32]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3728      	adds	r7, #40	; 0x28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc90      	pop	{r4, r7}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	080096d4 	.word	0x080096d4
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	007a1200 	.word	0x007a1200
 8003d30:	003d0900 	.word	0x003d0900

08003d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d38:	4b02      	ldr	r3, [pc, #8]	; (8003d44 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr
 8003d44:	20000000 	.word	0x20000000

08003d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d4c:	f7ff fff2 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	0a1b      	lsrs	r3, r3, #8
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	4903      	ldr	r1, [pc, #12]	; (8003d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	08009924 	.word	0x08009924

08003d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d74:	f7ff ffde 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	0adb      	lsrs	r3, r3, #11
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	4903      	ldr	r1, [pc, #12]	; (8003d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d86:	5ccb      	ldrb	r3, [r1, r3]
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40021000 	.word	0x40021000
 8003d94:	08009924 	.word	0x08009924

08003d98 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d104      	bne.n	8003db2 <HAL_RCC_GetClockConfig+0x1a>
 8003da8:	f240 5123 	movw	r1, #1315	; 0x523
 8003dac:	4818      	ldr	r0, [pc, #96]	; (8003e10 <HAL_RCC_GetClockConfig+0x78>)
 8003dae:	f7fe fb26 	bl	80023fe <assert_failed>
  assert_param(pFLatency != NULL);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d104      	bne.n	8003dc2 <HAL_RCC_GetClockConfig+0x2a>
 8003db8:	f240 5124 	movw	r1, #1316	; 0x524
 8003dbc:	4814      	ldr	r0, [pc, #80]	; (8003e10 <HAL_RCC_GetClockConfig+0x78>)
 8003dbe:	f7fe fb1e 	bl	80023fe <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	220f      	movs	r2, #15
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_RCC_GetClockConfig+0x7c>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 0203 	and.w	r2, r3, #3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <HAL_RCC_GetClockConfig+0x7c>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <HAL_RCC_GetClockConfig+0x7c>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003dec:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <HAL_RCC_GetClockConfig+0x7c>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	08db      	lsrs	r3, r3, #3
 8003df2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dfa:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <HAL_RCC_GetClockConfig+0x80>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0207 	and.w	r2, r3, #7
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	0800969c 	.word	0x0800969c
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40022000 	.word	0x40022000

08003e1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e24:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <RCC_Delay+0x34>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <RCC_Delay+0x38>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	0a5b      	lsrs	r3, r3, #9
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	fb02 f303 	mul.w	r3, r2, r3
 8003e36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e38:	bf00      	nop
  }
  while (Delay --);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1e5a      	subs	r2, r3, #1
 8003e3e:	60fa      	str	r2, [r7, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1f9      	bne.n	8003e38 <RCC_Delay+0x1c>
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr
 8003e50:	20000000 	.word	0x20000000
 8003e54:	10624dd3 	.word	0x10624dd3

08003e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10f      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d103      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003e8c:	216c      	movs	r1, #108	; 0x6c
 8003e8e:	4873      	ldr	r0, [pc, #460]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003e90:	f7fe fab5 	bl	80023fe <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8095 	beq.w	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d012      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb2:	d00d      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ebc:	d008      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec6:	d003      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003ec8:	2172      	movs	r1, #114	; 0x72
 8003eca:	4864      	ldr	r0, [pc, #400]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003ecc:	f7fe fa97 	bl	80023fe <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed4:	4b62      	ldr	r3, [pc, #392]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10d      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee0:	4b5f      	ldr	r3, [pc, #380]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	4a5e      	ldr	r2, [pc, #376]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eea:	61d3      	str	r3, [r2, #28]
 8003eec:	4b5c      	ldr	r3, [pc, #368]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efc:	4b59      	ldr	r3, [pc, #356]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d118      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f08:	4b56      	ldr	r3, [pc, #344]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a55      	ldr	r2, [pc, #340]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f14:	f7fe fdb0 	bl	8002a78 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1a:	e008      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1c:	f7fe fdac 	bl	8002a78 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	; 0x64
 8003f28:	d901      	bls.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e092      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2e:	4b4d      	ldr	r3, [pc, #308]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f3a:	4b49      	ldr	r3, [pc, #292]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d02e      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d027      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f58:	4b41      	ldr	r3, [pc, #260]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f62:	4b41      	ldr	r3, [pc, #260]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f68:	4b3f      	ldr	r3, [pc, #252]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f6e:	4a3c      	ldr	r2, [pc, #240]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d014      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7e:	f7fe fd7b 	bl	8002a78 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f84:	e00a      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f86:	f7fe fd77 	bl	8002a78 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e05b      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9c:	4b30      	ldr	r3, [pc, #192]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0ee      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fa8:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	492a      	ldr	r1, [pc, #168]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d105      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc0:	4b27      	ldr	r3, [pc, #156]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	4a26      	ldr	r2, [pc, #152]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01f      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d012      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fe8:	d00d      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff2:	d008      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ffc:	d003      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003ffe:	21b9      	movs	r1, #185	; 0xb9
 8004000:	4816      	ldr	r0, [pc, #88]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004002:	f7fe f9fc 	bl	80023fe <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004006:	4b16      	ldr	r3, [pc, #88]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	4913      	ldr	r1, [pc, #76]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004014:	4313      	orrs	r3, r2
 8004016:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	d016      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800402c:	d008      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d004      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004036:	f240 1115 	movw	r1, #277	; 0x115
 800403a:	4808      	ldr	r0, [pc, #32]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800403c:	f7fe f9df 	bl	80023fe <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4904      	ldr	r1, [pc, #16]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800404e:	4313      	orrs	r3, r2
 8004050:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	080096e4 	.word	0x080096e4
 8004060:	40021000 	.word	0x40021000
 8004064:	40007000 	.word	0x40007000
 8004068:	42420440 	.word	0x42420440

0800406c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b08d      	sub	sp, #52	; 0x34
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004074:	4b62      	ldr	r3, [pc, #392]	; (8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004076:	f107 040c 	add.w	r4, r7, #12
 800407a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800407c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004080:	f240 2301 	movw	r3, #513	; 0x201
 8004084:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
 800408a:	2300      	movs	r3, #0
 800408c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800408e:	2300      	movs	r3, #0
 8004090:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	2300      	movs	r3, #0
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10e      	bne.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d104      	bne.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 80040b8:	f44f 71cb 	mov.w	r1, #406	; 0x196
 80040bc:	4851      	ldr	r0, [pc, #324]	; (8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80040be:	f7fe f99e 	bl	80023fe <assert_failed>

  switch (PeriphClk)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b10      	cmp	r3, #16
 80040cc:	f200 808e 	bhi.w	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d049      	beq.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d079      	beq.n	80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80040dc:	e086      	b.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x180>
      temp_reg = RCC->CFGR;
 80040de:	4b4a      	ldr	r3, [pc, #296]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80040e4:	4b48      	ldr	r3, [pc, #288]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d07f      	beq.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	0c9b      	lsrs	r3, r3, #18
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	3330      	adds	r3, #48	; 0x30
 80040fa:	443b      	add	r3, r7
 80040fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004100:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d017      	beq.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800410c:	4b3e      	ldr	r3, [pc, #248]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	0c5b      	lsrs	r3, r3, #17
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	3330      	adds	r3, #48	; 0x30
 8004118:	443b      	add	r3, r7
 800411a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00d      	beq.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800412a:	4a38      	ldr	r2, [pc, #224]	; (800420c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	fb02 f303 	mul.w	r3, r2, r3
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800413a:	e004      	b.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	4a34      	ldr	r2, [pc, #208]	; (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8004140:	fb02 f303 	mul.w	r3, r2, r3
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004146:	4b30      	ldr	r3, [pc, #192]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800414e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004152:	d102      	bne.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          frequency = pllclk;
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004158:	e04a      	b.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = (pllclk * 2) / 3;
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	4a2d      	ldr	r2, [pc, #180]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8004160:	fba2 2303 	umull	r2, r3, r2, r3
 8004164:	085b      	lsrs	r3, r3, #1
 8004166:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004168:	e042      	b.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
      temp_reg = RCC->BDCR;
 800416a:	4b27      	ldr	r3, [pc, #156]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800417a:	d108      	bne.n	800418e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
        frequency = LSE_VALUE;
 8004186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800418a:	62bb      	str	r3, [r7, #40]	; 0x28
 800418c:	e01f      	b.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004198:	d109      	bne.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 800419a:	4b1b      	ldr	r3, [pc, #108]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        frequency = LSI_VALUE;
 80041a6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80041aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ac:	e00f      	b.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041b8:	d11c      	bne.n	80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80041ba:	4b13      	ldr	r3, [pc, #76]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d016      	beq.n	80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
        frequency = HSE_VALUE / 128U;
 80041c6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80041cc:	e012      	b.n	80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80041ce:	e011      	b.n	80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80041d0:	f7ff fdce 	bl	8003d70 <HAL_RCC_GetPCLK2Freq>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	0b9b      	lsrs	r3, r3, #14
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	3301      	adds	r3, #1
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80041ea:	e004      	b.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      break;
 80041ec:	bf00      	nop
 80041ee:	e002      	b.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      break;
 80041f0:	bf00      	nop
 80041f2:	e000      	b.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      break;
 80041f4:	bf00      	nop
    }
  }
  return (frequency);
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3734      	adds	r7, #52	; 0x34
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd90      	pop	{r4, r7, pc}
 8004200:	08009720 	.word	0x08009720
 8004204:	080096e4 	.word	0x080096e4
 8004208:	40021000 	.word	0x40021000
 800420c:	007a1200 	.word	0x007a1200
 8004210:	003d0900 	.word	0x003d0900
 8004214:	aaaaaaab 	.word	0xaaaaaaab

08004218 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e0b4      	b.n	8004398 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a5b      	ldr	r2, [pc, #364]	; (80043a0 <HAL_RTC_Init+0x188>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d004      	beq.n	8004242 <HAL_RTC_Init+0x2a>
 8004238:	f240 111d 	movw	r1, #285	; 0x11d
 800423c:	4859      	ldr	r0, [pc, #356]	; (80043a4 <HAL_RTC_Init+0x18c>)
 800423e:	f7fe f8de 	bl	80023fe <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d012      	beq.n	8004270 <HAL_RTC_Init+0x58>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b80      	cmp	r3, #128	; 0x80
 8004250:	d00e      	beq.n	8004270 <HAL_RTC_Init+0x58>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800425a:	d009      	beq.n	8004270 <HAL_RTC_Init+0x58>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004264:	d004      	beq.n	8004270 <HAL_RTC_Init+0x58>
 8004266:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800426a:	484e      	ldr	r0, [pc, #312]	; (80043a4 <HAL_RTC_Init+0x18c>)
 800426c:	f7fe f8c7 	bl	80023fe <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004278:	d309      	bcc.n	800428e <HAL_RTC_Init+0x76>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004282:	d004      	beq.n	800428e <HAL_RTC_Init+0x76>
 8004284:	f240 111f 	movw	r1, #287	; 0x11f
 8004288:	4846      	ldr	r0, [pc, #280]	; (80043a4 <HAL_RTC_Init+0x18c>)
 800428a:	f7fe f8b8 	bl	80023fe <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	7c5b      	ldrb	r3, [r3, #17]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d105      	bne.n	80042a4 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7fe f902 	bl	80024a8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fbca 	bl	8004a44 <HAL_RTC_WaitForSynchro>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d004      	beq.n	80042c0 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2204      	movs	r2, #4
 80042ba:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e06b      	b.n	8004398 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fc83 	bl	8004bcc <RTC_EnterInitMode>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d004      	beq.n	80042d6 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2204      	movs	r2, #4
 80042d0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e060      	b.n	8004398 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0207 	bic.w	r2, r2, #7
 80042e4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80042ee:	4b2e      	ldr	r3, [pc, #184]	; (80043a8 <HAL_RTC_Init+0x190>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	4a2d      	ldr	r2, [pc, #180]	; (80043a8 <HAL_RTC_Init+0x190>)
 80042f4:	f023 0301 	bic.w	r3, r3, #1
 80042f8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80042fa:	4b2b      	ldr	r3, [pc, #172]	; (80043a8 <HAL_RTC_Init+0x190>)
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	4928      	ldr	r1, [pc, #160]	; (80043a8 <HAL_RTC_Init+0x190>)
 8004308:	4313      	orrs	r3, r2
 800430a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004314:	d003      	beq.n	800431e <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e00e      	b.n	800433c <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800431e:	2001      	movs	r0, #1
 8004320:	f7ff fea4 	bl	800406c <HAL_RCCEx_GetPeriphCLKFreq>
 8004324:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d104      	bne.n	8004336 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2204      	movs	r2, #4
 8004330:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e030      	b.n	8004398 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3b01      	subs	r3, #1
 800433a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f023 010f 	bic.w	r1, r3, #15
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	0c1a      	lsrs	r2, r3, #16
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	041b      	lsls	r3, r3, #16
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	b291      	uxth	r1, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	430b      	orrs	r3, r1
 8004366:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fc57 	bl	8004c1c <RTC_ExitInitMode>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d004      	beq.n	800437e <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2204      	movs	r2, #4
 8004378:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e00c      	b.n	8004398 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004396:	2300      	movs	r3, #0
  }
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40002800 	.word	0x40002800
 80043a4:	08009730 	.word	0x08009730
 80043a8:	40006c00 	.word	0x40006c00

080043ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	2300      	movs	r3, #0
 80043be:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_RTC_SetTime+0x20>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e0cd      	b.n	800456c <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d007      	beq.n	80043e6 <HAL_RTC_SetTime+0x3a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d004      	beq.n	80043e6 <HAL_RTC_SetTime+0x3a>
 80043dc:	f240 21ca 	movw	r1, #714	; 0x2ca
 80043e0:	4864      	ldr	r0, [pc, #400]	; (8004574 <HAL_RTC_SetTime+0x1c8>)
 80043e2:	f7fe f80c 	bl	80023fe <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	7c1b      	ldrb	r3, [r3, #16]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_RTC_SetTime+0x46>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e0bc      	b.n	800456c <HAL_RTC_SetTime+0x1c0>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2202      	movs	r2, #2
 80043fc:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d12e      	bne.n	8004462 <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b17      	cmp	r3, #23
 800440a:	d904      	bls.n	8004416 <HAL_RTC_SetTime+0x6a>
 800440c:	f240 21d3 	movw	r1, #723	; 0x2d3
 8004410:	4858      	ldr	r0, [pc, #352]	; (8004574 <HAL_RTC_SetTime+0x1c8>)
 8004412:	f7fd fff4 	bl	80023fe <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	785b      	ldrb	r3, [r3, #1]
 800441a:	2b3b      	cmp	r3, #59	; 0x3b
 800441c:	d904      	bls.n	8004428 <HAL_RTC_SetTime+0x7c>
 800441e:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8004422:	4854      	ldr	r0, [pc, #336]	; (8004574 <HAL_RTC_SetTime+0x1c8>)
 8004424:	f7fd ffeb 	bl	80023fe <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	789b      	ldrb	r3, [r3, #2]
 800442c:	2b3b      	cmp	r3, #59	; 0x3b
 800442e:	d904      	bls.n	800443a <HAL_RTC_SetTime+0x8e>
 8004430:	f240 21d5 	movw	r1, #725	; 0x2d5
 8004434:	484f      	ldr	r0, [pc, #316]	; (8004574 <HAL_RTC_SetTime+0x1c8>)
 8004436:	f7fd ffe2 	bl	80023fe <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004444:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	785b      	ldrb	r3, [r3, #1]
 800444c:	4619      	mov	r1, r3
 800444e:	460b      	mov	r3, r1
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	1a5b      	subs	r3, r3, r1
 8004454:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004456:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800445c:	4413      	add	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	e045      	b.n	80044ee <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fc1d 	bl	8004ca6 <RTC_Bcd2ToByte>
 800446c:	4603      	mov	r3, r0
 800446e:	2b17      	cmp	r3, #23
 8004470:	d904      	bls.n	800447c <HAL_RTC_SetTime+0xd0>
 8004472:	f240 21dd 	movw	r1, #733	; 0x2dd
 8004476:	483f      	ldr	r0, [pc, #252]	; (8004574 <HAL_RTC_SetTime+0x1c8>)
 8004478:	f7fd ffc1 	bl	80023fe <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	785b      	ldrb	r3, [r3, #1]
 8004480:	4618      	mov	r0, r3
 8004482:	f000 fc10 	bl	8004ca6 <RTC_Bcd2ToByte>
 8004486:	4603      	mov	r3, r0
 8004488:	2b3b      	cmp	r3, #59	; 0x3b
 800448a:	d904      	bls.n	8004496 <HAL_RTC_SetTime+0xea>
 800448c:	f240 21de 	movw	r1, #734	; 0x2de
 8004490:	4838      	ldr	r0, [pc, #224]	; (8004574 <HAL_RTC_SetTime+0x1c8>)
 8004492:	f7fd ffb4 	bl	80023fe <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	789b      	ldrb	r3, [r3, #2]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fc03 	bl	8004ca6 <RTC_Bcd2ToByte>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b3b      	cmp	r3, #59	; 0x3b
 80044a4:	d904      	bls.n	80044b0 <HAL_RTC_SetTime+0x104>
 80044a6:	f240 21df 	movw	r1, #735	; 0x2df
 80044aa:	4832      	ldr	r0, [pc, #200]	; (8004574 <HAL_RTC_SetTime+0x1c8>)
 80044ac:	f7fd ffa7 	bl	80023fe <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fbf6 	bl	8004ca6 <RTC_Bcd2ToByte>
 80044ba:	4603      	mov	r3, r0
 80044bc:	461a      	mov	r2, r3
 80044be:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80044c2:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	785b      	ldrb	r3, [r3, #1]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fbeb 	bl	8004ca6 <RTC_Bcd2ToByte>
 80044d0:	4603      	mov	r3, r0
 80044d2:	461a      	mov	r2, r3
 80044d4:	4613      	mov	r3, r2
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80044dc:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	789b      	ldrb	r3, [r3, #2]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fbdf 	bl	8004ca6 <RTC_Bcd2ToByte>
 80044e8:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80044ea:	4423      	add	r3, r4
 80044ec:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80044ee:	6979      	ldr	r1, [r7, #20]
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fb04 	bl	8004afe <RTC_WriteTimeCounter>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d007      	beq.n	800450c <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2204      	movs	r2, #4
 8004500:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e02f      	b.n	800456c <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0205 	bic.w	r2, r2, #5
 800451a:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 fb15 	bl	8004b4c <RTC_ReadAlarmCounter>
 8004522:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800452a:	d018      	beq.n	800455e <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	429a      	cmp	r2, r3
 8004532:	d214      	bcs.n	800455e <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800453a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800453e:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004540:	6939      	ldr	r1, [r7, #16]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fb1b 	bl	8004b7e <RTC_WriteAlarmCounter>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2204      	movs	r2, #4
 8004552:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e006      	b.n	800456c <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800456a:	2300      	movs	r3, #0
  }
}
 800456c:	4618      	mov	r0, r3
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	bd90      	pop	{r4, r7, pc}
 8004574:	08009730 	.word	0x08009730

08004578 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	2300      	movs	r3, #0
 800458a:	61fb      	str	r3, [r7, #28]
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <HAL_RTC_GetTime+0x28>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0c0      	b.n	8004726 <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <HAL_RTC_GetTime+0x42>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d004      	beq.n	80045ba <HAL_RTC_GetTime+0x42>
 80045b0:	f240 312d 	movw	r1, #813	; 0x32d
 80045b4:	485e      	ldr	r0, [pc, #376]	; (8004730 <HAL_RTC_GetTime+0x1b8>)
 80045b6:	f7fd ff22 	bl	80023fe <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0ac      	b.n	8004726 <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 fa66 	bl	8004a9e <RTC_ReadTimeCounter>
 80045d2:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	4a57      	ldr	r2, [pc, #348]	; (8004734 <HAL_RTC_GetTime+0x1bc>)
 80045d8:	fba2 2303 	umull	r2, r3, r2, r3
 80045dc:	0adb      	lsrs	r3, r3, #11
 80045de:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4b54      	ldr	r3, [pc, #336]	; (8004734 <HAL_RTC_GetTime+0x1bc>)
 80045e4:	fba3 1302 	umull	r1, r3, r3, r2
 80045e8:	0adb      	lsrs	r3, r3, #11
 80045ea:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80045ee:	fb01 f303 	mul.w	r3, r1, r3
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	4a50      	ldr	r2, [pc, #320]	; (8004738 <HAL_RTC_GetTime+0x1c0>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	4a4b      	ldr	r2, [pc, #300]	; (8004734 <HAL_RTC_GetTime+0x1bc>)
 8004606:	fba2 1203 	umull	r1, r2, r2, r3
 800460a:	0ad2      	lsrs	r2, r2, #11
 800460c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004610:	fb01 f202 	mul.w	r2, r1, r2
 8004614:	1a9a      	subs	r2, r3, r2
 8004616:	4b48      	ldr	r3, [pc, #288]	; (8004738 <HAL_RTC_GetTime+0x1c0>)
 8004618:	fba3 1302 	umull	r1, r3, r3, r2
 800461c:	0959      	lsrs	r1, r3, #5
 800461e:	460b      	mov	r3, r1
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	1a5b      	subs	r3, r3, r1
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	1ad1      	subs	r1, r2, r3
 8004628:	b2ca      	uxtb	r2, r1
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b17      	cmp	r3, #23
 8004632:	d955      	bls.n	80046e0 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4a41      	ldr	r2, [pc, #260]	; (800473c <HAL_RTC_GetTime+0x1c4>)
 8004638:	fba2 2303 	umull	r2, r3, r2, r3
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004640:	6939      	ldr	r1, [r7, #16]
 8004642:	4b3e      	ldr	r3, [pc, #248]	; (800473c <HAL_RTC_GetTime+0x1c4>)
 8004644:	fba3 2301 	umull	r2, r3, r3, r1
 8004648:	091a      	lsrs	r2, r3, #4
 800464a:	4613      	mov	r3, r2
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	4413      	add	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	1aca      	subs	r2, r1, r3
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fa76 	bl	8004b4c <RTC_ReadAlarmCounter>
 8004660:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004668:	d008      	beq.n	800467c <HAL_RTC_GetTime+0x104>
 800466a:	69fa      	ldr	r2, [r7, #28]
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	429a      	cmp	r2, r3
 8004670:	d904      	bls.n	800467c <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	e002      	b.n	8004682 <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800467c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004680:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	4a2e      	ldr	r2, [pc, #184]	; (8004740 <HAL_RTC_GetTime+0x1c8>)
 8004686:	fb02 f303 	mul.w	r3, r2, r3
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004690:	69b9      	ldr	r1, [r7, #24]
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fa33 	bl	8004afe <RTC_WriteTimeCounter>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e041      	b.n	8004726 <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a8:	d00c      	beq.n	80046c4 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	4413      	add	r3, r2
 80046b0:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80046b2:	69f9      	ldr	r1, [r7, #28]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 fa62 	bl	8004b7e <RTC_WriteAlarmCounter>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e030      	b.n	8004726 <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80046c4:	69f9      	ldr	r1, [r7, #28]
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fa59 	bl	8004b7e <RTC_WriteAlarmCounter>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e027      	b.n	8004726 <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80046d6:	6979      	ldr	r1, [r7, #20]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 fb01 	bl	8004ce0 <RTC_DateUpdate>
 80046de:	e003      	b.n	80046e8 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d01a      	beq.n	8004724 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 faba 	bl	8004c6c <RTC_ByteToBcd2>
 80046f8:	4603      	mov	r3, r0
 80046fa:	461a      	mov	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	785b      	ldrb	r3, [r3, #1]
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fab1 	bl	8004c6c <RTC_ByteToBcd2>
 800470a:	4603      	mov	r3, r0
 800470c:	461a      	mov	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	789b      	ldrb	r3, [r3, #2]
 8004716:	4618      	mov	r0, r3
 8004718:	f000 faa8 	bl	8004c6c <RTC_ByteToBcd2>
 800471c:	4603      	mov	r3, r0
 800471e:	461a      	mov	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3720      	adds	r7, #32
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	08009730 	.word	0x08009730
 8004734:	91a2b3c5 	.word	0x91a2b3c5
 8004738:	88888889 	.word	0x88888889
 800473c:	aaaaaaab 	.word	0xaaaaaaab
 8004740:	00015180 	.word	0x00015180

08004744 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	2300      	movs	r3, #0
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_RTC_SetDate+0x24>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0fc      	b.n	8004966 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <HAL_RTC_SetDate+0x3e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d004      	beq.n	8004782 <HAL_RTC_SetDate+0x3e>
 8004778:	f44f 7167 	mov.w	r1, #924	; 0x39c
 800477c:	487c      	ldr	r0, [pc, #496]	; (8004970 <HAL_RTC_SetDate+0x22c>)
 800477e:	f7fd fe3e 	bl	80023fe <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	7c1b      	ldrb	r3, [r3, #16]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_RTC_SetDate+0x4a>
 800478a:	2302      	movs	r3, #2
 800478c:	e0eb      	b.n	8004966 <HAL_RTC_SetDate+0x222>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2201      	movs	r2, #1
 8004792:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2202      	movs	r2, #2
 8004798:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d12f      	bne.n	8004800 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	78db      	ldrb	r3, [r3, #3]
 80047a4:	2b63      	cmp	r3, #99	; 0x63
 80047a6:	d904      	bls.n	80047b2 <HAL_RTC_SetDate+0x6e>
 80047a8:	f240 31a5 	movw	r1, #933	; 0x3a5
 80047ac:	4870      	ldr	r0, [pc, #448]	; (8004970 <HAL_RTC_SetDate+0x22c>)
 80047ae:	f7fd fe26 	bl	80023fe <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	785b      	ldrb	r3, [r3, #1]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_RTC_SetDate+0x7e>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	785b      	ldrb	r3, [r3, #1]
 80047be:	2b0c      	cmp	r3, #12
 80047c0:	d904      	bls.n	80047cc <HAL_RTC_SetDate+0x88>
 80047c2:	f240 31a6 	movw	r1, #934	; 0x3a6
 80047c6:	486a      	ldr	r0, [pc, #424]	; (8004970 <HAL_RTC_SetDate+0x22c>)
 80047c8:	f7fd fe19 	bl	80023fe <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	789b      	ldrb	r3, [r3, #2]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_RTC_SetDate+0x98>
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	789b      	ldrb	r3, [r3, #2]
 80047d8:	2b1f      	cmp	r3, #31
 80047da:	d904      	bls.n	80047e6 <HAL_RTC_SetDate+0xa2>
 80047dc:	f240 31a7 	movw	r1, #935	; 0x3a7
 80047e0:	4863      	ldr	r0, [pc, #396]	; (8004970 <HAL_RTC_SetDate+0x22c>)
 80047e2:	f7fd fe0c 	bl	80023fe <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	78da      	ldrb	r2, [r3, #3]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	785a      	ldrb	r2, [r3, #1]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	789a      	ldrb	r2, [r3, #2]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	739a      	strb	r2, [r3, #14]
 80047fe:	e051      	b.n	80048a4 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	78db      	ldrb	r3, [r3, #3]
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fa4e 	bl	8004ca6 <RTC_Bcd2ToByte>
 800480a:	4603      	mov	r3, r0
 800480c:	2b63      	cmp	r3, #99	; 0x63
 800480e:	d904      	bls.n	800481a <HAL_RTC_SetDate+0xd6>
 8004810:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8004814:	4856      	ldr	r0, [pc, #344]	; (8004970 <HAL_RTC_SetDate+0x22c>)
 8004816:	f7fd fdf2 	bl	80023fe <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	785b      	ldrb	r3, [r3, #1]
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fa41 	bl	8004ca6 <RTC_Bcd2ToByte>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <HAL_RTC_SetDate+0xf6>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	785b      	ldrb	r3, [r3, #1]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fa39 	bl	8004ca6 <RTC_Bcd2ToByte>
 8004834:	4603      	mov	r3, r0
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d904      	bls.n	8004844 <HAL_RTC_SetDate+0x100>
 800483a:	f240 31b1 	movw	r1, #945	; 0x3b1
 800483e:	484c      	ldr	r0, [pc, #304]	; (8004970 <HAL_RTC_SetDate+0x22c>)
 8004840:	f7fd fddd 	bl	80023fe <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	789b      	ldrb	r3, [r3, #2]
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fa2c 	bl	8004ca6 <RTC_Bcd2ToByte>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <HAL_RTC_SetDate+0x120>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	789b      	ldrb	r3, [r3, #2]
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fa24 	bl	8004ca6 <RTC_Bcd2ToByte>
 800485e:	4603      	mov	r3, r0
 8004860:	2b1f      	cmp	r3, #31
 8004862:	d904      	bls.n	800486e <HAL_RTC_SetDate+0x12a>
 8004864:	f240 31b2 	movw	r1, #946	; 0x3b2
 8004868:	4841      	ldr	r0, [pc, #260]	; (8004970 <HAL_RTC_SetDate+0x22c>)
 800486a:	f7fd fdc8 	bl	80023fe <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	78db      	ldrb	r3, [r3, #3]
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fa17 	bl	8004ca6 <RTC_Bcd2ToByte>
 8004878:	4603      	mov	r3, r0
 800487a:	461a      	mov	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	785b      	ldrb	r3, [r3, #1]
 8004884:	4618      	mov	r0, r3
 8004886:	f000 fa0e 	bl	8004ca6 <RTC_Bcd2ToByte>
 800488a:	4603      	mov	r3, r0
 800488c:	461a      	mov	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	789b      	ldrb	r3, [r3, #2]
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fa05 	bl	8004ca6 <RTC_Bcd2ToByte>
 800489c:	4603      	mov	r3, r0
 800489e:	461a      	mov	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	7bdb      	ldrb	r3, [r3, #15]
 80048a8:	4618      	mov	r0, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	7b59      	ldrb	r1, [r3, #13]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	7b9b      	ldrb	r3, [r3, #14]
 80048b2:	461a      	mov	r2, r3
 80048b4:	f000 faf0 	bl	8004e98 <RTC_WeekDayNum>
 80048b8:	4603      	mov	r3, r0
 80048ba:	461a      	mov	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	7b1a      	ldrb	r2, [r3, #12]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f8e8 	bl	8004a9e <RTC_ReadTimeCounter>
 80048ce:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	4a28      	ldr	r2, [pc, #160]	; (8004974 <HAL_RTC_SetDate+0x230>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	0adb      	lsrs	r3, r3, #11
 80048da:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b18      	cmp	r3, #24
 80048e0:	d93a      	bls.n	8004958 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	4a24      	ldr	r2, [pc, #144]	; (8004978 <HAL_RTC_SetDate+0x234>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	4a23      	ldr	r2, [pc, #140]	; (800497c <HAL_RTC_SetDate+0x238>)
 80048ee:	fb02 f303 	mul.w	r3, r2, r3
 80048f2:	69fa      	ldr	r2, [r7, #28]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80048f8:	69f9      	ldr	r1, [r7, #28]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f8ff 	bl	8004afe <RTC_WriteTimeCounter>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2204      	movs	r2, #4
 800490a:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e027      	b.n	8004966 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f918 	bl	8004b4c <RTC_ReadAlarmCounter>
 800491c:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004924:	d018      	beq.n	8004958 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	429a      	cmp	r2, r3
 800492c:	d214      	bcs.n	8004958 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004934:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004938:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800493a:	69b9      	ldr	r1, [r7, #24]
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f91e 	bl	8004b7e <RTC_WriteAlarmCounter>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2204      	movs	r2, #4
 800494c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e006      	b.n	8004966 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3720      	adds	r7, #32
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	08009730 	.word	0x08009730
 8004974:	91a2b3c5 	.word	0x91a2b3c5
 8004978:	aaaaaaab 	.word	0xaaaaaaab
 800497c:	00015180 	.word	0x00015180

08004980 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800498c:	f107 0314 	add.w	r3, r7, #20
 8004990:	2100      	movs	r1, #0
 8004992:	460a      	mov	r2, r1
 8004994:	801a      	strh	r2, [r3, #0]
 8004996:	460a      	mov	r2, r1
 8004998:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <HAL_RTC_GetDate+0x26>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e045      	b.n	8004a36 <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <HAL_RTC_GetDate+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d004      	beq.n	80049c0 <HAL_RTC_GetDate+0x40>
 80049b6:	f240 410e 	movw	r1, #1038	; 0x40e
 80049ba:	4821      	ldr	r0, [pc, #132]	; (8004a40 <HAL_RTC_GetDate+0xc0>)
 80049bc:	f7fd fd1f 	bl	80023fe <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80049c0:	f107 0314 	add.w	r3, r7, #20
 80049c4:	2200      	movs	r2, #0
 80049c6:	4619      	mov	r1, r3
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f7ff fdd5 	bl	8004578 <HAL_RTC_GetTime>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e02e      	b.n	8004a36 <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	7b1a      	ldrb	r2, [r3, #12]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	7bda      	ldrb	r2, [r3, #15]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	7b5a      	ldrb	r2, [r3, #13]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	7b9a      	ldrb	r2, [r3, #14]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01a      	beq.n	8004a34 <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	78db      	ldrb	r3, [r3, #3]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 f932 	bl	8004c6c <RTC_ByteToBcd2>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 f929 	bl	8004c6c <RTC_ByteToBcd2>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	789b      	ldrb	r3, [r3, #2]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 f920 	bl	8004c6c <RTC_ByteToBcd2>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	08009730 	.word	0x08009730

08004a44 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e01d      	b.n	8004a96 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0208 	bic.w	r2, r2, #8
 8004a68:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004a6a:	f7fe f805 	bl	8002a78 <HAL_GetTick>
 8004a6e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004a70:	e009      	b.n	8004a86 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004a72:	f7fe f801 	bl	8002a78 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a80:	d901      	bls.n	8004a86 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e007      	b.n	8004a96 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0ee      	beq.n	8004a72 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b087      	sub	sp, #28
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	827b      	strh	r3, [r7, #18]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	823b      	strh	r3, [r7, #16]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004ace:	8a7a      	ldrh	r2, [r7, #18]
 8004ad0:	8a3b      	ldrh	r3, [r7, #16]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d008      	beq.n	8004ae8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004ad6:	8a3b      	ldrh	r3, [r7, #16]
 8004ad8:	041a      	lsls	r2, r3, #16
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	e004      	b.n	8004af2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004ae8:	8a7b      	ldrh	r3, [r7, #18]
 8004aea:	041a      	lsls	r2, r3, #16
 8004aec:	89fb      	ldrh	r3, [r7, #14]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004af2:	697b      	ldr	r3, [r7, #20]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	371c      	adds	r7, #28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr

08004afe <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f85d 	bl	8004bcc <RTC_EnterInitMode>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
 8004b1c:	e011      	b.n	8004b42 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	0c12      	lsrs	r2, r2, #16
 8004b26:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	b292      	uxth	r2, r2
 8004b30:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f872 	bl	8004c1c <RTC_ExitInitMode>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	81fb      	strh	r3, [r7, #14]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004b6c:	89fb      	ldrh	r3, [r7, #14]
 8004b6e:	041a      	lsls	r2, r3, #16
 8004b70:	89bb      	ldrh	r3, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr

08004b7e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f81d 	bl	8004bcc <RTC_EnterInitMode>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
 8004b9c:	e011      	b.n	8004bc2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	0c12      	lsrs	r2, r2, #16
 8004ba6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	b292      	uxth	r2, r2
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f832 	bl	8004c1c <RTC_ExitInitMode>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004bd8:	f7fd ff4e 	bl	8002a78 <HAL_GetTick>
 8004bdc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004bde:	e009      	b.n	8004bf4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004be0:	f7fd ff4a 	bl	8002a78 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bee:	d901      	bls.n	8004bf4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e00f      	b.n	8004c14 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0ee      	beq.n	8004be0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0210 	orr.w	r2, r2, #16
 8004c10:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0210 	bic.w	r2, r2, #16
 8004c36:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004c38:	f7fd ff1e 	bl	8002a78 <HAL_GetTick>
 8004c3c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c3e:	e009      	b.n	8004c54 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004c40:	f7fd ff1a 	bl	8002a78 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c4e:	d901      	bls.n	8004c54 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e007      	b.n	8004c64 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0ee      	beq.n	8004c40 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004c7a:	e005      	b.n	8004c88 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	3b0a      	subs	r3, #10
 8004c86:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004c88:	79fb      	ldrb	r3, [r7, #7]
 8004c8a:	2b09      	cmp	r3, #9
 8004c8c:	d8f6      	bhi.n	8004c7c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	b2db      	uxtb	r3, r3
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bc80      	pop	{r7}
 8004ca4:	4770      	bx	lr

08004ca6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	4603      	mov	r3, r0
 8004cae:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	091b      	lsrs	r3, r3, #4
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	b2db      	uxtb	r3, r3
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr

08004ce0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	7bdb      	ldrb	r3, [r3, #15]
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	7b5b      	ldrb	r3, [r3, #13]
 8004d04:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	7b9b      	ldrb	r3, [r3, #14]
 8004d0a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	e06f      	b.n	8004df2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d011      	beq.n	8004d3c <RTC_DateUpdate+0x5c>
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d00e      	beq.n	8004d3c <RTC_DateUpdate+0x5c>
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b05      	cmp	r3, #5
 8004d22:	d00b      	beq.n	8004d3c <RTC_DateUpdate+0x5c>
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	2b07      	cmp	r3, #7
 8004d28:	d008      	beq.n	8004d3c <RTC_DateUpdate+0x5c>
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d005      	beq.n	8004d3c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	2b0a      	cmp	r3, #10
 8004d34:	d002      	beq.n	8004d3c <RTC_DateUpdate+0x5c>
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b0c      	cmp	r3, #12
 8004d3a:	d117      	bne.n	8004d6c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b1e      	cmp	r3, #30
 8004d40:	d803      	bhi.n	8004d4a <RTC_DateUpdate+0x6a>
      {
        day++;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3301      	adds	r3, #1
 8004d46:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004d48:	e050      	b.n	8004dec <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b0c      	cmp	r3, #12
 8004d4e:	d005      	beq.n	8004d5c <RTC_DateUpdate+0x7c>
        {
          month++;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	3301      	adds	r3, #1
 8004d54:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004d56:	2301      	movs	r3, #1
 8004d58:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004d5a:	e047      	b.n	8004dec <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004d60:	2301      	movs	r3, #1
 8004d62:	60fb      	str	r3, [r7, #12]
          year++;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	3301      	adds	r3, #1
 8004d68:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004d6a:	e03f      	b.n	8004dec <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d008      	beq.n	8004d84 <RTC_DateUpdate+0xa4>
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b06      	cmp	r3, #6
 8004d76:	d005      	beq.n	8004d84 <RTC_DateUpdate+0xa4>
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b09      	cmp	r3, #9
 8004d7c:	d002      	beq.n	8004d84 <RTC_DateUpdate+0xa4>
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b0b      	cmp	r3, #11
 8004d82:	d10c      	bne.n	8004d9e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b1d      	cmp	r3, #29
 8004d88:	d803      	bhi.n	8004d92 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004d90:	e02c      	b.n	8004dec <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	3301      	adds	r3, #1
 8004d96:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004d9c:	e026      	b.n	8004dec <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d123      	bne.n	8004dec <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b1b      	cmp	r3, #27
 8004da8:	d803      	bhi.n	8004db2 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3301      	adds	r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	e01c      	b.n	8004dec <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b1c      	cmp	r3, #28
 8004db6:	d111      	bne.n	8004ddc <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 f839 	bl	8004e34 <RTC_IsLeapYear>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	e00d      	b.n	8004dec <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	e007      	b.n	8004dec <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b1d      	cmp	r3, #29
 8004de0:	d104      	bne.n	8004dec <RTC_DateUpdate+0x10c>
      {
        month++;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	3301      	adds	r3, #1
 8004de6:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004de8:	2301      	movs	r3, #1
 8004dea:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	3301      	adds	r3, #1
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d38b      	bcc.n	8004d12 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6978      	ldr	r0, [r7, #20]
 8004e1e:	f000 f83b 	bl	8004e98 <RTC_WeekDayNum>
 8004e22:	4603      	mov	r3, r0
 8004e24:	461a      	mov	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	731a      	strb	r2, [r3, #12]
}
 8004e2a:	bf00      	nop
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004e3e:	88fb      	ldrh	r3, [r7, #6]
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e01d      	b.n	8004e8a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	4a10      	ldr	r2, [pc, #64]	; (8004e94 <RTC_IsLeapYear+0x60>)
 8004e52:	fba2 1203 	umull	r1, r2, r2, r3
 8004e56:	0952      	lsrs	r2, r2, #5
 8004e58:	2164      	movs	r1, #100	; 0x64
 8004e5a:	fb01 f202 	mul.w	r2, r1, r2
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e00f      	b.n	8004e8a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004e6a:	88fb      	ldrh	r3, [r7, #6]
 8004e6c:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <RTC_IsLeapYear+0x60>)
 8004e6e:	fba2 1203 	umull	r1, r2, r2, r3
 8004e72:	09d2      	lsrs	r2, r2, #7
 8004e74:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004e78:	fb01 f202 	mul.w	r2, r1, r2
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e000      	b.n	8004e8a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004e88:	2300      	movs	r3, #0
  }
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr
 8004e94:	51eb851f 	.word	0x51eb851f

08004e98 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	70fb      	strb	r3, [r7, #3]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60bb      	str	r3, [r7, #8]
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004eb6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004eb8:	78fb      	ldrb	r3, [r7, #3]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d82d      	bhi.n	8004f1a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004ebe:	78fa      	ldrb	r2, [r7, #3]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4413      	add	r3, r2
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	1a9b      	subs	r3, r3, r2
 8004eca:	4a2c      	ldr	r2, [pc, #176]	; (8004f7c <RTC_WeekDayNum+0xe4>)
 8004ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed0:	085a      	lsrs	r2, r3, #1
 8004ed2:	78bb      	ldrb	r3, [r7, #2]
 8004ed4:	441a      	add	r2, r3
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	441a      	add	r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	089b      	lsrs	r3, r3, #2
 8004ee0:	441a      	add	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	4926      	ldr	r1, [pc, #152]	; (8004f80 <RTC_WeekDayNum+0xe8>)
 8004ee8:	fba1 1303 	umull	r1, r3, r1, r3
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	1ad2      	subs	r2, r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	4922      	ldr	r1, [pc, #136]	; (8004f80 <RTC_WeekDayNum+0xe8>)
 8004ef6:	fba1 1303 	umull	r1, r3, r1, r3
 8004efa:	09db      	lsrs	r3, r3, #7
 8004efc:	4413      	add	r3, r2
 8004efe:	1d1a      	adds	r2, r3, #4
 8004f00:	4b20      	ldr	r3, [pc, #128]	; (8004f84 <RTC_WeekDayNum+0xec>)
 8004f02:	fba3 1302 	umull	r1, r3, r3, r2
 8004f06:	1ad1      	subs	r1, r2, r3
 8004f08:	0849      	lsrs	r1, r1, #1
 8004f0a:	440b      	add	r3, r1
 8004f0c:	0899      	lsrs	r1, r3, #2
 8004f0e:	460b      	mov	r3, r1
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	1a5b      	subs	r3, r3, r1
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e029      	b.n	8004f6e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004f1a:	78fa      	ldrb	r2, [r7, #3]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	4413      	add	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	4a15      	ldr	r2, [pc, #84]	; (8004f7c <RTC_WeekDayNum+0xe4>)
 8004f28:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2c:	085a      	lsrs	r2, r3, #1
 8004f2e:	78bb      	ldrb	r3, [r7, #2]
 8004f30:	441a      	add	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	441a      	add	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	089b      	lsrs	r3, r3, #2
 8004f3a:	441a      	add	r2, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4910      	ldr	r1, [pc, #64]	; (8004f80 <RTC_WeekDayNum+0xe8>)
 8004f40:	fba1 1303 	umull	r1, r3, r1, r3
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	1ad2      	subs	r2, r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	490d      	ldr	r1, [pc, #52]	; (8004f80 <RTC_WeekDayNum+0xe8>)
 8004f4c:	fba1 1303 	umull	r1, r3, r1, r3
 8004f50:	09db      	lsrs	r3, r3, #7
 8004f52:	4413      	add	r3, r2
 8004f54:	1c9a      	adds	r2, r3, #2
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <RTC_WeekDayNum+0xec>)
 8004f58:	fba3 1302 	umull	r1, r3, r3, r2
 8004f5c:	1ad1      	subs	r1, r2, r3
 8004f5e:	0849      	lsrs	r1, r1, #1
 8004f60:	440b      	add	r3, r1
 8004f62:	0899      	lsrs	r1, r3, #2
 8004f64:	460b      	mov	r3, r1
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	1a5b      	subs	r3, r3, r1
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	b2db      	uxtb	r3, r3
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr
 8004f7c:	38e38e39 	.word	0x38e38e39
 8004f80:	51eb851f 	.word	0x51eb851f
 8004f84:	24924925 	.word	0x24924925

08004f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e07a      	b.n	8005090 <HAL_TIM_Base_Init+0x108>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a3e      	ldr	r2, [pc, #248]	; (8005098 <HAL_TIM_Base_Init+0x110>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d013      	beq.n	8004fcc <HAL_TIM_Base_Init+0x44>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fac:	d00e      	beq.n	8004fcc <HAL_TIM_Base_Init+0x44>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a3a      	ldr	r2, [pc, #232]	; (800509c <HAL_TIM_Base_Init+0x114>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d009      	beq.n	8004fcc <HAL_TIM_Base_Init+0x44>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a38      	ldr	r2, [pc, #224]	; (80050a0 <HAL_TIM_Base_Init+0x118>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d004      	beq.n	8004fcc <HAL_TIM_Base_Init+0x44>
 8004fc2:	f44f 7189 	mov.w	r1, #274	; 0x112
 8004fc6:	4837      	ldr	r0, [pc, #220]	; (80050a4 <HAL_TIM_Base_Init+0x11c>)
 8004fc8:	f7fd fa19 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d014      	beq.n	8004ffe <HAL_TIM_Base_Init+0x76>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d010      	beq.n	8004ffe <HAL_TIM_Base_Init+0x76>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d00c      	beq.n	8004ffe <HAL_TIM_Base_Init+0x76>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b40      	cmp	r3, #64	; 0x40
 8004fea:	d008      	beq.n	8004ffe <HAL_TIM_Base_Init+0x76>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2b60      	cmp	r3, #96	; 0x60
 8004ff2:	d004      	beq.n	8004ffe <HAL_TIM_Base_Init+0x76>
 8004ff4:	f240 1113 	movw	r1, #275	; 0x113
 8004ff8:	482a      	ldr	r0, [pc, #168]	; (80050a4 <HAL_TIM_Base_Init+0x11c>)
 8004ffa:	f7fd fa00 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00e      	beq.n	8005024 <HAL_TIM_Base_Init+0x9c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800500e:	d009      	beq.n	8005024 <HAL_TIM_Base_Init+0x9c>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005018:	d004      	beq.n	8005024 <HAL_TIM_Base_Init+0x9c>
 800501a:	f44f 718a 	mov.w	r1, #276	; 0x114
 800501e:	4821      	ldr	r0, [pc, #132]	; (80050a4 <HAL_TIM_Base_Init+0x11c>)
 8005020:	f7fd f9ed 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d008      	beq.n	800503e <HAL_TIM_Base_Init+0xb6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	2b80      	cmp	r3, #128	; 0x80
 8005032:	d004      	beq.n	800503e <HAL_TIM_Base_Init+0xb6>
 8005034:	f240 1115 	movw	r1, #277	; 0x115
 8005038:	481a      	ldr	r0, [pc, #104]	; (80050a4 <HAL_TIM_Base_Init+0x11c>)
 800503a:	f7fd f9e0 	bl	80023fe <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d111      	bne.n	800506e <HAL_TIM_Base_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f001 fa8a 	bl	800656c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <HAL_TIM_Base_Init+0xde>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a11      	ldr	r2, [pc, #68]	; (80050a8 <HAL_TIM_Base_Init+0x120>)
 8005064:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f000 ff11 	bl	8005ea8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40000400 	.word	0x40000400
 80050a0:	40000800 	.word	0x40000800
 80050a4:	08009768 	.word	0x08009768
 80050a8:	08002929 	.word	0x08002929

080050ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1a      	ldr	r2, [pc, #104]	; (8005124 <HAL_TIM_Base_Start_IT+0x78>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d013      	beq.n	80050e6 <HAL_TIM_Base_Start_IT+0x3a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c6:	d00e      	beq.n	80050e6 <HAL_TIM_Base_Start_IT+0x3a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a16      	ldr	r2, [pc, #88]	; (8005128 <HAL_TIM_Base_Start_IT+0x7c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d009      	beq.n	80050e6 <HAL_TIM_Base_Start_IT+0x3a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a15      	ldr	r2, [pc, #84]	; (800512c <HAL_TIM_Base_Start_IT+0x80>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d004      	beq.n	80050e6 <HAL_TIM_Base_Start_IT+0x3a>
 80050dc:	f240 11b9 	movw	r1, #441	; 0x1b9
 80050e0:	4813      	ldr	r0, [pc, #76]	; (8005130 <HAL_TIM_Base_Start_IT+0x84>)
 80050e2:	f7fd f98c 	bl	80023fe <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b06      	cmp	r3, #6
 8005106:	d007      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x6c>
  {
    __HAL_TIM_ENABLE(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40012c00 	.word	0x40012c00
 8005128:	40000400 	.word	0x40000400
 800512c:	40000800 	.word	0x40000800
 8005130:	08009768 	.word	0x08009768

08005134 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e07a      	b.n	800523c <HAL_TIM_PWM_Init+0x108>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a3e      	ldr	r2, [pc, #248]	; (8005244 <HAL_TIM_PWM_Init+0x110>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d013      	beq.n	8005178 <HAL_TIM_PWM_Init+0x44>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d00e      	beq.n	8005178 <HAL_TIM_PWM_Init+0x44>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a3a      	ldr	r2, [pc, #232]	; (8005248 <HAL_TIM_PWM_Init+0x114>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d009      	beq.n	8005178 <HAL_TIM_PWM_Init+0x44>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a38      	ldr	r2, [pc, #224]	; (800524c <HAL_TIM_PWM_Init+0x118>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d004      	beq.n	8005178 <HAL_TIM_PWM_Init+0x44>
 800516e:	f240 419b 	movw	r1, #1179	; 0x49b
 8005172:	4837      	ldr	r0, [pc, #220]	; (8005250 <HAL_TIM_PWM_Init+0x11c>)
 8005174:	f7fd f943 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d014      	beq.n	80051aa <HAL_TIM_PWM_Init+0x76>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2b10      	cmp	r3, #16
 8005186:	d010      	beq.n	80051aa <HAL_TIM_PWM_Init+0x76>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b20      	cmp	r3, #32
 800518e:	d00c      	beq.n	80051aa <HAL_TIM_PWM_Init+0x76>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	d008      	beq.n	80051aa <HAL_TIM_PWM_Init+0x76>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b60      	cmp	r3, #96	; 0x60
 800519e:	d004      	beq.n	80051aa <HAL_TIM_PWM_Init+0x76>
 80051a0:	f240 419c 	movw	r1, #1180	; 0x49c
 80051a4:	482a      	ldr	r0, [pc, #168]	; (8005250 <HAL_TIM_PWM_Init+0x11c>)
 80051a6:	f7fd f92a 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00e      	beq.n	80051d0 <HAL_TIM_PWM_Init+0x9c>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ba:	d009      	beq.n	80051d0 <HAL_TIM_PWM_Init+0x9c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c4:	d004      	beq.n	80051d0 <HAL_TIM_PWM_Init+0x9c>
 80051c6:	f240 419d 	movw	r1, #1181	; 0x49d
 80051ca:	4821      	ldr	r0, [pc, #132]	; (8005250 <HAL_TIM_PWM_Init+0x11c>)
 80051cc:	f7fd f917 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d008      	beq.n	80051ea <HAL_TIM_PWM_Init+0xb6>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	2b80      	cmp	r3, #128	; 0x80
 80051de:	d004      	beq.n	80051ea <HAL_TIM_PWM_Init+0xb6>
 80051e0:	f240 419e 	movw	r1, #1182	; 0x49e
 80051e4:	481a      	ldr	r0, [pc, #104]	; (8005250 <HAL_TIM_PWM_Init+0x11c>)
 80051e6:	f7fd f90a 	bl	80023fe <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d111      	bne.n	800521a <HAL_TIM_PWM_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f001 f9b4 	bl	800656c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005208:	2b00      	cmp	r3, #0
 800520a:	d102      	bne.n	8005212 <HAL_TIM_PWM_Init+0xde>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a11      	ldr	r2, [pc, #68]	; (8005254 <HAL_TIM_PWM_Init+0x120>)
 8005210:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3304      	adds	r3, #4
 800522a:	4619      	mov	r1, r3
 800522c:	4610      	mov	r0, r2
 800522e:	f000 fe3b 	bl	8005ea8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40012c00 	.word	0x40012c00
 8005248:	40000400 	.word	0x40000400
 800524c:	40000800 	.word	0x40000800
 8005250:	08009768 	.word	0x08009768
 8005254:	08005259 	.word	0x08005259

08005258 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr
	...

0800526c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a38      	ldr	r2, [pc, #224]	; (800535c <HAL_TIM_PWM_Start+0xf0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d10b      	bne.n	8005298 <HAL_TIM_PWM_Start+0x2c>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d040      	beq.n	8005308 <HAL_TIM_PWM_Start+0x9c>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b04      	cmp	r3, #4
 800528a:	d03d      	beq.n	8005308 <HAL_TIM_PWM_Start+0x9c>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b08      	cmp	r3, #8
 8005290:	d03a      	beq.n	8005308 <HAL_TIM_PWM_Start+0x9c>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b0c      	cmp	r3, #12
 8005296:	d037      	beq.n	8005308 <HAL_TIM_PWM_Start+0x9c>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a0:	d10b      	bne.n	80052ba <HAL_TIM_PWM_Start+0x4e>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d02f      	beq.n	8005308 <HAL_TIM_PWM_Start+0x9c>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d02c      	beq.n	8005308 <HAL_TIM_PWM_Start+0x9c>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d029      	beq.n	8005308 <HAL_TIM_PWM_Start+0x9c>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b0c      	cmp	r3, #12
 80052b8:	d026      	beq.n	8005308 <HAL_TIM_PWM_Start+0x9c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a28      	ldr	r2, [pc, #160]	; (8005360 <HAL_TIM_PWM_Start+0xf4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d10b      	bne.n	80052dc <HAL_TIM_PWM_Start+0x70>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01e      	beq.n	8005308 <HAL_TIM_PWM_Start+0x9c>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d01b      	beq.n	8005308 <HAL_TIM_PWM_Start+0x9c>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d018      	beq.n	8005308 <HAL_TIM_PWM_Start+0x9c>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b0c      	cmp	r3, #12
 80052da:	d015      	beq.n	8005308 <HAL_TIM_PWM_Start+0x9c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a20      	ldr	r2, [pc, #128]	; (8005364 <HAL_TIM_PWM_Start+0xf8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d10b      	bne.n	80052fe <HAL_TIM_PWM_Start+0x92>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00d      	beq.n	8005308 <HAL_TIM_PWM_Start+0x9c>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d00a      	beq.n	8005308 <HAL_TIM_PWM_Start+0x9c>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d007      	beq.n	8005308 <HAL_TIM_PWM_Start+0x9c>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b0c      	cmp	r3, #12
 80052fc:	d004      	beq.n	8005308 <HAL_TIM_PWM_Start+0x9c>
 80052fe:	f240 5113 	movw	r1, #1299	; 0x513
 8005302:	4819      	ldr	r0, [pc, #100]	; (8005368 <HAL_TIM_PWM_Start+0xfc>)
 8005304:	f7fd f87b 	bl	80023fe <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2201      	movs	r2, #1
 800530e:	6839      	ldr	r1, [r7, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f001 f8d7 	bl	80064c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a10      	ldr	r2, [pc, #64]	; (800535c <HAL_TIM_PWM_Start+0xf0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d107      	bne.n	8005330 <HAL_TIM_PWM_Start+0xc4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800532e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b06      	cmp	r3, #6
 8005340:	d007      	beq.n	8005352 <HAL_TIM_PWM_Start+0xe6>
  {
    __HAL_TIM_ENABLE(htim);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f042 0201 	orr.w	r2, r2, #1
 8005350:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40012c00 	.word	0x40012c00
 8005360:	40000400 	.word	0x40000400
 8005364:	40000800 	.word	0x40000800
 8005368:	08009768 	.word	0x08009768

0800536c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b02      	cmp	r3, #2
 8005380:	d128      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b02      	cmp	r3, #2
 800538e:	d121      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0202 	mvn.w	r2, #2
 8005398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	4798      	blx	r3
 80053b8:	e009      	b.n	80053ce <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d128      	bne.n	8005434 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d121      	bne.n	8005434 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0204 	mvn.w	r2, #4
 80053f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2202      	movs	r2, #2
 80053fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4798      	blx	r3
 8005418:	e009      	b.n	800542e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b08      	cmp	r3, #8
 8005440:	d128      	bne.n	8005494 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b08      	cmp	r3, #8
 800544e:	d121      	bne.n	8005494 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0208 	mvn.w	r2, #8
 8005458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2204      	movs	r2, #4
 800545e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d005      	beq.n	800547a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	4798      	blx	r3
 8005478:	e009      	b.n	800548e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d128      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b10      	cmp	r3, #16
 80054ae:	d121      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0210 	mvn.w	r2, #16
 80054b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2208      	movs	r2, #8
 80054be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d005      	beq.n	80054da <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	4798      	blx	r3
 80054d8:	e009      	b.n	80054ee <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d10f      	bne.n	8005522 <HAL_TIM_IRQHandler+0x1b6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b01      	cmp	r3, #1
 800550e:	d108      	bne.n	8005522 <HAL_TIM_IRQHandler+0x1b6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0201 	mvn.w	r2, #1
 8005518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552c:	2b80      	cmp	r3, #128	; 0x80
 800552e:	d110      	bne.n	8005552 <HAL_TIM_IRQHandler+0x1e6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553a:	2b80      	cmp	r3, #128	; 0x80
 800553c:	d109      	bne.n	8005552 <HAL_TIM_IRQHandler+0x1e6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	d110      	bne.n	8005582 <HAL_TIM_IRQHandler+0x216>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d109      	bne.n	8005582 <HAL_TIM_IRQHandler+0x216>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b20      	cmp	r3, #32
 800558e:	d110      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x246>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b20      	cmp	r3, #32
 800559c:	d109      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x246>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f06f 0220 	mvn.w	r2, #32
 80055a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d010      	beq.n	80055f0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d00d      	beq.n	80055f0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d00a      	beq.n	80055f0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b0c      	cmp	r3, #12
 80055de:	d007      	beq.n	80055f0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b3c      	cmp	r3, #60	; 0x3c
 80055e4:	d004      	beq.n	80055f0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80055e6:	f640 51eb 	movw	r1, #3563	; 0xdeb
 80055ea:	4883      	ldr	r0, [pc, #524]	; (80057f8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 80055ec:	f7fc ff07 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b60      	cmp	r3, #96	; 0x60
 80055f6:	d008      	beq.n	800560a <HAL_TIM_PWM_ConfigChannel+0x4e>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b70      	cmp	r3, #112	; 0x70
 80055fe:	d004      	beq.n	800560a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8005600:	f640 51ec 	movw	r1, #3564	; 0xdec
 8005604:	487c      	ldr	r0, [pc, #496]	; (80057f8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8005606:	f7fc fefa 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d008      	beq.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x68>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d004      	beq.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x68>
 800561a:	f640 51ed 	movw	r1, #3565	; 0xded
 800561e:	4876      	ldr	r0, [pc, #472]	; (80057f8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8005620:	f7fc feed 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d008      	beq.n	800563e <HAL_TIM_PWM_ConfigChannel+0x82>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	2b04      	cmp	r3, #4
 8005632:	d004      	beq.n	800563e <HAL_TIM_PWM_ConfigChannel+0x82>
 8005634:	f640 51ee 	movw	r1, #3566	; 0xdee
 8005638:	486f      	ldr	r0, [pc, #444]	; (80057f8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 800563a:	f7fc fee0 	bl	80023fe <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_TIM_PWM_ConfigChannel+0x90>
 8005648:	2302      	movs	r3, #2
 800564a:	e121      	b.n	8005890 <HAL_TIM_PWM_ConfigChannel+0x2d4>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b0c      	cmp	r3, #12
 8005660:	f200 810c 	bhi.w	800587c <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8005664:	a201      	add	r2, pc, #4	; (adr r2, 800566c <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8005666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566a:	bf00      	nop
 800566c:	080056a1 	.word	0x080056a1
 8005670:	0800587d 	.word	0x0800587d
 8005674:	0800587d 	.word	0x0800587d
 8005678:	0800587d 	.word	0x0800587d
 800567c:	08005713 	.word	0x08005713
 8005680:	0800587d 	.word	0x0800587d
 8005684:	0800587d 	.word	0x0800587d
 8005688:	0800587d 	.word	0x0800587d
 800568c:	08005787 	.word	0x08005787
 8005690:	0800587d 	.word	0x0800587d
 8005694:	0800587d 	.word	0x0800587d
 8005698:	0800587d 	.word	0x0800587d
 800569c:	08005809 	.word	0x08005809
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a55      	ldr	r2, [pc, #340]	; (80057fc <HAL_TIM_PWM_ConfigChannel+0x240>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d013      	beq.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x116>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b2:	d00e      	beq.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x116>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a51      	ldr	r2, [pc, #324]	; (8005800 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d009      	beq.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x116>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a50      	ldr	r2, [pc, #320]	; (8005804 <HAL_TIM_PWM_ConfigChannel+0x248>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d004      	beq.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x116>
 80056c8:	f640 51fa 	movw	r1, #3578	; 0xdfa
 80056cc:	484a      	ldr	r0, [pc, #296]	; (80057f8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 80056ce:	f7fc fe96 	bl	80023fe <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68b9      	ldr	r1, [r7, #8]
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fc47 	bl	8005f6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 0208 	orr.w	r2, r2, #8
 80056ec:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699a      	ldr	r2, [r3, #24]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0204 	bic.w	r2, r2, #4
 80056fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6999      	ldr	r1, [r3, #24]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	619a      	str	r2, [r3, #24]
      break;
 8005710:	e0b5      	b.n	800587e <HAL_TIM_PWM_ConfigChannel+0x2c2>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a39      	ldr	r2, [pc, #228]	; (80057fc <HAL_TIM_PWM_ConfigChannel+0x240>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d013      	beq.n	8005744 <HAL_TIM_PWM_ConfigChannel+0x188>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005724:	d00e      	beq.n	8005744 <HAL_TIM_PWM_ConfigChannel+0x188>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a35      	ldr	r2, [pc, #212]	; (8005800 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d009      	beq.n	8005744 <HAL_TIM_PWM_ConfigChannel+0x188>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a33      	ldr	r2, [pc, #204]	; (8005804 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d004      	beq.n	8005744 <HAL_TIM_PWM_ConfigChannel+0x188>
 800573a:	f640 610b 	movw	r1, #3595	; 0xe0b
 800573e:	482e      	ldr	r0, [pc, #184]	; (80057f8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8005740:	f7fc fe5d 	bl	80023fe <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fc9e 	bl	800608c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800575e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800576e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6999      	ldr	r1, [r3, #24]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	021a      	lsls	r2, r3, #8
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	619a      	str	r2, [r3, #24]
      break;
 8005784:	e07b      	b.n	800587e <HAL_TIM_PWM_ConfigChannel+0x2c2>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a1c      	ldr	r2, [pc, #112]	; (80057fc <HAL_TIM_PWM_ConfigChannel+0x240>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d013      	beq.n	80057b8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005798:	d00e      	beq.n	80057b8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a18      	ldr	r2, [pc, #96]	; (8005800 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d009      	beq.n	80057b8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a16      	ldr	r2, [pc, #88]	; (8005804 <HAL_TIM_PWM_ConfigChannel+0x248>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d004      	beq.n	80057b8 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80057ae:	f640 611c 	movw	r1, #3612	; 0xe1c
 80057b2:	4811      	ldr	r0, [pc, #68]	; (80057f8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 80057b4:	f7fc fe23 	bl	80023fe <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fcf8 	bl	80061b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69da      	ldr	r2, [r3, #28]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0208 	orr.w	r2, r2, #8
 80057d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	69da      	ldr	r2, [r3, #28]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0204 	bic.w	r2, r2, #4
 80057e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	69d9      	ldr	r1, [r3, #28]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	61da      	str	r2, [r3, #28]
      break;
 80057f6:	e042      	b.n	800587e <HAL_TIM_PWM_ConfigChannel+0x2c2>
 80057f8:	08009768 	.word	0x08009768
 80057fc:	40012c00 	.word	0x40012c00
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a22      	ldr	r2, [pc, #136]	; (8005898 <HAL_TIM_PWM_ConfigChannel+0x2dc>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <HAL_TIM_PWM_ConfigChannel+0x27e>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581a:	d00e      	beq.n	800583a <HAL_TIM_PWM_ConfigChannel+0x27e>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1e      	ldr	r2, [pc, #120]	; (800589c <HAL_TIM_PWM_ConfigChannel+0x2e0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d009      	beq.n	800583a <HAL_TIM_PWM_ConfigChannel+0x27e>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a1d      	ldr	r2, [pc, #116]	; (80058a0 <HAL_TIM_PWM_ConfigChannel+0x2e4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d004      	beq.n	800583a <HAL_TIM_PWM_ConfigChannel+0x27e>
 8005830:	f640 612d 	movw	r1, #3629	; 0xe2d
 8005834:	481b      	ldr	r0, [pc, #108]	; (80058a4 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 8005836:	f7fc fde2 	bl	80023fe <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	4618      	mov	r0, r3
 8005842:	f000 fd4b 	bl	80062dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69da      	ldr	r2, [r3, #28]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69d9      	ldr	r1, [r3, #28]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	021a      	lsls	r2, r3, #8
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	61da      	str	r2, [r3, #28]
      break;
 800587a:	e000      	b.n	800587e <HAL_TIM_PWM_ConfigChannel+0x2c2>
    }

    default:
      break;
 800587c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40000400 	.word	0x40000400
 80058a0:	40000800 	.word	0x40000800
 80058a4:	08009768 	.word	0x08009768

080058a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_TIM_ConfigClockSource+0x18>
 80058bc:	2302      	movs	r3, #2
 80058be:	e295      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x544>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d8:	d029      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x86>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058e2:	d024      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x86>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d020      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x86>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b10      	cmp	r3, #16
 80058f2:	d01c      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x86>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	d018      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x86>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b30      	cmp	r3, #48	; 0x30
 8005902:	d014      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x86>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b40      	cmp	r3, #64	; 0x40
 800590a:	d010      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x86>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b50      	cmp	r3, #80	; 0x50
 8005912:	d00c      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x86>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b60      	cmp	r3, #96	; 0x60
 800591a:	d008      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x86>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b70      	cmp	r3, #112	; 0x70
 8005922:	d004      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x86>
 8005924:	f241 118a 	movw	r1, #4490	; 0x118a
 8005928:	486b      	ldr	r0, [pc, #428]	; (8005ad8 <HAL_TIM_ConfigClockSource+0x230>)
 800592a:	f7fc fd68 	bl	80023fe <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800593c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005944:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005956:	f000 80c7 	beq.w	8005ae8 <HAL_TIM_ConfigClockSource+0x240>
 800595a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800595e:	f200 8239 	bhi.w	8005dd4 <HAL_TIM_ConfigClockSource+0x52c>
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005966:	d02d      	beq.n	80059c4 <HAL_TIM_ConfigClockSource+0x11c>
 8005968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596c:	f200 8232 	bhi.w	8005dd4 <HAL_TIM_ConfigClockSource+0x52c>
 8005970:	2b70      	cmp	r3, #112	; 0x70
 8005972:	d045      	beq.n	8005a00 <HAL_TIM_ConfigClockSource+0x158>
 8005974:	2b70      	cmp	r3, #112	; 0x70
 8005976:	f200 822d 	bhi.w	8005dd4 <HAL_TIM_ConfigClockSource+0x52c>
 800597a:	2b60      	cmp	r3, #96	; 0x60
 800597c:	f000 8167 	beq.w	8005c4e <HAL_TIM_ConfigClockSource+0x3a6>
 8005980:	2b60      	cmp	r3, #96	; 0x60
 8005982:	f200 8227 	bhi.w	8005dd4 <HAL_TIM_ConfigClockSource+0x52c>
 8005986:	2b50      	cmp	r3, #80	; 0x50
 8005988:	f000 8115 	beq.w	8005bb6 <HAL_TIM_ConfigClockSource+0x30e>
 800598c:	2b50      	cmp	r3, #80	; 0x50
 800598e:	f200 8221 	bhi.w	8005dd4 <HAL_TIM_ConfigClockSource+0x52c>
 8005992:	2b40      	cmp	r3, #64	; 0x40
 8005994:	f000 81b0 	beq.w	8005cf8 <HAL_TIM_ConfigClockSource+0x450>
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	f200 821b 	bhi.w	8005dd4 <HAL_TIM_ConfigClockSource+0x52c>
 800599e:	2b30      	cmp	r3, #48	; 0x30
 80059a0:	f000 81f6 	beq.w	8005d90 <HAL_TIM_ConfigClockSource+0x4e8>
 80059a4:	2b30      	cmp	r3, #48	; 0x30
 80059a6:	f200 8215 	bhi.w	8005dd4 <HAL_TIM_ConfigClockSource+0x52c>
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	f000 81f0 	beq.w	8005d90 <HAL_TIM_ConfigClockSource+0x4e8>
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	f200 820f 	bhi.w	8005dd4 <HAL_TIM_ConfigClockSource+0x52c>
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 81ea 	beq.w	8005d90 <HAL_TIM_ConfigClockSource+0x4e8>
 80059bc:	2b10      	cmp	r3, #16
 80059be:	f000 81e7 	beq.w	8005d90 <HAL_TIM_ConfigClockSource+0x4e8>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80059c2:	e207      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x52c>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a44      	ldr	r2, [pc, #272]	; (8005adc <HAL_TIM_ConfigClockSource+0x234>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	f000 8204 	beq.w	8005dd8 <HAL_TIM_ConfigClockSource+0x530>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d8:	f000 81fe 	beq.w	8005dd8 <HAL_TIM_ConfigClockSource+0x530>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a3f      	ldr	r2, [pc, #252]	; (8005ae0 <HAL_TIM_ConfigClockSource+0x238>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	f000 81f8 	beq.w	8005dd8 <HAL_TIM_ConfigClockSource+0x530>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a3d      	ldr	r2, [pc, #244]	; (8005ae4 <HAL_TIM_ConfigClockSource+0x23c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	f000 81f2 	beq.w	8005dd8 <HAL_TIM_ConfigClockSource+0x530>
 80059f4:	f241 1196 	movw	r1, #4502	; 0x1196
 80059f8:	4837      	ldr	r0, [pc, #220]	; (8005ad8 <HAL_TIM_ConfigClockSource+0x230>)
 80059fa:	f7fc fd00 	bl	80023fe <assert_failed>
      break;
 80059fe:	e1eb      	b.n	8005dd8 <HAL_TIM_ConfigClockSource+0x530>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a35      	ldr	r2, [pc, #212]	; (8005adc <HAL_TIM_ConfigClockSource+0x234>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d013      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x18a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a12:	d00e      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x18a>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a31      	ldr	r2, [pc, #196]	; (8005ae0 <HAL_TIM_ConfigClockSource+0x238>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d009      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x18a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a30      	ldr	r2, [pc, #192]	; (8005ae4 <HAL_TIM_ConfigClockSource+0x23c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d004      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x18a>
 8005a28:	f241 119d 	movw	r1, #4509	; 0x119d
 8005a2c:	482a      	ldr	r0, [pc, #168]	; (8005ad8 <HAL_TIM_ConfigClockSource+0x230>)
 8005a2e:	f7fc fce6 	bl	80023fe <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d013      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x1ba>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a42:	d00e      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x1ba>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a4c:	d009      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x1ba>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a56:	d004      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x1ba>
 8005a58:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 8005a5c:	481e      	ldr	r0, [pc, #120]	; (8005ad8 <HAL_TIM_ConfigClockSource+0x230>)
 8005a5e:	f7fc fcce 	bl	80023fe <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6a:	d014      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x1ee>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d010      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x1ee>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00c      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x1ee>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d008      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x1ee>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b0a      	cmp	r3, #10
 8005a8a:	d004      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x1ee>
 8005a8c:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8005a90:	4811      	ldr	r0, [pc, #68]	; (8005ad8 <HAL_TIM_ConfigClockSource+0x230>)
 8005a92:	f7fc fcb4 	bl	80023fe <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	2b0f      	cmp	r3, #15
 8005a9c:	d904      	bls.n	8005aa8 <HAL_TIM_ConfigClockSource+0x200>
 8005a9e:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8005aa2:	480d      	ldr	r0, [pc, #52]	; (8005ad8 <HAL_TIM_ConfigClockSource+0x230>)
 8005aa4:	f7fc fcab 	bl	80023fe <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6818      	ldr	r0, [r3, #0]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	6899      	ldr	r1, [r3, #8]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f000 fce5 	bl	8006486 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005aca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	609a      	str	r2, [r3, #8]
      break;
 8005ad4:	e181      	b.n	8005dda <HAL_TIM_ConfigClockSource+0x532>
 8005ad6:	bf00      	nop
 8005ad8:	08009768 	.word	0x08009768
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a7e      	ldr	r2, [pc, #504]	; (8005ce8 <HAL_TIM_ConfigClockSource+0x440>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d013      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x272>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afa:	d00e      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x272>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a7a      	ldr	r2, [pc, #488]	; (8005cec <HAL_TIM_ConfigClockSource+0x444>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d009      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x272>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a79      	ldr	r2, [pc, #484]	; (8005cf0 <HAL_TIM_ConfigClockSource+0x448>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d004      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x272>
 8005b10:	f241 11b5 	movw	r1, #4533	; 0x11b5
 8005b14:	4877      	ldr	r0, [pc, #476]	; (8005cf4 <HAL_TIM_ConfigClockSource+0x44c>)
 8005b16:	f7fc fc72 	bl	80023fe <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d013      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x2a2>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2a:	d00e      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x2a2>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b34:	d009      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x2a2>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b3e:	d004      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x2a2>
 8005b40:	f241 11b8 	movw	r1, #4536	; 0x11b8
 8005b44:	486b      	ldr	r0, [pc, #428]	; (8005cf4 <HAL_TIM_ConfigClockSource+0x44c>)
 8005b46:	f7fc fc5a 	bl	80023fe <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b52:	d014      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x2d6>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d010      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x2d6>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00c      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x2d6>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d008      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x2d6>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2b0a      	cmp	r3, #10
 8005b72:	d004      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x2d6>
 8005b74:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8005b78:	485e      	ldr	r0, [pc, #376]	; (8005cf4 <HAL_TIM_ConfigClockSource+0x44c>)
 8005b7a:	f7fc fc40 	bl	80023fe <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	2b0f      	cmp	r3, #15
 8005b84:	d904      	bls.n	8005b90 <HAL_TIM_ConfigClockSource+0x2e8>
 8005b86:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8005b8a:	485a      	ldr	r0, [pc, #360]	; (8005cf4 <HAL_TIM_ConfigClockSource+0x44c>)
 8005b8c:	f7fc fc37 	bl	80023fe <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6818      	ldr	r0, [r3, #0]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	6899      	ldr	r1, [r3, #8]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f000 fc71 	bl	8006486 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bb2:	609a      	str	r2, [r3, #8]
      break;
 8005bb4:	e111      	b.n	8005dda <HAL_TIM_ConfigClockSource+0x532>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a4b      	ldr	r2, [pc, #300]	; (8005ce8 <HAL_TIM_ConfigClockSource+0x440>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d013      	beq.n	8005be8 <HAL_TIM_ConfigClockSource+0x340>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc8:	d00e      	beq.n	8005be8 <HAL_TIM_ConfigClockSource+0x340>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a47      	ldr	r2, [pc, #284]	; (8005cec <HAL_TIM_ConfigClockSource+0x444>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d009      	beq.n	8005be8 <HAL_TIM_ConfigClockSource+0x340>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a45      	ldr	r2, [pc, #276]	; (8005cf0 <HAL_TIM_ConfigClockSource+0x448>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d004      	beq.n	8005be8 <HAL_TIM_ConfigClockSource+0x340>
 8005bde:	f241 11c9 	movw	r1, #4553	; 0x11c9
 8005be2:	4844      	ldr	r0, [pc, #272]	; (8005cf4 <HAL_TIM_ConfigClockSource+0x44c>)
 8005be4:	f7fc fc0b 	bl	80023fe <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf0:	d014      	beq.n	8005c1c <HAL_TIM_ConfigClockSource+0x374>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d010      	beq.n	8005c1c <HAL_TIM_ConfigClockSource+0x374>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00c      	beq.n	8005c1c <HAL_TIM_ConfigClockSource+0x374>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d008      	beq.n	8005c1c <HAL_TIM_ConfigClockSource+0x374>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b0a      	cmp	r3, #10
 8005c10:	d004      	beq.n	8005c1c <HAL_TIM_ConfigClockSource+0x374>
 8005c12:	f241 11cc 	movw	r1, #4556	; 0x11cc
 8005c16:	4837      	ldr	r0, [pc, #220]	; (8005cf4 <HAL_TIM_ConfigClockSource+0x44c>)
 8005c18:	f7fc fbf1 	bl	80023fe <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	2b0f      	cmp	r3, #15
 8005c22:	d904      	bls.n	8005c2e <HAL_TIM_ConfigClockSource+0x386>
 8005c24:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8005c28:	4832      	ldr	r0, [pc, #200]	; (8005cf4 <HAL_TIM_ConfigClockSource+0x44c>)
 8005c2a:	f7fc fbe8 	bl	80023fe <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6818      	ldr	r0, [r3, #0]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	6859      	ldr	r1, [r3, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f000 fbac 	bl	8006398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2150      	movs	r1, #80	; 0x50
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fc03 	bl	8006452 <TIM_ITRx_SetConfig>
      break;
 8005c4c:	e0c5      	b.n	8005dda <HAL_TIM_ConfigClockSource+0x532>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a25      	ldr	r2, [pc, #148]	; (8005ce8 <HAL_TIM_ConfigClockSource+0x440>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d013      	beq.n	8005c80 <HAL_TIM_ConfigClockSource+0x3d8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c60:	d00e      	beq.n	8005c80 <HAL_TIM_ConfigClockSource+0x3d8>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a21      	ldr	r2, [pc, #132]	; (8005cec <HAL_TIM_ConfigClockSource+0x444>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d009      	beq.n	8005c80 <HAL_TIM_ConfigClockSource+0x3d8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a1f      	ldr	r2, [pc, #124]	; (8005cf0 <HAL_TIM_ConfigClockSource+0x448>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d004      	beq.n	8005c80 <HAL_TIM_ConfigClockSource+0x3d8>
 8005c76:	f241 11d9 	movw	r1, #4569	; 0x11d9
 8005c7a:	481e      	ldr	r0, [pc, #120]	; (8005cf4 <HAL_TIM_ConfigClockSource+0x44c>)
 8005c7c:	f7fc fbbf 	bl	80023fe <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c88:	d014      	beq.n	8005cb4 <HAL_TIM_ConfigClockSource+0x40c>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d010      	beq.n	8005cb4 <HAL_TIM_ConfigClockSource+0x40c>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00c      	beq.n	8005cb4 <HAL_TIM_ConfigClockSource+0x40c>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d008      	beq.n	8005cb4 <HAL_TIM_ConfigClockSource+0x40c>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b0a      	cmp	r3, #10
 8005ca8:	d004      	beq.n	8005cb4 <HAL_TIM_ConfigClockSource+0x40c>
 8005caa:	f241 11dc 	movw	r1, #4572	; 0x11dc
 8005cae:	4811      	ldr	r0, [pc, #68]	; (8005cf4 <HAL_TIM_ConfigClockSource+0x44c>)
 8005cb0:	f7fc fba5 	bl	80023fe <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	2b0f      	cmp	r3, #15
 8005cba:	d904      	bls.n	8005cc6 <HAL_TIM_ConfigClockSource+0x41e>
 8005cbc:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8005cc0:	480c      	ldr	r0, [pc, #48]	; (8005cf4 <HAL_TIM_ConfigClockSource+0x44c>)
 8005cc2:	f7fc fb9c 	bl	80023fe <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6859      	ldr	r1, [r3, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f000 fb8e 	bl	80063f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2160      	movs	r1, #96	; 0x60
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fbb7 	bl	8006452 <TIM_ITRx_SetConfig>
      break;
 8005ce4:	e079      	b.n	8005dda <HAL_TIM_ConfigClockSource+0x532>
 8005ce6:	bf00      	nop
 8005ce8:	40012c00 	.word	0x40012c00
 8005cec:	40000400 	.word	0x40000400
 8005cf0:	40000800 	.word	0x40000800
 8005cf4:	08009768 	.word	0x08009768
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a3d      	ldr	r2, [pc, #244]	; (8005df4 <HAL_TIM_ConfigClockSource+0x54c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d013      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x482>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0a:	d00e      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x482>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a39      	ldr	r2, [pc, #228]	; (8005df8 <HAL_TIM_ConfigClockSource+0x550>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d009      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x482>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a38      	ldr	r2, [pc, #224]	; (8005dfc <HAL_TIM_ConfigClockSource+0x554>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d004      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x482>
 8005d20:	f241 11e9 	movw	r1, #4585	; 0x11e9
 8005d24:	4836      	ldr	r0, [pc, #216]	; (8005e00 <HAL_TIM_ConfigClockSource+0x558>)
 8005d26:	f7fc fb6a 	bl	80023fe <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d32:	d014      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x4b6>
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d010      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x4b6>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00c      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x4b6>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d008      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x4b6>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2b0a      	cmp	r3, #10
 8005d52:	d004      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x4b6>
 8005d54:	f241 11ec 	movw	r1, #4588	; 0x11ec
 8005d58:	4829      	ldr	r0, [pc, #164]	; (8005e00 <HAL_TIM_ConfigClockSource+0x558>)
 8005d5a:	f7fc fb50 	bl	80023fe <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	2b0f      	cmp	r3, #15
 8005d64:	d904      	bls.n	8005d70 <HAL_TIM_ConfigClockSource+0x4c8>
 8005d66:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8005d6a:	4825      	ldr	r0, [pc, #148]	; (8005e00 <HAL_TIM_ConfigClockSource+0x558>)
 8005d6c:	f7fc fb47 	bl	80023fe <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6818      	ldr	r0, [r3, #0]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	6859      	ldr	r1, [r3, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	f000 fb0b 	bl	8006398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2140      	movs	r1, #64	; 0x40
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fb62 	bl	8006452 <TIM_ITRx_SetConfig>
      break;
 8005d8e:	e024      	b.n	8005dda <HAL_TIM_ConfigClockSource+0x532>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a17      	ldr	r2, [pc, #92]	; (8005df4 <HAL_TIM_ConfigClockSource+0x54c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d013      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x51a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da2:	d00e      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x51a>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a13      	ldr	r2, [pc, #76]	; (8005df8 <HAL_TIM_ConfigClockSource+0x550>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d009      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x51a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a12      	ldr	r2, [pc, #72]	; (8005dfc <HAL_TIM_ConfigClockSource+0x554>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d004      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x51a>
 8005db8:	f241 11fc 	movw	r1, #4604	; 0x11fc
 8005dbc:	4810      	ldr	r0, [pc, #64]	; (8005e00 <HAL_TIM_ConfigClockSource+0x558>)
 8005dbe:	f7fc fb1e 	bl	80023fe <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4610      	mov	r0, r2
 8005dce:	f000 fb40 	bl	8006452 <TIM_ITRx_SetConfig>
      break;
 8005dd2:	e002      	b.n	8005dda <HAL_TIM_ConfigClockSource+0x532>
      break;
 8005dd4:	bf00      	nop
 8005dd6:	e000      	b.n	8005dda <HAL_TIM_ConfigClockSource+0x532>
      break;
 8005dd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40000400 	.word	0x40000400
 8005dfc:	40000800 	.word	0x40000800
 8005e00:	08009768 	.word	0x08009768

08005e04 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bc80      	pop	{r7}
 8005e14:	4770      	bx	lr

08005e16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr

08005e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr

08005e3a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bc80      	pop	{r7}
 8005e4a:	4770      	bx	lr

08005e4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bc80      	pop	{r7}
 8005e5c:	4770      	bx	lr

08005e5e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr

08005e82 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bc80      	pop	{r7}
 8005e92:	4770      	bx	lr

08005e94 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr
	...

08005ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a29      	ldr	r2, [pc, #164]	; (8005f60 <TIM_Base_SetConfig+0xb8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00b      	beq.n	8005ed8 <TIM_Base_SetConfig+0x30>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec6:	d007      	beq.n	8005ed8 <TIM_Base_SetConfig+0x30>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a26      	ldr	r2, [pc, #152]	; (8005f64 <TIM_Base_SetConfig+0xbc>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d003      	beq.n	8005ed8 <TIM_Base_SetConfig+0x30>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a25      	ldr	r2, [pc, #148]	; (8005f68 <TIM_Base_SetConfig+0xc0>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d108      	bne.n	8005eea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a1c      	ldr	r2, [pc, #112]	; (8005f60 <TIM_Base_SetConfig+0xb8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00b      	beq.n	8005f0a <TIM_Base_SetConfig+0x62>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef8:	d007      	beq.n	8005f0a <TIM_Base_SetConfig+0x62>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a19      	ldr	r2, [pc, #100]	; (8005f64 <TIM_Base_SetConfig+0xbc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d003      	beq.n	8005f0a <TIM_Base_SetConfig+0x62>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a18      	ldr	r2, [pc, #96]	; (8005f68 <TIM_Base_SetConfig+0xc0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d108      	bne.n	8005f1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a07      	ldr	r2, [pc, #28]	; (8005f60 <TIM_Base_SetConfig+0xb8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d103      	bne.n	8005f50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	691a      	ldr	r2, [r3, #16]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	615a      	str	r2, [r3, #20]
}
 8005f56:	bf00      	nop
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bc80      	pop	{r7}
 8005f5e:	4770      	bx	lr
 8005f60:	40012c00 	.word	0x40012c00
 8005f64:	40000400 	.word	0x40000400
 8005f68:	40000800 	.word	0x40000800

08005f6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f023 0201 	bic.w	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0303 	bic.w	r3, r3, #3
 8005fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f023 0302 	bic.w	r3, r3, #2
 8005fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a30      	ldr	r2, [pc, #192]	; (8006084 <TIM_OC1_SetConfig+0x118>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d119      	bne.n	8005ffc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d008      	beq.n	8005fe2 <TIM_OC1_SetConfig+0x76>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d004      	beq.n	8005fe2 <TIM_OC1_SetConfig+0x76>
 8005fd8:	f241 7101 	movw	r1, #5889	; 0x1701
 8005fdc:	482a      	ldr	r0, [pc, #168]	; (8006088 <TIM_OC1_SetConfig+0x11c>)
 8005fde:	f7fc fa0e 	bl	80023fe <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f023 0308 	bic.w	r3, r3, #8
 8005fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f023 0304 	bic.w	r3, r3, #4
 8005ffa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a21      	ldr	r2, [pc, #132]	; (8006084 <TIM_OC1_SetConfig+0x118>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d12d      	bne.n	8006060 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800600c:	d008      	beq.n	8006020 <TIM_OC1_SetConfig+0xb4>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d004      	beq.n	8006020 <TIM_OC1_SetConfig+0xb4>
 8006016:	f241 710e 	movw	r1, #5902	; 0x170e
 800601a:	481b      	ldr	r0, [pc, #108]	; (8006088 <TIM_OC1_SetConfig+0x11c>)
 800601c:	f7fc f9ef 	bl	80023fe <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006028:	d008      	beq.n	800603c <TIM_OC1_SetConfig+0xd0>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d004      	beq.n	800603c <TIM_OC1_SetConfig+0xd0>
 8006032:	f241 710f 	movw	r1, #5903	; 0x170f
 8006036:	4814      	ldr	r0, [pc, #80]	; (8006088 <TIM_OC1_SetConfig+0x11c>)
 8006038:	f7fc f9e1 	bl	80023fe <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006042:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800604a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	621a      	str	r2, [r3, #32]
}
 800607a:	bf00      	nop
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	40012c00 	.word	0x40012c00
 8006088:	08009768 	.word	0x08009768

0800608c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	f023 0210 	bic.w	r2, r3, #16
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f023 0320 	bic.w	r3, r3, #32
 80060d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a31      	ldr	r2, [pc, #196]	; (80061ac <TIM_OC2_SetConfig+0x120>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d11a      	bne.n	8006122 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d008      	beq.n	8006106 <TIM_OC2_SetConfig+0x7a>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d004      	beq.n	8006106 <TIM_OC2_SetConfig+0x7a>
 80060fc:	f241 714c 	movw	r1, #5964	; 0x174c
 8006100:	482b      	ldr	r0, [pc, #172]	; (80061b0 <TIM_OC2_SetConfig+0x124>)
 8006102:	f7fc f97c 	bl	80023fe <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800610c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	4313      	orrs	r3, r2
 8006118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006120:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a21      	ldr	r2, [pc, #132]	; (80061ac <TIM_OC2_SetConfig+0x120>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d12f      	bne.n	800618a <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006132:	d008      	beq.n	8006146 <TIM_OC2_SetConfig+0xba>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d004      	beq.n	8006146 <TIM_OC2_SetConfig+0xba>
 800613c:	f241 715a 	movw	r1, #5978	; 0x175a
 8006140:	481b      	ldr	r0, [pc, #108]	; (80061b0 <TIM_OC2_SetConfig+0x124>)
 8006142:	f7fc f95c 	bl	80023fe <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614e:	d008      	beq.n	8006162 <TIM_OC2_SetConfig+0xd6>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <TIM_OC2_SetConfig+0xd6>
 8006158:	f241 715b 	movw	r1, #5979	; 0x175b
 800615c:	4814      	ldr	r0, [pc, #80]	; (80061b0 <TIM_OC2_SetConfig+0x124>)
 800615e:	f7fc f94e 	bl	80023fe <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	4313      	orrs	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	621a      	str	r2, [r3, #32]
}
 80061a4:	bf00      	nop
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40012c00 	.word	0x40012c00
 80061b0:	08009768 	.word	0x08009768

080061b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0303 	bic.w	r3, r3, #3
 80061ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a31      	ldr	r2, [pc, #196]	; (80062d4 <TIM_OC3_SetConfig+0x120>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d11a      	bne.n	8006248 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d008      	beq.n	800622c <TIM_OC3_SetConfig+0x78>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	2b08      	cmp	r3, #8
 8006220:	d004      	beq.n	800622c <TIM_OC3_SetConfig+0x78>
 8006222:	f241 7197 	movw	r1, #6039	; 0x1797
 8006226:	482c      	ldr	r0, [pc, #176]	; (80062d8 <TIM_OC3_SetConfig+0x124>)
 8006228:	f7fc f8e9 	bl	80023fe <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006246:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <TIM_OC3_SetConfig+0x120>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d12f      	bne.n	80062b0 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006258:	d008      	beq.n	800626c <TIM_OC3_SetConfig+0xb8>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d004      	beq.n	800626c <TIM_OC3_SetConfig+0xb8>
 8006262:	f241 71a4 	movw	r1, #6052	; 0x17a4
 8006266:	481c      	ldr	r0, [pc, #112]	; (80062d8 <TIM_OC3_SetConfig+0x124>)
 8006268:	f7fc f8c9 	bl	80023fe <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006274:	d008      	beq.n	8006288 <TIM_OC3_SetConfig+0xd4>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <TIM_OC3_SetConfig+0xd4>
 800627e:	f241 71a5 	movw	r1, #6053	; 0x17a5
 8006282:	4815      	ldr	r0, [pc, #84]	; (80062d8 <TIM_OC3_SetConfig+0x124>)
 8006284:	f7fc f8bb 	bl	80023fe <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800628e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	011b      	lsls	r3, r3, #4
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	08009768 	.word	0x08009768

080062dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	031b      	lsls	r3, r3, #12
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4313      	orrs	r3, r2
 8006332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a16      	ldr	r2, [pc, #88]	; (8006390 <TIM_OC4_SetConfig+0xb4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d117      	bne.n	800636c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006344:	d008      	beq.n	8006358 <TIM_OC4_SetConfig+0x7c>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d004      	beq.n	8006358 <TIM_OC4_SetConfig+0x7c>
 800634e:	f241 71e3 	movw	r1, #6115	; 0x17e3
 8006352:	4810      	ldr	r0, [pc, #64]	; (8006394 <TIM_OC4_SetConfig+0xb8>)
 8006354:	f7fc f853 	bl	80023fe <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800635e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	019b      	lsls	r3, r3, #6
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	621a      	str	r2, [r3, #32]
}
 8006386:	bf00      	nop
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	40012c00 	.word	0x40012c00
 8006394:	08009768 	.word	0x08009768

08006398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	f023 0201 	bic.w	r2, r3, #1
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	011b      	lsls	r3, r3, #4
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f023 030a 	bic.w	r3, r3, #10
 80063d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	621a      	str	r2, [r3, #32]
}
 80063ea:	bf00      	nop
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bc80      	pop	{r7}
 80063f2:	4770      	bx	lr

080063f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	f023 0210 	bic.w	r2, r3, #16
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800641e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	031b      	lsls	r3, r3, #12
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006430:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	621a      	str	r2, [r3, #32]
}
 8006448:	bf00      	nop
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr

08006452 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006452:	b480      	push	{r7}
 8006454:	b085      	sub	sp, #20
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4313      	orrs	r3, r2
 8006470:	f043 0307 	orr.w	r3, r3, #7
 8006474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	609a      	str	r2, [r3, #8]
}
 800647c:	bf00      	nop
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr

08006486 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006486:	b480      	push	{r7}
 8006488:	b087      	sub	sp, #28
 800648a:	af00      	add	r7, sp, #0
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	60b9      	str	r1, [r7, #8]
 8006490:	607a      	str	r2, [r7, #4]
 8006492:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	021a      	lsls	r2, r3, #8
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	431a      	orrs	r2, r3
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	609a      	str	r2, [r3, #8]
}
 80064ba:	bf00      	nop
 80064bc:	371c      	adds	r7, #28
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr

080064c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4a22      	ldr	r2, [pc, #136]	; (800655c <TIM_CCxChannelCmd+0x98>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d010      	beq.n	80064fa <TIM_CCxChannelCmd+0x36>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064de:	d00c      	beq.n	80064fa <TIM_CCxChannelCmd+0x36>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4a1f      	ldr	r2, [pc, #124]	; (8006560 <TIM_CCxChannelCmd+0x9c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d008      	beq.n	80064fa <TIM_CCxChannelCmd+0x36>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4a1e      	ldr	r2, [pc, #120]	; (8006564 <TIM_CCxChannelCmd+0xa0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d004      	beq.n	80064fa <TIM_CCxChannelCmd+0x36>
 80064f0:	f641 11c9 	movw	r1, #6601	; 0x19c9
 80064f4:	481c      	ldr	r0, [pc, #112]	; (8006568 <TIM_CCxChannelCmd+0xa4>)
 80064f6:	f7fb ff82 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d010      	beq.n	8006522 <TIM_CCxChannelCmd+0x5e>
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2b04      	cmp	r3, #4
 8006504:	d00d      	beq.n	8006522 <TIM_CCxChannelCmd+0x5e>
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b08      	cmp	r3, #8
 800650a:	d00a      	beq.n	8006522 <TIM_CCxChannelCmd+0x5e>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b0c      	cmp	r3, #12
 8006510:	d007      	beq.n	8006522 <TIM_CCxChannelCmd+0x5e>
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b3c      	cmp	r3, #60	; 0x3c
 8006516:	d004      	beq.n	8006522 <TIM_CCxChannelCmd+0x5e>
 8006518:	f641 11ca 	movw	r1, #6602	; 0x19ca
 800651c:	4812      	ldr	r0, [pc, #72]	; (8006568 <TIM_CCxChannelCmd+0xa4>)
 800651e:	f7fb ff6e 	bl	80023fe <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	2201      	movs	r2, #1
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a1a      	ldr	r2, [r3, #32]
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	43db      	mvns	r3, r3
 8006538:	401a      	ands	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a1a      	ldr	r2, [r3, #32]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	f003 031f 	and.w	r3, r3, #31
 8006548:	6879      	ldr	r1, [r7, #4]
 800654a:	fa01 f303 	lsl.w	r3, r1, r3
 800654e:	431a      	orrs	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	621a      	str	r2, [r3, #32]
}
 8006554:	bf00      	nop
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	40012c00 	.word	0x40012c00
 8006560:	40000400 	.word	0x40000400
 8006564:	40000800 	.word	0x40000800
 8006568:	08009768 	.word	0x08009768

0800656c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a1b      	ldr	r2, [pc, #108]	; (80065e4 <TIM_ResetCallback+0x78>)
 8006578:	679a      	str	r2, [r3, #120]	; 0x78
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a1a      	ldr	r2, [pc, #104]	; (80065e8 <TIM_ResetCallback+0x7c>)
 800657e:	67da      	str	r2, [r3, #124]	; 0x7c
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a1a      	ldr	r2, [pc, #104]	; (80065ec <TIM_ResetCallback+0x80>)
 8006584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a19      	ldr	r2, [pc, #100]	; (80065f0 <TIM_ResetCallback+0x84>)
 800658c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a18      	ldr	r2, [pc, #96]	; (80065f4 <TIM_ResetCallback+0x88>)
 8006594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a17      	ldr	r2, [pc, #92]	; (80065f8 <TIM_ResetCallback+0x8c>)
 800659c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a16      	ldr	r2, [pc, #88]	; (80065fc <TIM_ResetCallback+0x90>)
 80065a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a15      	ldr	r2, [pc, #84]	; (8006600 <TIM_ResetCallback+0x94>)
 80065ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a14      	ldr	r2, [pc, #80]	; (8006604 <TIM_ResetCallback+0x98>)
 80065b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a13      	ldr	r2, [pc, #76]	; (8006608 <TIM_ResetCallback+0x9c>)
 80065bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a12      	ldr	r2, [pc, #72]	; (800660c <TIM_ResetCallback+0xa0>)
 80065c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a11      	ldr	r2, [pc, #68]	; (8006610 <TIM_ResetCallback+0xa4>)
 80065cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a10      	ldr	r2, [pc, #64]	; (8006614 <TIM_ResetCallback+0xa8>)
 80065d4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc80      	pop	{r7}
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	080023a1 	.word	0x080023a1
 80065e8:	08005e05 	.word	0x08005e05
 80065ec:	08005e71 	.word	0x08005e71
 80065f0:	08005e83 	.word	0x08005e83
 80065f4:	08005e29 	.word	0x08005e29
 80065f8:	08005e3b 	.word	0x08005e3b
 80065fc:	08005e17 	.word	0x08005e17
 8006600:	08005e4d 	.word	0x08005e4d
 8006604:	08005e5f 	.word	0x08005e5f
 8006608:	08005e95 	.word	0x08005e95
 800660c:	080068d1 	.word	0x080068d1
 8006610:	080068e3 	.word	0x080068e3
 8006614:	080068f5 	.word	0x080068f5

08006618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a43      	ldr	r2, [pc, #268]	; (8006734 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d013      	beq.n	8006654 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006634:	d00e      	beq.n	8006654 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a3f      	ldr	r2, [pc, #252]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d009      	beq.n	8006654 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a3d      	ldr	r2, [pc, #244]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d004      	beq.n	8006654 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800664a:	f240 6164 	movw	r1, #1636	; 0x664
 800664e:	483c      	ldr	r0, [pc, #240]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006650:	f7fb fed5 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d020      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b10      	cmp	r3, #16
 8006662:	d01c      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b20      	cmp	r3, #32
 800666a:	d018      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b30      	cmp	r3, #48	; 0x30
 8006672:	d014      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b40      	cmp	r3, #64	; 0x40
 800667a:	d010      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b50      	cmp	r3, #80	; 0x50
 8006682:	d00c      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b60      	cmp	r3, #96	; 0x60
 800668a:	d008      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b70      	cmp	r3, #112	; 0x70
 8006692:	d004      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006694:	f240 6165 	movw	r1, #1637	; 0x665
 8006698:	4829      	ldr	r0, [pc, #164]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800669a:	f7fb feb0 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b80      	cmp	r3, #128	; 0x80
 80066a4:	d008      	beq.n	80066b8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d004      	beq.n	80066b8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80066ae:	f240 6166 	movw	r1, #1638	; 0x666
 80066b2:	4823      	ldr	r0, [pc, #140]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80066b4:	f7fb fea3 	bl	80023fe <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d101      	bne.n	80066c6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80066c2:	2302      	movs	r3, #2
 80066c4:	e032      	b.n	800672c <HAL_TIMEx_MasterConfigSynchronization+0x114>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2202      	movs	r2, #2
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066fe:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	4313      	orrs	r3, r2
 8006708:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	40012c00 	.word	0x40012c00
 8006738:	40000400 	.word	0x40000400
 800673c:	40000800 	.word	0x40000800
 8006740:	080097a0 	.word	0x080097a0

08006744 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a5c      	ldr	r2, [pc, #368]	; (80068c8 <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d004      	beq.n	8006766 <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 800675c:	f240 619e 	movw	r1, #1694	; 0x69e
 8006760:	485a      	ldr	r0, [pc, #360]	; (80068cc <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006762:	f7fb fe4c 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676e:	d008      	beq.n	8006782 <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d004      	beq.n	8006782 <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 8006778:	f240 619f 	movw	r1, #1695	; 0x69f
 800677c:	4853      	ldr	r0, [pc, #332]	; (80068cc <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800677e:	f7fb fe3e 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800678a:	d008      	beq.n	800679e <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d004      	beq.n	800679e <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8006794:	f44f 61d4 	mov.w	r1, #1696	; 0x6a0
 8006798:	484c      	ldr	r0, [pc, #304]	; (80068cc <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800679a:	f7fb fe30 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d013      	beq.n	80067ce <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ae:	d00e      	beq.n	80067ce <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067b8:	d009      	beq.n	80067ce <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c2:	d004      	beq.n	80067ce <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 80067c4:	f240 61a1 	movw	r1, #1697	; 0x6a1
 80067c8:	4840      	ldr	r0, [pc, #256]	; (80068cc <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80067ca:	f7fb fe18 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	2bff      	cmp	r3, #255	; 0xff
 80067d4:	d904      	bls.n	80067e0 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 80067d6:	f240 61a2 	movw	r1, #1698	; 0x6a2
 80067da:	483c      	ldr	r0, [pc, #240]	; (80068cc <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80067dc:	f7fb fe0f 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e8:	d008      	beq.n	80067fc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d004      	beq.n	80067fc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80067f2:	f240 61a3 	movw	r1, #1699	; 0x6a3
 80067f6:	4835      	ldr	r0, [pc, #212]	; (80068cc <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80067f8:	f7fb fe01 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d009      	beq.n	8006818 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800680c:	d004      	beq.n	8006818 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 800680e:	f240 61a4 	movw	r1, #1700	; 0x6a4
 8006812:	482e      	ldr	r0, [pc, #184]	; (80068cc <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006814:	f7fb fdf3 	bl	80023fe <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006820:	d008      	beq.n	8006834 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d004      	beq.n	8006834 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800682a:	f240 61a5 	movw	r1, #1701	; 0x6a5
 800682e:	4827      	ldr	r0, [pc, #156]	; (80068cc <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006830:	f7fb fde5 	bl	80023fe <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800683a:	2b01      	cmp	r3, #1
 800683c:	d101      	bne.n	8006842 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 800683e:	2302      	movs	r3, #2
 8006840:	e03d      	b.n	80068be <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	40012c00 	.word	0x40012c00
 80068cc:	080097a0 	.word	0x080097a0

080068d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr

080068e2 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr

080068f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	bc80      	pop	{r7}
 8006904:	4770      	bx	lr
	...

08006908 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800690e:	f3ef 8305 	mrs	r3, IPSR
 8006912:	60bb      	str	r3, [r7, #8]
  return(result);
 8006914:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10f      	bne.n	800693a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800691a:	f3ef 8310 	mrs	r3, PRIMASK
 800691e:	607b      	str	r3, [r7, #4]
  return(result);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d109      	bne.n	800693a <osKernelInitialize+0x32>
 8006926:	4b10      	ldr	r3, [pc, #64]	; (8006968 <osKernelInitialize+0x60>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d109      	bne.n	8006942 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800692e:	f3ef 8311 	mrs	r3, BASEPRI
 8006932:	603b      	str	r3, [r7, #0]
  return(result);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800693a:	f06f 0305 	mvn.w	r3, #5
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	e00c      	b.n	800695c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006942:	4b09      	ldr	r3, [pc, #36]	; (8006968 <osKernelInitialize+0x60>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d105      	bne.n	8006956 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800694a:	4b07      	ldr	r3, [pc, #28]	; (8006968 <osKernelInitialize+0x60>)
 800694c:	2201      	movs	r2, #1
 800694e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	e002      	b.n	800695c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800695a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800695c:	68fb      	ldr	r3, [r7, #12]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr
 8006968:	20000a80 	.word	0x20000a80

0800696c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006972:	f3ef 8305 	mrs	r3, IPSR
 8006976:	60bb      	str	r3, [r7, #8]
  return(result);
 8006978:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10f      	bne.n	800699e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800697e:	f3ef 8310 	mrs	r3, PRIMASK
 8006982:	607b      	str	r3, [r7, #4]
  return(result);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d109      	bne.n	800699e <osKernelStart+0x32>
 800698a:	4b11      	ldr	r3, [pc, #68]	; (80069d0 <osKernelStart+0x64>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b02      	cmp	r3, #2
 8006990:	d109      	bne.n	80069a6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006992:	f3ef 8311 	mrs	r3, BASEPRI
 8006996:	603b      	str	r3, [r7, #0]
  return(result);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800699e:	f06f 0305 	mvn.w	r3, #5
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	e00e      	b.n	80069c4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80069a6:	4b0a      	ldr	r3, [pc, #40]	; (80069d0 <osKernelStart+0x64>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d107      	bne.n	80069be <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80069ae:	4b08      	ldr	r3, [pc, #32]	; (80069d0 <osKernelStart+0x64>)
 80069b0:	2202      	movs	r2, #2
 80069b2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80069b4:	f001 f8d2 	bl	8007b5c <vTaskStartScheduler>
      stat = osOK;
 80069b8:	2300      	movs	r3, #0
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	e002      	b.n	80069c4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80069be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80069c4:	68fb      	ldr	r3, [r7, #12]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	20000a80 	.word	0x20000a80

080069d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b092      	sub	sp, #72	; 0x48
 80069d8:	af04      	add	r7, sp, #16
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80069e0:	2300      	movs	r3, #0
 80069e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069e4:	f3ef 8305 	mrs	r3, IPSR
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f040 8094 	bne.w	8006b1a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069f2:	f3ef 8310 	mrs	r3, PRIMASK
 80069f6:	623b      	str	r3, [r7, #32]
  return(result);
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f040 808d 	bne.w	8006b1a <osThreadNew+0x146>
 8006a00:	4b48      	ldr	r3, [pc, #288]	; (8006b24 <osThreadNew+0x150>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d106      	bne.n	8006a16 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a08:	f3ef 8311 	mrs	r3, BASEPRI
 8006a0c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f040 8082 	bne.w	8006b1a <osThreadNew+0x146>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d07e      	beq.n	8006b1a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006a1c:	2380      	movs	r3, #128	; 0x80
 8006a1e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006a20:	2318      	movs	r3, #24
 8006a22:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006a24:	2300      	movs	r3, #0
 8006a26:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006a28:	f107 031b 	add.w	r3, r7, #27
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a32:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d045      	beq.n	8006ac6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <osThreadNew+0x74>
        name = attr->name;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d008      	beq.n	8006a6e <osThreadNew+0x9a>
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	2b38      	cmp	r3, #56	; 0x38
 8006a60:	d805      	bhi.n	8006a6e <osThreadNew+0x9a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <osThreadNew+0x9e>
        return (NULL);
 8006a6e:	2300      	movs	r3, #0
 8006a70:	e054      	b.n	8006b1c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	089b      	lsrs	r3, r3, #2
 8006a80:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00e      	beq.n	8006aa8 <osThreadNew+0xd4>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	2ba7      	cmp	r3, #167	; 0xa7
 8006a90:	d90a      	bls.n	8006aa8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d006      	beq.n	8006aa8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <osThreadNew+0xd4>
        mem = 1;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa6:	e010      	b.n	8006aca <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10c      	bne.n	8006aca <osThreadNew+0xf6>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d108      	bne.n	8006aca <osThreadNew+0xf6>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d104      	bne.n	8006aca <osThreadNew+0xf6>
          mem = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac4:	e001      	b.n	8006aca <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d110      	bne.n	8006af2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ad8:	9202      	str	r2, [sp, #8]
 8006ada:	9301      	str	r3, [sp, #4]
 8006adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ae4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 fde2 	bl	80076b0 <xTaskCreateStatic>
 8006aec:	4603      	mov	r3, r0
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	e013      	b.n	8006b1a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d110      	bne.n	8006b1a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	f107 0314 	add.w	r3, r7, #20
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 fe2c 	bl	8007768 <xTaskCreate>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d001      	beq.n	8006b1a <osThreadNew+0x146>
          hTask = NULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006b1a:	697b      	ldr	r3, [r7, #20]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3738      	adds	r7, #56	; 0x38
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20000a80 	.word	0x20000a80

08006b28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4a06      	ldr	r2, [pc, #24]	; (8006b50 <vApplicationGetIdleTaskMemory+0x28>)
 8006b38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	4a05      	ldr	r2, [pc, #20]	; (8006b54 <vApplicationGetIdleTaskMemory+0x2c>)
 8006b3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2280      	movs	r2, #128	; 0x80
 8006b44:	601a      	str	r2, [r3, #0]
}
 8006b46:	bf00      	nop
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bc80      	pop	{r7}
 8006b4e:	4770      	bx	lr
 8006b50:	20000a84 	.word	0x20000a84
 8006b54:	20000b2c 	.word	0x20000b2c

08006b58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4a06      	ldr	r2, [pc, #24]	; (8006b80 <vApplicationGetTimerTaskMemory+0x28>)
 8006b68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	4a05      	ldr	r2, [pc, #20]	; (8006b84 <vApplicationGetTimerTaskMemory+0x2c>)
 8006b6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2280      	movs	r2, #128	; 0x80
 8006b74:	601a      	str	r2, [r3, #0]
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bc80      	pop	{r7}
 8006b7e:	4770      	bx	lr
 8006b80:	20000d2c 	.word	0x20000d2c
 8006b84:	20000dd4 	.word	0x20000dd4

08006b88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f103 0208 	add.w	r2, r3, #8
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ba0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f103 0208 	add.w	r2, r3, #8
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f103 0208 	add.w	r2, r3, #8
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc80      	pop	{r7}
 8006bc4:	4770      	bx	lr

08006bc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr

08006bde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bde:	b480      	push	{r7}
 8006be0:	b085      	sub	sp, #20
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	601a      	str	r2, [r3, #0]
}
 8006c1a:	bf00      	nop
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bc80      	pop	{r7}
 8006c22:	4770      	bx	lr

08006c24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c3a:	d103      	bne.n	8006c44 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	e00c      	b.n	8006c5e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	3308      	adds	r3, #8
 8006c48:	60fb      	str	r3, [r7, #12]
 8006c4a:	e002      	b.n	8006c52 <vListInsert+0x2e>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d2f6      	bcs.n	8006c4c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	601a      	str	r2, [r3, #0]
}
 8006c8a:	bf00      	nop
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bc80      	pop	{r7}
 8006c92:	4770      	bx	lr

08006c94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	6892      	ldr	r2, [r2, #8]
 8006caa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6852      	ldr	r2, [r2, #4]
 8006cb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d103      	bne.n	8006cc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	1e5a      	subs	r2, r3, #1
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr
	...

08006ce8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10a      	bne.n	8006d12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006d12:	f002 f8eb 	bl	8008eec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d22:	fb01 f303 	mul.w	r3, r1, r3
 8006d26:	441a      	add	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d42:	3b01      	subs	r3, #1
 8006d44:	68f9      	ldr	r1, [r7, #12]
 8006d46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d48:	fb01 f303 	mul.w	r3, r1, r3
 8006d4c:	441a      	add	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	22ff      	movs	r2, #255	; 0xff
 8006d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	22ff      	movs	r2, #255	; 0xff
 8006d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d114      	bne.n	8006d92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01a      	beq.n	8006da6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	3310      	adds	r3, #16
 8006d74:	4618      	mov	r0, r3
 8006d76:	f001 f99d 	bl	80080b4 <xTaskRemoveFromEventList>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d012      	beq.n	8006da6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d80:	4b0c      	ldr	r3, [pc, #48]	; (8006db4 <xQueueGenericReset+0xcc>)
 8006d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	e009      	b.n	8006da6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3310      	adds	r3, #16
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff fef6 	bl	8006b88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3324      	adds	r3, #36	; 0x24
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff fef1 	bl	8006b88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006da6:	f002 f8d1 	bl	8008f4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006daa:	2301      	movs	r3, #1
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	e000ed04 	.word	0xe000ed04

08006db8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08e      	sub	sp, #56	; 0x38
 8006dbc:	af02      	add	r7, sp, #8
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10a      	bne.n	8006de2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006dde:	bf00      	nop
 8006de0:	e7fe      	b.n	8006de0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <xQueueGenericCreateStatic+0x52>
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <xQueueGenericCreateStatic+0x56>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <xQueueGenericCreateStatic+0x58>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10a      	bne.n	8006e2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	623b      	str	r3, [r7, #32]
}
 8006e26:	bf00      	nop
 8006e28:	e7fe      	b.n	8006e28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d102      	bne.n	8006e36 <xQueueGenericCreateStatic+0x7e>
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <xQueueGenericCreateStatic+0x82>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <xQueueGenericCreateStatic+0x84>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10a      	bne.n	8006e56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	61fb      	str	r3, [r7, #28]
}
 8006e52:	bf00      	nop
 8006e54:	e7fe      	b.n	8006e54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e56:	2350      	movs	r3, #80	; 0x50
 8006e58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	2b50      	cmp	r3, #80	; 0x50
 8006e5e:	d00a      	beq.n	8006e76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	61bb      	str	r3, [r7, #24]
}
 8006e72:	bf00      	nop
 8006e74:	e7fe      	b.n	8006e74 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00d      	beq.n	8006e9c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e88:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	4613      	mov	r3, r2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	68b9      	ldr	r1, [r7, #8]
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 f805 	bl	8006ea6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3730      	adds	r7, #48	; 0x30
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	607a      	str	r2, [r7, #4]
 8006eb2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d103      	bne.n	8006ec2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	e002      	b.n	8006ec8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	69b8      	ldr	r0, [r7, #24]
 8006ed8:	f7ff ff06 	bl	8006ce8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	78fa      	ldrb	r2, [r7, #3]
 8006ee0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ee4:	bf00      	nop
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08e      	sub	sp, #56	; 0x38
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006efa:	2300      	movs	r3, #0
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10a      	bne.n	8006f1e <xQueueGenericSend+0x32>
	__asm volatile
 8006f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f1a:	bf00      	nop
 8006f1c:	e7fe      	b.n	8006f1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d103      	bne.n	8006f2c <xQueueGenericSend+0x40>
 8006f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <xQueueGenericSend+0x44>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <xQueueGenericSend+0x46>
 8006f30:	2300      	movs	r3, #0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10a      	bne.n	8006f4c <xQueueGenericSend+0x60>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f48:	bf00      	nop
 8006f4a:	e7fe      	b.n	8006f4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d103      	bne.n	8006f5a <xQueueGenericSend+0x6e>
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d101      	bne.n	8006f5e <xQueueGenericSend+0x72>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <xQueueGenericSend+0x74>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <xQueueGenericSend+0x8e>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	623b      	str	r3, [r7, #32]
}
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f7a:	f001 fa61 	bl	8008440 <xTaskGetSchedulerState>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d102      	bne.n	8006f8a <xQueueGenericSend+0x9e>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <xQueueGenericSend+0xa2>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <xQueueGenericSend+0xa4>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <xQueueGenericSend+0xbe>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	61fb      	str	r3, [r7, #28]
}
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006faa:	f001 ff9f 	bl	8008eec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d302      	bcc.n	8006fc0 <xQueueGenericSend+0xd4>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d129      	bne.n	8007014 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	68b9      	ldr	r1, [r7, #8]
 8006fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fc6:	f000 fa07 	bl	80073d8 <prvCopyDataToQueue>
 8006fca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d010      	beq.n	8006ff6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	3324      	adds	r3, #36	; 0x24
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f001 f86b 	bl	80080b4 <xTaskRemoveFromEventList>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d013      	beq.n	800700c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006fe4:	4b3f      	ldr	r3, [pc, #252]	; (80070e4 <xQueueGenericSend+0x1f8>)
 8006fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	e00a      	b.n	800700c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d007      	beq.n	800700c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ffc:	4b39      	ldr	r3, [pc, #228]	; (80070e4 <xQueueGenericSend+0x1f8>)
 8006ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800700c:	f001 ff9e 	bl	8008f4c <vPortExitCritical>
				return pdPASS;
 8007010:	2301      	movs	r3, #1
 8007012:	e063      	b.n	80070dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d103      	bne.n	8007022 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800701a:	f001 ff97 	bl	8008f4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800701e:	2300      	movs	r3, #0
 8007020:	e05c      	b.n	80070dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007024:	2b00      	cmp	r3, #0
 8007026:	d106      	bne.n	8007036 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007028:	f107 0314 	add.w	r3, r7, #20
 800702c:	4618      	mov	r0, r3
 800702e:	f001 f8a5 	bl	800817c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007032:	2301      	movs	r3, #1
 8007034:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007036:	f001 ff89 	bl	8008f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800703a:	f000 fdff 	bl	8007c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800703e:	f001 ff55 	bl	8008eec <vPortEnterCritical>
 8007042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007044:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007048:	b25b      	sxtb	r3, r3
 800704a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800704e:	d103      	bne.n	8007058 <xQueueGenericSend+0x16c>
 8007050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800705e:	b25b      	sxtb	r3, r3
 8007060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007064:	d103      	bne.n	800706e <xQueueGenericSend+0x182>
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800706e:	f001 ff6d 	bl	8008f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007072:	1d3a      	adds	r2, r7, #4
 8007074:	f107 0314 	add.w	r3, r7, #20
 8007078:	4611      	mov	r1, r2
 800707a:	4618      	mov	r0, r3
 800707c:	f001 f894 	bl	80081a8 <xTaskCheckForTimeOut>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d124      	bne.n	80070d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007088:	f000 fa9e 	bl	80075c8 <prvIsQueueFull>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d018      	beq.n	80070c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	3310      	adds	r3, #16
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	4611      	mov	r1, r2
 800709a:	4618      	mov	r0, r3
 800709c:	f000 ffba 	bl	8008014 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80070a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070a2:	f000 fa29 	bl	80074f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80070a6:	f000 fdd7 	bl	8007c58 <xTaskResumeAll>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f47f af7c 	bne.w	8006faa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80070b2:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <xQueueGenericSend+0x1f8>)
 80070b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	e772      	b.n	8006faa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80070c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070c6:	f000 fa17 	bl	80074f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070ca:	f000 fdc5 	bl	8007c58 <xTaskResumeAll>
 80070ce:	e76c      	b.n	8006faa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80070d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070d2:	f000 fa11 	bl	80074f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070d6:	f000 fdbf 	bl	8007c58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80070da:	2300      	movs	r3, #0
		}
	}
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3738      	adds	r7, #56	; 0x38
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	e000ed04 	.word	0xe000ed04

080070e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08e      	sub	sp, #56	; 0x38
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
 80070f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10a      	bne.n	8007116 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d103      	bne.n	8007124 <xQueueGenericSendFromISR+0x3c>
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <xQueueGenericSendFromISR+0x40>
 8007124:	2301      	movs	r3, #1
 8007126:	e000      	b.n	800712a <xQueueGenericSendFromISR+0x42>
 8007128:	2300      	movs	r3, #0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	623b      	str	r3, [r7, #32]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2b02      	cmp	r3, #2
 8007148:	d103      	bne.n	8007152 <xQueueGenericSendFromISR+0x6a>
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714e:	2b01      	cmp	r3, #1
 8007150:	d101      	bne.n	8007156 <xQueueGenericSendFromISR+0x6e>
 8007152:	2301      	movs	r3, #1
 8007154:	e000      	b.n	8007158 <xQueueGenericSendFromISR+0x70>
 8007156:	2300      	movs	r3, #0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10a      	bne.n	8007172 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	61fb      	str	r3, [r7, #28]
}
 800716e:	bf00      	nop
 8007170:	e7fe      	b.n	8007170 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007172:	f001 ff7d 	bl	8009070 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007176:	f3ef 8211 	mrs	r2, BASEPRI
 800717a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	61ba      	str	r2, [r7, #24]
 800718c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800718e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007190:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719a:	429a      	cmp	r2, r3
 800719c:	d302      	bcc.n	80071a4 <xQueueGenericSendFromISR+0xbc>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d12c      	bne.n	80071fe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	68b9      	ldr	r1, [r7, #8]
 80071b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071b4:	f000 f910 	bl	80073d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80071b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80071bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071c0:	d112      	bne.n	80071e8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d016      	beq.n	80071f8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	3324      	adds	r3, #36	; 0x24
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 ff70 	bl	80080b4 <xTaskRemoveFromEventList>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00e      	beq.n	80071f8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00b      	beq.n	80071f8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	e007      	b.n	80071f8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80071e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071ec:	3301      	adds	r3, #1
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	b25a      	sxtb	r2, r3
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80071f8:	2301      	movs	r3, #1
 80071fa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80071fc:	e001      	b.n	8007202 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071fe:	2300      	movs	r3, #0
 8007200:	637b      	str	r3, [r7, #52]	; 0x34
 8007202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007204:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800720c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800720e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007210:	4618      	mov	r0, r3
 8007212:	3738      	adds	r7, #56	; 0x38
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08c      	sub	sp, #48	; 0x30
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007224:	2300      	movs	r3, #0
 8007226:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10a      	bne.n	8007248 <xQueueReceive+0x30>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	623b      	str	r3, [r7, #32]
}
 8007244:	bf00      	nop
 8007246:	e7fe      	b.n	8007246 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d103      	bne.n	8007256 <xQueueReceive+0x3e>
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <xQueueReceive+0x42>
 8007256:	2301      	movs	r3, #1
 8007258:	e000      	b.n	800725c <xQueueReceive+0x44>
 800725a:	2300      	movs	r3, #0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <xQueueReceive+0x5e>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	61fb      	str	r3, [r7, #28]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007276:	f001 f8e3 	bl	8008440 <xTaskGetSchedulerState>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d102      	bne.n	8007286 <xQueueReceive+0x6e>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <xQueueReceive+0x72>
 8007286:	2301      	movs	r3, #1
 8007288:	e000      	b.n	800728c <xQueueReceive+0x74>
 800728a:	2300      	movs	r3, #0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10a      	bne.n	80072a6 <xQueueReceive+0x8e>
	__asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	61bb      	str	r3, [r7, #24]
}
 80072a2:	bf00      	nop
 80072a4:	e7fe      	b.n	80072a4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80072a6:	f001 fe21 	bl	8008eec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d01f      	beq.n	80072f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80072b6:	68b9      	ldr	r1, [r7, #8]
 80072b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072ba:	f000 f8f7 	bl	80074ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	1e5a      	subs	r2, r3, #1
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00f      	beq.n	80072ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	3310      	adds	r3, #16
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 feee 	bl	80080b4 <xTaskRemoveFromEventList>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d007      	beq.n	80072ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072de:	4b3d      	ldr	r3, [pc, #244]	; (80073d4 <xQueueReceive+0x1bc>)
 80072e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072ee:	f001 fe2d 	bl	8008f4c <vPortExitCritical>
				return pdPASS;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e069      	b.n	80073ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d103      	bne.n	8007304 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072fc:	f001 fe26 	bl	8008f4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007300:	2300      	movs	r3, #0
 8007302:	e062      	b.n	80073ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	2b00      	cmp	r3, #0
 8007308:	d106      	bne.n	8007318 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800730a:	f107 0310 	add.w	r3, r7, #16
 800730e:	4618      	mov	r0, r3
 8007310:	f000 ff34 	bl	800817c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007314:	2301      	movs	r3, #1
 8007316:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007318:	f001 fe18 	bl	8008f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800731c:	f000 fc8e 	bl	8007c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007320:	f001 fde4 	bl	8008eec <vPortEnterCritical>
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800732a:	b25b      	sxtb	r3, r3
 800732c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007330:	d103      	bne.n	800733a <xQueueReceive+0x122>
 8007332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007334:	2200      	movs	r2, #0
 8007336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007340:	b25b      	sxtb	r3, r3
 8007342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007346:	d103      	bne.n	8007350 <xQueueReceive+0x138>
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007350:	f001 fdfc 	bl	8008f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007354:	1d3a      	adds	r2, r7, #4
 8007356:	f107 0310 	add.w	r3, r7, #16
 800735a:	4611      	mov	r1, r2
 800735c:	4618      	mov	r0, r3
 800735e:	f000 ff23 	bl	80081a8 <xTaskCheckForTimeOut>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d123      	bne.n	80073b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800736a:	f000 f917 	bl	800759c <prvIsQueueEmpty>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d017      	beq.n	80073a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	3324      	adds	r3, #36	; 0x24
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	4611      	mov	r1, r2
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fe49 	bl	8008014 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007384:	f000 f8b8 	bl	80074f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007388:	f000 fc66 	bl	8007c58 <xTaskResumeAll>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d189      	bne.n	80072a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007392:	4b10      	ldr	r3, [pc, #64]	; (80073d4 <xQueueReceive+0x1bc>)
 8007394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	e780      	b.n	80072a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80073a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073a6:	f000 f8a7 	bl	80074f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073aa:	f000 fc55 	bl	8007c58 <xTaskResumeAll>
 80073ae:	e77a      	b.n	80072a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80073b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073b2:	f000 f8a1 	bl	80074f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073b6:	f000 fc4f 	bl	8007c58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073bc:	f000 f8ee 	bl	800759c <prvIsQueueEmpty>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f43f af6f 	beq.w	80072a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3730      	adds	r7, #48	; 0x30
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	e000ed04 	.word	0xe000ed04

080073d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10d      	bne.n	8007412 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d14d      	bne.n	800749a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	4618      	mov	r0, r3
 8007404:	f001 f83a 	bl	800847c <xTaskPriorityDisinherit>
 8007408:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	605a      	str	r2, [r3, #4]
 8007410:	e043      	b.n	800749a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d119      	bne.n	800744c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6898      	ldr	r0, [r3, #8]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007420:	461a      	mov	r2, r3
 8007422:	68b9      	ldr	r1, [r7, #8]
 8007424:	f002 f848 	bl	80094b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	441a      	add	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689a      	ldr	r2, [r3, #8]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	429a      	cmp	r2, r3
 8007440:	d32b      	bcc.n	800749a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	609a      	str	r2, [r3, #8]
 800744a:	e026      	b.n	800749a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	68d8      	ldr	r0, [r3, #12]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007454:	461a      	mov	r2, r3
 8007456:	68b9      	ldr	r1, [r7, #8]
 8007458:	f002 f82e 	bl	80094b8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	68da      	ldr	r2, [r3, #12]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007464:	425b      	negs	r3, r3
 8007466:	441a      	add	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	429a      	cmp	r2, r3
 8007476:	d207      	bcs.n	8007488 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	425b      	negs	r3, r3
 8007482:	441a      	add	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b02      	cmp	r3, #2
 800748c:	d105      	bne.n	800749a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	3b01      	subs	r3, #1
 8007498:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80074a2:	697b      	ldr	r3, [r7, #20]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d018      	beq.n	80074f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68da      	ldr	r2, [r3, #12]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	441a      	add	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68da      	ldr	r2, [r3, #12]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d303      	bcc.n	80074e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68d9      	ldr	r1, [r3, #12]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e8:	461a      	mov	r2, r3
 80074ea:	6838      	ldr	r0, [r7, #0]
 80074ec:	f001 ffe4 	bl	80094b8 <memcpy>
	}
}
 80074f0:	bf00      	nop
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007500:	f001 fcf4 	bl	8008eec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800750a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800750c:	e011      	b.n	8007532 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	2b00      	cmp	r3, #0
 8007514:	d012      	beq.n	800753c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3324      	adds	r3, #36	; 0x24
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fdca 	bl	80080b4 <xTaskRemoveFromEventList>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007526:	f000 fea1 	bl	800826c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	3b01      	subs	r3, #1
 800752e:	b2db      	uxtb	r3, r3
 8007530:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007536:	2b00      	cmp	r3, #0
 8007538:	dce9      	bgt.n	800750e <prvUnlockQueue+0x16>
 800753a:	e000      	b.n	800753e <prvUnlockQueue+0x46>
					break;
 800753c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	22ff      	movs	r2, #255	; 0xff
 8007542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007546:	f001 fd01 	bl	8008f4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800754a:	f001 fccf 	bl	8008eec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007554:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007556:	e011      	b.n	800757c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d012      	beq.n	8007586 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3310      	adds	r3, #16
 8007564:	4618      	mov	r0, r3
 8007566:	f000 fda5 	bl	80080b4 <xTaskRemoveFromEventList>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007570:	f000 fe7c 	bl	800826c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	3b01      	subs	r3, #1
 8007578:	b2db      	uxtb	r3, r3
 800757a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800757c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007580:	2b00      	cmp	r3, #0
 8007582:	dce9      	bgt.n	8007558 <prvUnlockQueue+0x60>
 8007584:	e000      	b.n	8007588 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007586:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	22ff      	movs	r2, #255	; 0xff
 800758c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007590:	f001 fcdc 	bl	8008f4c <vPortExitCritical>
}
 8007594:	bf00      	nop
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075a4:	f001 fca2 	bl	8008eec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d102      	bne.n	80075b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80075b0:	2301      	movs	r3, #1
 80075b2:	60fb      	str	r3, [r7, #12]
 80075b4:	e001      	b.n	80075ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80075b6:	2300      	movs	r3, #0
 80075b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075ba:	f001 fcc7 	bl	8008f4c <vPortExitCritical>

	return xReturn;
 80075be:	68fb      	ldr	r3, [r7, #12]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075d0:	f001 fc8c 	bl	8008eec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075dc:	429a      	cmp	r2, r3
 80075de:	d102      	bne.n	80075e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075e0:	2301      	movs	r3, #1
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	e001      	b.n	80075ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075ea:	f001 fcaf 	bl	8008f4c <vPortExitCritical>

	return xReturn;
 80075ee:	68fb      	ldr	r3, [r7, #12]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
 8007606:	e014      	b.n	8007632 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007608:	4a0e      	ldr	r2, [pc, #56]	; (8007644 <vQueueAddToRegistry+0x4c>)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10b      	bne.n	800762c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007614:	490b      	ldr	r1, [pc, #44]	; (8007644 <vQueueAddToRegistry+0x4c>)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800761e:	4a09      	ldr	r2, [pc, #36]	; (8007644 <vQueueAddToRegistry+0x4c>)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	4413      	add	r3, r2
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800762a:	e006      	b.n	800763a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3301      	adds	r3, #1
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b07      	cmp	r3, #7
 8007636:	d9e7      	bls.n	8007608 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	bc80      	pop	{r7}
 8007642:	4770      	bx	lr
 8007644:	20000fd4 	.word	0x20000fd4

08007648 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007658:	f001 fc48 	bl	8008eec <vPortEnterCritical>
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007662:	b25b      	sxtb	r3, r3
 8007664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007668:	d103      	bne.n	8007672 <vQueueWaitForMessageRestricted+0x2a>
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007678:	b25b      	sxtb	r3, r3
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800767e:	d103      	bne.n	8007688 <vQueueWaitForMessageRestricted+0x40>
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007688:	f001 fc60 	bl	8008f4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007690:	2b00      	cmp	r3, #0
 8007692:	d106      	bne.n	80076a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	3324      	adds	r3, #36	; 0x24
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	68b9      	ldr	r1, [r7, #8]
 800769c:	4618      	mov	r0, r3
 800769e:	f000 fcdd 	bl	800805c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80076a2:	6978      	ldr	r0, [r7, #20]
 80076a4:	f7ff ff28 	bl	80074f8 <prvUnlockQueue>
	}
 80076a8:	bf00      	nop
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08e      	sub	sp, #56	; 0x38
 80076b4:	af04      	add	r7, sp, #16
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80076be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10a      	bne.n	80076da <xTaskCreateStatic+0x2a>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	623b      	str	r3, [r7, #32]
}
 80076d6:	bf00      	nop
 80076d8:	e7fe      	b.n	80076d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80076da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10a      	bne.n	80076f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	61fb      	str	r3, [r7, #28]
}
 80076f2:	bf00      	nop
 80076f4:	e7fe      	b.n	80076f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076f6:	23a8      	movs	r3, #168	; 0xa8
 80076f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	2ba8      	cmp	r3, #168	; 0xa8
 80076fe:	d00a      	beq.n	8007716 <xTaskCreateStatic+0x66>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	61bb      	str	r3, [r7, #24]
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01e      	beq.n	800775a <xTaskCreateStatic+0xaa>
 800771c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771e:	2b00      	cmp	r3, #0
 8007720:	d01b      	beq.n	800775a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007724:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800772a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	2202      	movs	r2, #2
 8007730:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007734:	2300      	movs	r3, #0
 8007736:	9303      	str	r3, [sp, #12]
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	9302      	str	r3, [sp, #8]
 800773c:	f107 0314 	add.w	r3, r7, #20
 8007740:	9301      	str	r3, [sp, #4]
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 f851 	bl	80077f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007752:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007754:	f000 f8ec 	bl	8007930 <prvAddNewTaskToReadyList>
 8007758:	e001      	b.n	800775e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800775a:	2300      	movs	r3, #0
 800775c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800775e:	697b      	ldr	r3, [r7, #20]
	}
 8007760:	4618      	mov	r0, r3
 8007762:	3728      	adds	r7, #40	; 0x28
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007768:	b580      	push	{r7, lr}
 800776a:	b08c      	sub	sp, #48	; 0x30
 800776c:	af04      	add	r7, sp, #16
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	4613      	mov	r3, r2
 8007776:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007778:	88fb      	ldrh	r3, [r7, #6]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4618      	mov	r0, r3
 800777e:	f001 fcb5 	bl	80090ec <pvPortMalloc>
 8007782:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00e      	beq.n	80077a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800778a:	20a8      	movs	r0, #168	; 0xa8
 800778c:	f001 fcae 	bl	80090ec <pvPortMalloc>
 8007790:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	631a      	str	r2, [r3, #48]	; 0x30
 800779e:	e005      	b.n	80077ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80077a0:	6978      	ldr	r0, [r7, #20]
 80077a2:	f001 fcb5 	bl	8009110 <vPortFree>
 80077a6:	e001      	b.n	80077ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80077a8:	2300      	movs	r3, #0
 80077aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d017      	beq.n	80077e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80077ba:	88fa      	ldrh	r2, [r7, #6]
 80077bc:	2300      	movs	r3, #0
 80077be:	9303      	str	r3, [sp, #12]
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	9302      	str	r3, [sp, #8]
 80077c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c6:	9301      	str	r3, [sp, #4]
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	68b9      	ldr	r1, [r7, #8]
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 f80f 	bl	80077f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077d6:	69f8      	ldr	r0, [r7, #28]
 80077d8:	f000 f8aa 	bl	8007930 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077dc:	2301      	movs	r3, #1
 80077de:	61bb      	str	r3, [r7, #24]
 80077e0:	e002      	b.n	80077e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077e8:	69bb      	ldr	r3, [r7, #24]
	}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3720      	adds	r7, #32
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	461a      	mov	r2, r3
 800780c:	21a5      	movs	r1, #165	; 0xa5
 800780e:	f001 fd75 	bl	80092fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800781c:	3b01      	subs	r3, #1
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	f023 0307 	bic.w	r3, r3, #7
 800782a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00a      	beq.n	800784c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	617b      	str	r3, [r7, #20]
}
 8007848:	bf00      	nop
 800784a:	e7fe      	b.n	800784a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800784c:	2300      	movs	r3, #0
 800784e:	61fb      	str	r3, [r7, #28]
 8007850:	e012      	b.n	8007878 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	4413      	add	r3, r2
 8007858:	7819      	ldrb	r1, [r3, #0]
 800785a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	4413      	add	r3, r2
 8007860:	3334      	adds	r3, #52	; 0x34
 8007862:	460a      	mov	r2, r1
 8007864:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	4413      	add	r3, r2
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d006      	beq.n	8007880 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	3301      	adds	r3, #1
 8007876:	61fb      	str	r3, [r7, #28]
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	2b0f      	cmp	r3, #15
 800787c:	d9e9      	bls.n	8007852 <prvInitialiseNewTask+0x5e>
 800787e:	e000      	b.n	8007882 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007880:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	2b37      	cmp	r3, #55	; 0x37
 800788e:	d901      	bls.n	8007894 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007890:	2337      	movs	r3, #55	; 0x37
 8007892:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007898:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800789e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80078a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a2:	2200      	movs	r2, #0
 80078a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	3304      	adds	r3, #4
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7ff f98b 	bl	8006bc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	3318      	adds	r3, #24
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff f986 	bl	8006bc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d2:	2200      	movs	r2, #0
 80078d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80078e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e2:	3354      	adds	r3, #84	; 0x54
 80078e4:	224c      	movs	r2, #76	; 0x4c
 80078e6:	2100      	movs	r1, #0
 80078e8:	4618      	mov	r0, r3
 80078ea:	f001 fd07 	bl	80092fc <memset>
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	4a0c      	ldr	r2, [pc, #48]	; (8007924 <prvInitialiseNewTask+0x130>)
 80078f2:	659a      	str	r2, [r3, #88]	; 0x58
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	4a0c      	ldr	r2, [pc, #48]	; (8007928 <prvInitialiseNewTask+0x134>)
 80078f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	4a0b      	ldr	r2, [pc, #44]	; (800792c <prvInitialiseNewTask+0x138>)
 80078fe:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	68f9      	ldr	r1, [r7, #12]
 8007904:	69b8      	ldr	r0, [r7, #24]
 8007906:	f001 fa01 	bl	8008d0c <pxPortInitialiseStack>
 800790a:	4602      	mov	r2, r0
 800790c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800791a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800791c:	bf00      	nop
 800791e:	3720      	adds	r7, #32
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20001604 	.word	0x20001604
 8007928:	2000166c 	.word	0x2000166c
 800792c:	200016d4 	.word	0x200016d4

08007930 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007938:	f001 fad8 	bl	8008eec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800793c:	4b2d      	ldr	r3, [pc, #180]	; (80079f4 <prvAddNewTaskToReadyList+0xc4>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3301      	adds	r3, #1
 8007942:	4a2c      	ldr	r2, [pc, #176]	; (80079f4 <prvAddNewTaskToReadyList+0xc4>)
 8007944:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007946:	4b2c      	ldr	r3, [pc, #176]	; (80079f8 <prvAddNewTaskToReadyList+0xc8>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d109      	bne.n	8007962 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800794e:	4a2a      	ldr	r2, [pc, #168]	; (80079f8 <prvAddNewTaskToReadyList+0xc8>)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007954:	4b27      	ldr	r3, [pc, #156]	; (80079f4 <prvAddNewTaskToReadyList+0xc4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d110      	bne.n	800797e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800795c:	f000 fcaa 	bl	80082b4 <prvInitialiseTaskLists>
 8007960:	e00d      	b.n	800797e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007962:	4b26      	ldr	r3, [pc, #152]	; (80079fc <prvAddNewTaskToReadyList+0xcc>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d109      	bne.n	800797e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800796a:	4b23      	ldr	r3, [pc, #140]	; (80079f8 <prvAddNewTaskToReadyList+0xc8>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007974:	429a      	cmp	r2, r3
 8007976:	d802      	bhi.n	800797e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007978:	4a1f      	ldr	r2, [pc, #124]	; (80079f8 <prvAddNewTaskToReadyList+0xc8>)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800797e:	4b20      	ldr	r3, [pc, #128]	; (8007a00 <prvAddNewTaskToReadyList+0xd0>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3301      	adds	r3, #1
 8007984:	4a1e      	ldr	r2, [pc, #120]	; (8007a00 <prvAddNewTaskToReadyList+0xd0>)
 8007986:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007988:	4b1d      	ldr	r3, [pc, #116]	; (8007a00 <prvAddNewTaskToReadyList+0xd0>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007994:	4b1b      	ldr	r3, [pc, #108]	; (8007a04 <prvAddNewTaskToReadyList+0xd4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	429a      	cmp	r2, r3
 800799a:	d903      	bls.n	80079a4 <prvAddNewTaskToReadyList+0x74>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	4a18      	ldr	r2, [pc, #96]	; (8007a04 <prvAddNewTaskToReadyList+0xd4>)
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4a15      	ldr	r2, [pc, #84]	; (8007a08 <prvAddNewTaskToReadyList+0xd8>)
 80079b2:	441a      	add	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3304      	adds	r3, #4
 80079b8:	4619      	mov	r1, r3
 80079ba:	4610      	mov	r0, r2
 80079bc:	f7ff f90f 	bl	8006bde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80079c0:	f001 fac4 	bl	8008f4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80079c4:	4b0d      	ldr	r3, [pc, #52]	; (80079fc <prvAddNewTaskToReadyList+0xcc>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00e      	beq.n	80079ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80079cc:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <prvAddNewTaskToReadyList+0xc8>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d207      	bcs.n	80079ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80079da:	4b0c      	ldr	r3, [pc, #48]	; (8007a0c <prvAddNewTaskToReadyList+0xdc>)
 80079dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079ea:	bf00      	nop
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	200014e8 	.word	0x200014e8
 80079f8:	20001014 	.word	0x20001014
 80079fc:	200014f4 	.word	0x200014f4
 8007a00:	20001504 	.word	0x20001504
 8007a04:	200014f0 	.word	0x200014f0
 8007a08:	20001018 	.word	0x20001018
 8007a0c:	e000ed04 	.word	0xe000ed04

08007a10 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007a18:	f001 fa68 	bl	8008eec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d102      	bne.n	8007a28 <vTaskDelete+0x18>
 8007a22:	4b2c      	ldr	r3, [pc, #176]	; (8007ad4 <vTaskDelete+0xc4>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	e000      	b.n	8007a2a <vTaskDelete+0x1a>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7ff f92f 	bl	8006c94 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d004      	beq.n	8007a48 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3318      	adds	r3, #24
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff f926 	bl	8006c94 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007a48:	4b23      	ldr	r3, [pc, #140]	; (8007ad8 <vTaskDelete+0xc8>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	4a22      	ldr	r2, [pc, #136]	; (8007ad8 <vTaskDelete+0xc8>)
 8007a50:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007a52:	4b20      	ldr	r3, [pc, #128]	; (8007ad4 <vTaskDelete+0xc4>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d10b      	bne.n	8007a74 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	4619      	mov	r1, r3
 8007a62:	481e      	ldr	r0, [pc, #120]	; (8007adc <vTaskDelete+0xcc>)
 8007a64:	f7ff f8bb 	bl	8006bde <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007a68:	4b1d      	ldr	r3, [pc, #116]	; (8007ae0 <vTaskDelete+0xd0>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ae0 <vTaskDelete+0xd0>)
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	e009      	b.n	8007a88 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007a74:	4b1b      	ldr	r3, [pc, #108]	; (8007ae4 <vTaskDelete+0xd4>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	4a1a      	ldr	r2, [pc, #104]	; (8007ae4 <vTaskDelete+0xd4>)
 8007a7c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 fc86 	bl	8008390 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007a84:	f000 fcb8 	bl	80083f8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007a88:	f001 fa60 	bl	8008f4c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007a8c:	4b16      	ldr	r3, [pc, #88]	; (8007ae8 <vTaskDelete+0xd8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01b      	beq.n	8007acc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8007a94:	4b0f      	ldr	r3, [pc, #60]	; (8007ad4 <vTaskDelete+0xc4>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d116      	bne.n	8007acc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007a9e:	4b13      	ldr	r3, [pc, #76]	; (8007aec <vTaskDelete+0xdc>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00a      	beq.n	8007abc <vTaskDelete+0xac>
	__asm volatile
 8007aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	60bb      	str	r3, [r7, #8]
}
 8007ab8:	bf00      	nop
 8007aba:	e7fe      	b.n	8007aba <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007abc:	4b0c      	ldr	r3, [pc, #48]	; (8007af0 <vTaskDelete+0xe0>)
 8007abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007acc:	bf00      	nop
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	20001014 	.word	0x20001014
 8007ad8:	20001504 	.word	0x20001504
 8007adc:	200014bc 	.word	0x200014bc
 8007ae0:	200014d0 	.word	0x200014d0
 8007ae4:	200014e8 	.word	0x200014e8
 8007ae8:	200014f4 	.word	0x200014f4
 8007aec:	20001510 	.word	0x20001510
 8007af0:	e000ed04 	.word	0xe000ed04

08007af4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d017      	beq.n	8007b36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b06:	4b13      	ldr	r3, [pc, #76]	; (8007b54 <vTaskDelay+0x60>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <vTaskDelay+0x30>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	60bb      	str	r3, [r7, #8]
}
 8007b20:	bf00      	nop
 8007b22:	e7fe      	b.n	8007b22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b24:	f000 f88a 	bl	8007c3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b28:	2100      	movs	r1, #0
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fd14 	bl	8008558 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b30:	f000 f892 	bl	8007c58 <xTaskResumeAll>
 8007b34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d107      	bne.n	8007b4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007b3c:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <vTaskDelay+0x64>)
 8007b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b4c:	bf00      	nop
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20001510 	.word	0x20001510
 8007b58:	e000ed04 	.word	0xe000ed04

08007b5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08a      	sub	sp, #40	; 0x28
 8007b60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b62:	2300      	movs	r3, #0
 8007b64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b66:	2300      	movs	r3, #0
 8007b68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b6a:	463a      	mov	r2, r7
 8007b6c:	1d39      	adds	r1, r7, #4
 8007b6e:	f107 0308 	add.w	r3, r7, #8
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fe ffd8 	bl	8006b28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	9202      	str	r2, [sp, #8]
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	2300      	movs	r3, #0
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	2300      	movs	r3, #0
 8007b88:	460a      	mov	r2, r1
 8007b8a:	4924      	ldr	r1, [pc, #144]	; (8007c1c <vTaskStartScheduler+0xc0>)
 8007b8c:	4824      	ldr	r0, [pc, #144]	; (8007c20 <vTaskStartScheduler+0xc4>)
 8007b8e:	f7ff fd8f 	bl	80076b0 <xTaskCreateStatic>
 8007b92:	4603      	mov	r3, r0
 8007b94:	4a23      	ldr	r2, [pc, #140]	; (8007c24 <vTaskStartScheduler+0xc8>)
 8007b96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b98:	4b22      	ldr	r3, [pc, #136]	; (8007c24 <vTaskStartScheduler+0xc8>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	e001      	b.n	8007baa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d102      	bne.n	8007bb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007bb0:	f000 fd26 	bl	8008600 <xTimerCreateTimerTask>
 8007bb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d11b      	bne.n	8007bf4 <vTaskStartScheduler+0x98>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	613b      	str	r3, [r7, #16]
}
 8007bce:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007bd0:	4b15      	ldr	r3, [pc, #84]	; (8007c28 <vTaskStartScheduler+0xcc>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3354      	adds	r3, #84	; 0x54
 8007bd6:	4a15      	ldr	r2, [pc, #84]	; (8007c2c <vTaskStartScheduler+0xd0>)
 8007bd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007bda:	4b15      	ldr	r3, [pc, #84]	; (8007c30 <vTaskStartScheduler+0xd4>)
 8007bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007be0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007be2:	4b14      	ldr	r3, [pc, #80]	; (8007c34 <vTaskStartScheduler+0xd8>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007be8:	4b13      	ldr	r3, [pc, #76]	; (8007c38 <vTaskStartScheduler+0xdc>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007bee:	f001 f90b 	bl	8008e08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007bf2:	e00e      	b.n	8007c12 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bfa:	d10a      	bne.n	8007c12 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	60fb      	str	r3, [r7, #12]
}
 8007c0e:	bf00      	nop
 8007c10:	e7fe      	b.n	8007c10 <vTaskStartScheduler+0xb4>
}
 8007c12:	bf00      	nop
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	080097dc 	.word	0x080097dc
 8007c20:	08008285 	.word	0x08008285
 8007c24:	2000150c 	.word	0x2000150c
 8007c28:	20001014 	.word	0x20001014
 8007c2c:	2000005c 	.word	0x2000005c
 8007c30:	20001508 	.word	0x20001508
 8007c34:	200014f4 	.word	0x200014f4
 8007c38:	200014ec 	.word	0x200014ec

08007c3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007c40:	4b04      	ldr	r3, [pc, #16]	; (8007c54 <vTaskSuspendAll+0x18>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3301      	adds	r3, #1
 8007c46:	4a03      	ldr	r2, [pc, #12]	; (8007c54 <vTaskSuspendAll+0x18>)
 8007c48:	6013      	str	r3, [r2, #0]
}
 8007c4a:	bf00      	nop
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bc80      	pop	{r7}
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	20001510 	.word	0x20001510

08007c58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c66:	4b42      	ldr	r3, [pc, #264]	; (8007d70 <xTaskResumeAll+0x118>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10a      	bne.n	8007c84 <xTaskResumeAll+0x2c>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	603b      	str	r3, [r7, #0]
}
 8007c80:	bf00      	nop
 8007c82:	e7fe      	b.n	8007c82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c84:	f001 f932 	bl	8008eec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c88:	4b39      	ldr	r3, [pc, #228]	; (8007d70 <xTaskResumeAll+0x118>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	4a38      	ldr	r2, [pc, #224]	; (8007d70 <xTaskResumeAll+0x118>)
 8007c90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c92:	4b37      	ldr	r3, [pc, #220]	; (8007d70 <xTaskResumeAll+0x118>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d162      	bne.n	8007d60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c9a:	4b36      	ldr	r3, [pc, #216]	; (8007d74 <xTaskResumeAll+0x11c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d05e      	beq.n	8007d60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ca2:	e02f      	b.n	8007d04 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007ca4:	4b34      	ldr	r3, [pc, #208]	; (8007d78 <xTaskResumeAll+0x120>)
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3318      	adds	r3, #24
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fe ffef 	bl	8006c94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe ffea 	bl	8006c94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc4:	4b2d      	ldr	r3, [pc, #180]	; (8007d7c <xTaskResumeAll+0x124>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d903      	bls.n	8007cd4 <xTaskResumeAll+0x7c>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd0:	4a2a      	ldr	r2, [pc, #168]	; (8007d7c <xTaskResumeAll+0x124>)
 8007cd2:	6013      	str	r3, [r2, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd8:	4613      	mov	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4a27      	ldr	r2, [pc, #156]	; (8007d80 <xTaskResumeAll+0x128>)
 8007ce2:	441a      	add	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	4619      	mov	r1, r3
 8007cea:	4610      	mov	r0, r2
 8007cec:	f7fe ff77 	bl	8006bde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf4:	4b23      	ldr	r3, [pc, #140]	; (8007d84 <xTaskResumeAll+0x12c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d302      	bcc.n	8007d04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007cfe:	4b22      	ldr	r3, [pc, #136]	; (8007d88 <xTaskResumeAll+0x130>)
 8007d00:	2201      	movs	r2, #1
 8007d02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d04:	4b1c      	ldr	r3, [pc, #112]	; (8007d78 <xTaskResumeAll+0x120>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1cb      	bne.n	8007ca4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d12:	f000 fb71 	bl	80083f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007d16:	4b1d      	ldr	r3, [pc, #116]	; (8007d8c <xTaskResumeAll+0x134>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d010      	beq.n	8007d44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d22:	f000 f845 	bl	8007db0 <xTaskIncrementTick>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007d2c:	4b16      	ldr	r3, [pc, #88]	; (8007d88 <xTaskResumeAll+0x130>)
 8007d2e:	2201      	movs	r2, #1
 8007d30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	3b01      	subs	r3, #1
 8007d36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1f1      	bne.n	8007d22 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007d3e:	4b13      	ldr	r3, [pc, #76]	; (8007d8c <xTaskResumeAll+0x134>)
 8007d40:	2200      	movs	r2, #0
 8007d42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d44:	4b10      	ldr	r3, [pc, #64]	; (8007d88 <xTaskResumeAll+0x130>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d009      	beq.n	8007d60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d50:	4b0f      	ldr	r3, [pc, #60]	; (8007d90 <xTaskResumeAll+0x138>)
 8007d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d60:	f001 f8f4 	bl	8008f4c <vPortExitCritical>

	return xAlreadyYielded;
 8007d64:	68bb      	ldr	r3, [r7, #8]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20001510 	.word	0x20001510
 8007d74:	200014e8 	.word	0x200014e8
 8007d78:	200014a8 	.word	0x200014a8
 8007d7c:	200014f0 	.word	0x200014f0
 8007d80:	20001018 	.word	0x20001018
 8007d84:	20001014 	.word	0x20001014
 8007d88:	200014fc 	.word	0x200014fc
 8007d8c:	200014f8 	.word	0x200014f8
 8007d90:	e000ed04 	.word	0xe000ed04

08007d94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d9a:	4b04      	ldr	r3, [pc, #16]	; (8007dac <xTaskGetTickCount+0x18>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007da0:	687b      	ldr	r3, [r7, #4]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bc80      	pop	{r7}
 8007daa:	4770      	bx	lr
 8007dac:	200014ec 	.word	0x200014ec

08007db0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007db6:	2300      	movs	r3, #0
 8007db8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dba:	4b51      	ldr	r3, [pc, #324]	; (8007f00 <xTaskIncrementTick+0x150>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f040 808e 	bne.w	8007ee0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007dc4:	4b4f      	ldr	r3, [pc, #316]	; (8007f04 <xTaskIncrementTick+0x154>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007dcc:	4a4d      	ldr	r2, [pc, #308]	; (8007f04 <xTaskIncrementTick+0x154>)
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d120      	bne.n	8007e1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007dd8:	4b4b      	ldr	r3, [pc, #300]	; (8007f08 <xTaskIncrementTick+0x158>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00a      	beq.n	8007df8 <xTaskIncrementTick+0x48>
	__asm volatile
 8007de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de6:	f383 8811 	msr	BASEPRI, r3
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	603b      	str	r3, [r7, #0]
}
 8007df4:	bf00      	nop
 8007df6:	e7fe      	b.n	8007df6 <xTaskIncrementTick+0x46>
 8007df8:	4b43      	ldr	r3, [pc, #268]	; (8007f08 <xTaskIncrementTick+0x158>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	4b43      	ldr	r3, [pc, #268]	; (8007f0c <xTaskIncrementTick+0x15c>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a41      	ldr	r2, [pc, #260]	; (8007f08 <xTaskIncrementTick+0x158>)
 8007e04:	6013      	str	r3, [r2, #0]
 8007e06:	4a41      	ldr	r2, [pc, #260]	; (8007f0c <xTaskIncrementTick+0x15c>)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	4b40      	ldr	r3, [pc, #256]	; (8007f10 <xTaskIncrementTick+0x160>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3301      	adds	r3, #1
 8007e12:	4a3f      	ldr	r2, [pc, #252]	; (8007f10 <xTaskIncrementTick+0x160>)
 8007e14:	6013      	str	r3, [r2, #0]
 8007e16:	f000 faef 	bl	80083f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e1a:	4b3e      	ldr	r3, [pc, #248]	; (8007f14 <xTaskIncrementTick+0x164>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d34e      	bcc.n	8007ec2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e24:	4b38      	ldr	r3, [pc, #224]	; (8007f08 <xTaskIncrementTick+0x158>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <xTaskIncrementTick+0x82>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e000      	b.n	8007e34 <xTaskIncrementTick+0x84>
 8007e32:	2300      	movs	r3, #0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d004      	beq.n	8007e42 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e38:	4b36      	ldr	r3, [pc, #216]	; (8007f14 <xTaskIncrementTick+0x164>)
 8007e3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e3e:	601a      	str	r2, [r3, #0]
					break;
 8007e40:	e03f      	b.n	8007ec2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007e42:	4b31      	ldr	r3, [pc, #196]	; (8007f08 <xTaskIncrementTick+0x158>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d203      	bcs.n	8007e62 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e5a:	4a2e      	ldr	r2, [pc, #184]	; (8007f14 <xTaskIncrementTick+0x164>)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6013      	str	r3, [r2, #0]
						break;
 8007e60:	e02f      	b.n	8007ec2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	3304      	adds	r3, #4
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fe ff14 	bl	8006c94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d004      	beq.n	8007e7e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	3318      	adds	r3, #24
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fe ff0b 	bl	8006c94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e82:	4b25      	ldr	r3, [pc, #148]	; (8007f18 <xTaskIncrementTick+0x168>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d903      	bls.n	8007e92 <xTaskIncrementTick+0xe2>
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8e:	4a22      	ldr	r2, [pc, #136]	; (8007f18 <xTaskIncrementTick+0x168>)
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e96:	4613      	mov	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4a1f      	ldr	r2, [pc, #124]	; (8007f1c <xTaskIncrementTick+0x16c>)
 8007ea0:	441a      	add	r2, r3
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	f7fe fe98 	bl	8006bde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb2:	4b1b      	ldr	r3, [pc, #108]	; (8007f20 <xTaskIncrementTick+0x170>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d3b3      	bcc.n	8007e24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ec0:	e7b0      	b.n	8007e24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ec2:	4b17      	ldr	r3, [pc, #92]	; (8007f20 <xTaskIncrementTick+0x170>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec8:	4914      	ldr	r1, [pc, #80]	; (8007f1c <xTaskIncrementTick+0x16c>)
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d907      	bls.n	8007eea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007eda:	2301      	movs	r3, #1
 8007edc:	617b      	str	r3, [r7, #20]
 8007ede:	e004      	b.n	8007eea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007ee0:	4b10      	ldr	r3, [pc, #64]	; (8007f24 <xTaskIncrementTick+0x174>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	4a0f      	ldr	r2, [pc, #60]	; (8007f24 <xTaskIncrementTick+0x174>)
 8007ee8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007eea:	4b0f      	ldr	r3, [pc, #60]	; (8007f28 <xTaskIncrementTick+0x178>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ef6:	697b      	ldr	r3, [r7, #20]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	20001510 	.word	0x20001510
 8007f04:	200014ec 	.word	0x200014ec
 8007f08:	200014a0 	.word	0x200014a0
 8007f0c:	200014a4 	.word	0x200014a4
 8007f10:	20001500 	.word	0x20001500
 8007f14:	20001508 	.word	0x20001508
 8007f18:	200014f0 	.word	0x200014f0
 8007f1c:	20001018 	.word	0x20001018
 8007f20:	20001014 	.word	0x20001014
 8007f24:	200014f8 	.word	0x200014f8
 8007f28:	200014fc 	.word	0x200014fc

08007f2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f32:	4b32      	ldr	r3, [pc, #200]	; (8007ffc <vTaskSwitchContext+0xd0>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f3a:	4b31      	ldr	r3, [pc, #196]	; (8008000 <vTaskSwitchContext+0xd4>)
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f40:	e057      	b.n	8007ff2 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 8007f42:	4b2f      	ldr	r3, [pc, #188]	; (8008000 <vTaskSwitchContext+0xd4>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007f48:	4b2e      	ldr	r3, [pc, #184]	; (8008004 <vTaskSwitchContext+0xd8>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	4b2d      	ldr	r3, [pc, #180]	; (8008004 <vTaskSwitchContext+0xd8>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d808      	bhi.n	8007f6a <vTaskSwitchContext+0x3e>
 8007f58:	4b2a      	ldr	r3, [pc, #168]	; (8008004 <vTaskSwitchContext+0xd8>)
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	4b29      	ldr	r3, [pc, #164]	; (8008004 <vTaskSwitchContext+0xd8>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3334      	adds	r3, #52	; 0x34
 8007f62:	4619      	mov	r1, r3
 8007f64:	4610      	mov	r0, r2
 8007f66:	f7fa f8c3 	bl	80020f0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007f6a:	4b27      	ldr	r3, [pc, #156]	; (8008008 <vTaskSwitchContext+0xdc>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	e010      	b.n	8007f94 <vTaskSwitchContext+0x68>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10a      	bne.n	8007f8e <vTaskSwitchContext+0x62>
	__asm volatile
 8007f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	607b      	str	r3, [r7, #4]
}
 8007f8a:	bf00      	nop
 8007f8c:	e7fe      	b.n	8007f8c <vTaskSwitchContext+0x60>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	491d      	ldr	r1, [pc, #116]	; (800800c <vTaskSwitchContext+0xe0>)
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4413      	add	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	440b      	add	r3, r1
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d0e4      	beq.n	8007f72 <vTaskSwitchContext+0x46>
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	4613      	mov	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4a16      	ldr	r2, [pc, #88]	; (800800c <vTaskSwitchContext+0xe0>)
 8007fb4:	4413      	add	r3, r2
 8007fb6:	60bb      	str	r3, [r7, #8]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	605a      	str	r2, [r3, #4]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	3308      	adds	r3, #8
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d104      	bne.n	8007fd8 <vTaskSwitchContext+0xac>
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	685a      	ldr	r2, [r3, #4]
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	605a      	str	r2, [r3, #4]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	4a09      	ldr	r2, [pc, #36]	; (8008004 <vTaskSwitchContext+0xd8>)
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	4a09      	ldr	r2, [pc, #36]	; (8008008 <vTaskSwitchContext+0xdc>)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007fe8:	4b06      	ldr	r3, [pc, #24]	; (8008004 <vTaskSwitchContext+0xd8>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3354      	adds	r3, #84	; 0x54
 8007fee:	4a08      	ldr	r2, [pc, #32]	; (8008010 <vTaskSwitchContext+0xe4>)
 8007ff0:	6013      	str	r3, [r2, #0]
}
 8007ff2:	bf00      	nop
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20001510 	.word	0x20001510
 8008000:	200014fc 	.word	0x200014fc
 8008004:	20001014 	.word	0x20001014
 8008008:	200014f0 	.word	0x200014f0
 800800c:	20001018 	.word	0x20001018
 8008010:	2000005c 	.word	0x2000005c

08008014 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10a      	bne.n	800803a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	60fb      	str	r3, [r7, #12]
}
 8008036:	bf00      	nop
 8008038:	e7fe      	b.n	8008038 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800803a:	4b07      	ldr	r3, [pc, #28]	; (8008058 <vTaskPlaceOnEventList+0x44>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3318      	adds	r3, #24
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7fe fdee 	bl	8006c24 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008048:	2101      	movs	r1, #1
 800804a:	6838      	ldr	r0, [r7, #0]
 800804c:	f000 fa84 	bl	8008558 <prvAddCurrentTaskToDelayedList>
}
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	20001014 	.word	0x20001014

0800805c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10a      	bne.n	8008084 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	617b      	str	r3, [r7, #20]
}
 8008080:	bf00      	nop
 8008082:	e7fe      	b.n	8008082 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008084:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3318      	adds	r3, #24
 800808a:	4619      	mov	r1, r3
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f7fe fda6 	bl	8006bde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800809c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800809e:	6879      	ldr	r1, [r7, #4]
 80080a0:	68b8      	ldr	r0, [r7, #8]
 80080a2:	f000 fa59 	bl	8008558 <prvAddCurrentTaskToDelayedList>
	}
 80080a6:	bf00      	nop
 80080a8:	3718      	adds	r7, #24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20001014 	.word	0x20001014

080080b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10a      	bne.n	80080e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	60fb      	str	r3, [r7, #12]
}
 80080dc:	bf00      	nop
 80080de:	e7fe      	b.n	80080de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	3318      	adds	r3, #24
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fe fdd5 	bl	8006c94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ea:	4b1e      	ldr	r3, [pc, #120]	; (8008164 <xTaskRemoveFromEventList+0xb0>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d11d      	bne.n	800812e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	3304      	adds	r3, #4
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fdcc 	bl	8006c94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008100:	4b19      	ldr	r3, [pc, #100]	; (8008168 <xTaskRemoveFromEventList+0xb4>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	429a      	cmp	r2, r3
 8008106:	d903      	bls.n	8008110 <xTaskRemoveFromEventList+0x5c>
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	4a16      	ldr	r2, [pc, #88]	; (8008168 <xTaskRemoveFromEventList+0xb4>)
 800810e:	6013      	str	r3, [r2, #0]
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008114:	4613      	mov	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4a13      	ldr	r2, [pc, #76]	; (800816c <xTaskRemoveFromEventList+0xb8>)
 800811e:	441a      	add	r2, r3
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	3304      	adds	r3, #4
 8008124:	4619      	mov	r1, r3
 8008126:	4610      	mov	r0, r2
 8008128:	f7fe fd59 	bl	8006bde <vListInsertEnd>
 800812c:	e005      	b.n	800813a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	3318      	adds	r3, #24
 8008132:	4619      	mov	r1, r3
 8008134:	480e      	ldr	r0, [pc, #56]	; (8008170 <xTaskRemoveFromEventList+0xbc>)
 8008136:	f7fe fd52 	bl	8006bde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813e:	4b0d      	ldr	r3, [pc, #52]	; (8008174 <xTaskRemoveFromEventList+0xc0>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	429a      	cmp	r2, r3
 8008146:	d905      	bls.n	8008154 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008148:	2301      	movs	r3, #1
 800814a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800814c:	4b0a      	ldr	r3, [pc, #40]	; (8008178 <xTaskRemoveFromEventList+0xc4>)
 800814e:	2201      	movs	r2, #1
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	e001      	b.n	8008158 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008154:	2300      	movs	r3, #0
 8008156:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008158:	697b      	ldr	r3, [r7, #20]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20001510 	.word	0x20001510
 8008168:	200014f0 	.word	0x200014f0
 800816c:	20001018 	.word	0x20001018
 8008170:	200014a8 	.word	0x200014a8
 8008174:	20001014 	.word	0x20001014
 8008178:	200014fc 	.word	0x200014fc

0800817c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008184:	4b06      	ldr	r3, [pc, #24]	; (80081a0 <vTaskInternalSetTimeOutState+0x24>)
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800818c:	4b05      	ldr	r3, [pc, #20]	; (80081a4 <vTaskInternalSetTimeOutState+0x28>)
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	605a      	str	r2, [r3, #4]
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	bc80      	pop	{r7}
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	20001500 	.word	0x20001500
 80081a4:	200014ec 	.word	0x200014ec

080081a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b088      	sub	sp, #32
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10a      	bne.n	80081ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	613b      	str	r3, [r7, #16]
}
 80081ca:	bf00      	nop
 80081cc:	e7fe      	b.n	80081cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10a      	bne.n	80081ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	60fb      	str	r3, [r7, #12]
}
 80081e6:	bf00      	nop
 80081e8:	e7fe      	b.n	80081e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80081ea:	f000 fe7f 	bl	8008eec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80081ee:	4b1d      	ldr	r3, [pc, #116]	; (8008264 <xTaskCheckForTimeOut+0xbc>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008206:	d102      	bne.n	800820e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008208:	2300      	movs	r3, #0
 800820a:	61fb      	str	r3, [r7, #28]
 800820c:	e023      	b.n	8008256 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	4b15      	ldr	r3, [pc, #84]	; (8008268 <xTaskCheckForTimeOut+0xc0>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	429a      	cmp	r2, r3
 8008218:	d007      	beq.n	800822a <xTaskCheckForTimeOut+0x82>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	429a      	cmp	r2, r3
 8008222:	d302      	bcc.n	800822a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008224:	2301      	movs	r3, #1
 8008226:	61fb      	str	r3, [r7, #28]
 8008228:	e015      	b.n	8008256 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	429a      	cmp	r2, r3
 8008232:	d20b      	bcs.n	800824c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	1ad2      	subs	r2, r2, r3
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7ff ff9b 	bl	800817c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008246:	2300      	movs	r3, #0
 8008248:	61fb      	str	r3, [r7, #28]
 800824a:	e004      	b.n	8008256 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008252:	2301      	movs	r3, #1
 8008254:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008256:	f000 fe79 	bl	8008f4c <vPortExitCritical>

	return xReturn;
 800825a:	69fb      	ldr	r3, [r7, #28]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3720      	adds	r7, #32
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	200014ec 	.word	0x200014ec
 8008268:	20001500 	.word	0x20001500

0800826c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800826c:	b480      	push	{r7}
 800826e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008270:	4b03      	ldr	r3, [pc, #12]	; (8008280 <vTaskMissedYield+0x14>)
 8008272:	2201      	movs	r2, #1
 8008274:	601a      	str	r2, [r3, #0]
}
 8008276:	bf00      	nop
 8008278:	46bd      	mov	sp, r7
 800827a:	bc80      	pop	{r7}
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	200014fc 	.word	0x200014fc

08008284 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800828c:	f000 f852 	bl	8008334 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008290:	4b06      	ldr	r3, [pc, #24]	; (80082ac <prvIdleTask+0x28>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d9f9      	bls.n	800828c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008298:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <prvIdleTask+0x2c>)
 800829a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082a8:	e7f0      	b.n	800828c <prvIdleTask+0x8>
 80082aa:	bf00      	nop
 80082ac:	20001018 	.word	0x20001018
 80082b0:	e000ed04 	.word	0xe000ed04

080082b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082ba:	2300      	movs	r3, #0
 80082bc:	607b      	str	r3, [r7, #4]
 80082be:	e00c      	b.n	80082da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	4613      	mov	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4a12      	ldr	r2, [pc, #72]	; (8008314 <prvInitialiseTaskLists+0x60>)
 80082cc:	4413      	add	r3, r2
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fe fc5a 	bl	8006b88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	3301      	adds	r3, #1
 80082d8:	607b      	str	r3, [r7, #4]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b37      	cmp	r3, #55	; 0x37
 80082de:	d9ef      	bls.n	80082c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082e0:	480d      	ldr	r0, [pc, #52]	; (8008318 <prvInitialiseTaskLists+0x64>)
 80082e2:	f7fe fc51 	bl	8006b88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082e6:	480d      	ldr	r0, [pc, #52]	; (800831c <prvInitialiseTaskLists+0x68>)
 80082e8:	f7fe fc4e 	bl	8006b88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082ec:	480c      	ldr	r0, [pc, #48]	; (8008320 <prvInitialiseTaskLists+0x6c>)
 80082ee:	f7fe fc4b 	bl	8006b88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082f2:	480c      	ldr	r0, [pc, #48]	; (8008324 <prvInitialiseTaskLists+0x70>)
 80082f4:	f7fe fc48 	bl	8006b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082f8:	480b      	ldr	r0, [pc, #44]	; (8008328 <prvInitialiseTaskLists+0x74>)
 80082fa:	f7fe fc45 	bl	8006b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082fe:	4b0b      	ldr	r3, [pc, #44]	; (800832c <prvInitialiseTaskLists+0x78>)
 8008300:	4a05      	ldr	r2, [pc, #20]	; (8008318 <prvInitialiseTaskLists+0x64>)
 8008302:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008304:	4b0a      	ldr	r3, [pc, #40]	; (8008330 <prvInitialiseTaskLists+0x7c>)
 8008306:	4a05      	ldr	r2, [pc, #20]	; (800831c <prvInitialiseTaskLists+0x68>)
 8008308:	601a      	str	r2, [r3, #0]
}
 800830a:	bf00      	nop
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20001018 	.word	0x20001018
 8008318:	20001478 	.word	0x20001478
 800831c:	2000148c 	.word	0x2000148c
 8008320:	200014a8 	.word	0x200014a8
 8008324:	200014bc 	.word	0x200014bc
 8008328:	200014d4 	.word	0x200014d4
 800832c:	200014a0 	.word	0x200014a0
 8008330:	200014a4 	.word	0x200014a4

08008334 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800833a:	e019      	b.n	8008370 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800833c:	f000 fdd6 	bl	8008eec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008340:	4b10      	ldr	r3, [pc, #64]	; (8008384 <prvCheckTasksWaitingTermination+0x50>)
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	3304      	adds	r3, #4
 800834c:	4618      	mov	r0, r3
 800834e:	f7fe fca1 	bl	8006c94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008352:	4b0d      	ldr	r3, [pc, #52]	; (8008388 <prvCheckTasksWaitingTermination+0x54>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3b01      	subs	r3, #1
 8008358:	4a0b      	ldr	r2, [pc, #44]	; (8008388 <prvCheckTasksWaitingTermination+0x54>)
 800835a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800835c:	4b0b      	ldr	r3, [pc, #44]	; (800838c <prvCheckTasksWaitingTermination+0x58>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3b01      	subs	r3, #1
 8008362:	4a0a      	ldr	r2, [pc, #40]	; (800838c <prvCheckTasksWaitingTermination+0x58>)
 8008364:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008366:	f000 fdf1 	bl	8008f4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f810 	bl	8008390 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008370:	4b06      	ldr	r3, [pc, #24]	; (800838c <prvCheckTasksWaitingTermination+0x58>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1e1      	bne.n	800833c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008378:	bf00      	nop
 800837a:	bf00      	nop
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	200014bc 	.word	0x200014bc
 8008388:	200014e8 	.word	0x200014e8
 800838c:	200014d0 	.word	0x200014d0

08008390 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	3354      	adds	r3, #84	; 0x54
 800839c:	4618      	mov	r0, r3
 800839e:	f000 ffe5 	bl	800936c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d108      	bne.n	80083be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 fead 	bl	8009110 <vPortFree>
				vPortFree( pxTCB );
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 feaa 	bl	8009110 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083bc:	e018      	b.n	80083f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d103      	bne.n	80083d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fea1 	bl	8009110 <vPortFree>
	}
 80083ce:	e00f      	b.n	80083f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d00a      	beq.n	80083f0 <prvDeleteTCB+0x60>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	60fb      	str	r3, [r7, #12]
}
 80083ec:	bf00      	nop
 80083ee:	e7fe      	b.n	80083ee <prvDeleteTCB+0x5e>
	}
 80083f0:	bf00      	nop
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083fe:	4b0e      	ldr	r3, [pc, #56]	; (8008438 <prvResetNextTaskUnblockTime+0x40>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <prvResetNextTaskUnblockTime+0x14>
 8008408:	2301      	movs	r3, #1
 800840a:	e000      	b.n	800840e <prvResetNextTaskUnblockTime+0x16>
 800840c:	2300      	movs	r3, #0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d004      	beq.n	800841c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008412:	4b0a      	ldr	r3, [pc, #40]	; (800843c <prvResetNextTaskUnblockTime+0x44>)
 8008414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008418:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800841a:	e008      	b.n	800842e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800841c:	4b06      	ldr	r3, [pc, #24]	; (8008438 <prvResetNextTaskUnblockTime+0x40>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	4a04      	ldr	r2, [pc, #16]	; (800843c <prvResetNextTaskUnblockTime+0x44>)
 800842c:	6013      	str	r3, [r2, #0]
}
 800842e:	bf00      	nop
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	bc80      	pop	{r7}
 8008436:	4770      	bx	lr
 8008438:	200014a0 	.word	0x200014a0
 800843c:	20001508 	.word	0x20001508

08008440 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008446:	4b0b      	ldr	r3, [pc, #44]	; (8008474 <xTaskGetSchedulerState+0x34>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d102      	bne.n	8008454 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800844e:	2301      	movs	r3, #1
 8008450:	607b      	str	r3, [r7, #4]
 8008452:	e008      	b.n	8008466 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008454:	4b08      	ldr	r3, [pc, #32]	; (8008478 <xTaskGetSchedulerState+0x38>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d102      	bne.n	8008462 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800845c:	2302      	movs	r3, #2
 800845e:	607b      	str	r3, [r7, #4]
 8008460:	e001      	b.n	8008466 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008462:	2300      	movs	r3, #0
 8008464:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008466:	687b      	ldr	r3, [r7, #4]
	}
 8008468:	4618      	mov	r0, r3
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	bc80      	pop	{r7}
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	200014f4 	.word	0x200014f4
 8008478:	20001510 	.word	0x20001510

0800847c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008488:	2300      	movs	r3, #0
 800848a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d056      	beq.n	8008540 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008492:	4b2e      	ldr	r3, [pc, #184]	; (800854c <xTaskPriorityDisinherit+0xd0>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	429a      	cmp	r2, r3
 800849a:	d00a      	beq.n	80084b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800849c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a0:	f383 8811 	msr	BASEPRI, r3
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	60fb      	str	r3, [r7, #12]
}
 80084ae:	bf00      	nop
 80084b0:	e7fe      	b.n	80084b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10a      	bne.n	80084d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	60bb      	str	r3, [r7, #8]
}
 80084cc:	bf00      	nop
 80084ce:	e7fe      	b.n	80084ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d4:	1e5a      	subs	r2, r3, #1
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d02c      	beq.n	8008540 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d128      	bne.n	8008540 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	3304      	adds	r3, #4
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe fbce 	bl	8006c94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008504:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008510:	4b0f      	ldr	r3, [pc, #60]	; (8008550 <xTaskPriorityDisinherit+0xd4>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	429a      	cmp	r2, r3
 8008516:	d903      	bls.n	8008520 <xTaskPriorityDisinherit+0xa4>
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851c:	4a0c      	ldr	r2, [pc, #48]	; (8008550 <xTaskPriorityDisinherit+0xd4>)
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008524:	4613      	mov	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4a09      	ldr	r2, [pc, #36]	; (8008554 <xTaskPriorityDisinherit+0xd8>)
 800852e:	441a      	add	r2, r3
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	3304      	adds	r3, #4
 8008534:	4619      	mov	r1, r3
 8008536:	4610      	mov	r0, r2
 8008538:	f7fe fb51 	bl	8006bde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800853c:	2301      	movs	r3, #1
 800853e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008540:	697b      	ldr	r3, [r7, #20]
	}
 8008542:	4618      	mov	r0, r3
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20001014 	.word	0x20001014
 8008550:	200014f0 	.word	0x200014f0
 8008554:	20001018 	.word	0x20001018

08008558 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008562:	4b21      	ldr	r3, [pc, #132]	; (80085e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008568:	4b20      	ldr	r3, [pc, #128]	; (80085ec <prvAddCurrentTaskToDelayedList+0x94>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3304      	adds	r3, #4
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe fb90 	bl	8006c94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800857a:	d10a      	bne.n	8008592 <prvAddCurrentTaskToDelayedList+0x3a>
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d007      	beq.n	8008592 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008582:	4b1a      	ldr	r3, [pc, #104]	; (80085ec <prvAddCurrentTaskToDelayedList+0x94>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3304      	adds	r3, #4
 8008588:	4619      	mov	r1, r3
 800858a:	4819      	ldr	r0, [pc, #100]	; (80085f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800858c:	f7fe fb27 	bl	8006bde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008590:	e026      	b.n	80085e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4413      	add	r3, r2
 8008598:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800859a:	4b14      	ldr	r3, [pc, #80]	; (80085ec <prvAddCurrentTaskToDelayedList+0x94>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d209      	bcs.n	80085be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085aa:	4b12      	ldr	r3, [pc, #72]	; (80085f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	4b0f      	ldr	r3, [pc, #60]	; (80085ec <prvAddCurrentTaskToDelayedList+0x94>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3304      	adds	r3, #4
 80085b4:	4619      	mov	r1, r3
 80085b6:	4610      	mov	r0, r2
 80085b8:	f7fe fb34 	bl	8006c24 <vListInsert>
}
 80085bc:	e010      	b.n	80085e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085be:	4b0e      	ldr	r3, [pc, #56]	; (80085f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	4b0a      	ldr	r3, [pc, #40]	; (80085ec <prvAddCurrentTaskToDelayedList+0x94>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3304      	adds	r3, #4
 80085c8:	4619      	mov	r1, r3
 80085ca:	4610      	mov	r0, r2
 80085cc:	f7fe fb2a 	bl	8006c24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085d0:	4b0a      	ldr	r3, [pc, #40]	; (80085fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d202      	bcs.n	80085e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80085da:	4a08      	ldr	r2, [pc, #32]	; (80085fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	6013      	str	r3, [r2, #0]
}
 80085e0:	bf00      	nop
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	200014ec 	.word	0x200014ec
 80085ec:	20001014 	.word	0x20001014
 80085f0:	200014d4 	.word	0x200014d4
 80085f4:	200014a4 	.word	0x200014a4
 80085f8:	200014a0 	.word	0x200014a0
 80085fc:	20001508 	.word	0x20001508

08008600 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08a      	sub	sp, #40	; 0x28
 8008604:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008606:	2300      	movs	r3, #0
 8008608:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800860a:	f000 fb1f 	bl	8008c4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800860e:	4b1c      	ldr	r3, [pc, #112]	; (8008680 <xTimerCreateTimerTask+0x80>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d021      	beq.n	800865a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008616:	2300      	movs	r3, #0
 8008618:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800861a:	2300      	movs	r3, #0
 800861c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800861e:	1d3a      	adds	r2, r7, #4
 8008620:	f107 0108 	add.w	r1, r7, #8
 8008624:	f107 030c 	add.w	r3, r7, #12
 8008628:	4618      	mov	r0, r3
 800862a:	f7fe fa95 	bl	8006b58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800862e:	6879      	ldr	r1, [r7, #4]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	9202      	str	r2, [sp, #8]
 8008636:	9301      	str	r3, [sp, #4]
 8008638:	2302      	movs	r3, #2
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	2300      	movs	r3, #0
 800863e:	460a      	mov	r2, r1
 8008640:	4910      	ldr	r1, [pc, #64]	; (8008684 <xTimerCreateTimerTask+0x84>)
 8008642:	4811      	ldr	r0, [pc, #68]	; (8008688 <xTimerCreateTimerTask+0x88>)
 8008644:	f7ff f834 	bl	80076b0 <xTaskCreateStatic>
 8008648:	4603      	mov	r3, r0
 800864a:	4a10      	ldr	r2, [pc, #64]	; (800868c <xTimerCreateTimerTask+0x8c>)
 800864c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800864e:	4b0f      	ldr	r3, [pc, #60]	; (800868c <xTimerCreateTimerTask+0x8c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008656:	2301      	movs	r3, #1
 8008658:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10a      	bne.n	8008676 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	613b      	str	r3, [r7, #16]
}
 8008672:	bf00      	nop
 8008674:	e7fe      	b.n	8008674 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008676:	697b      	ldr	r3, [r7, #20]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	20001544 	.word	0x20001544
 8008684:	080097e4 	.word	0x080097e4
 8008688:	08008855 	.word	0x08008855
 800868c:	20001548 	.word	0x20001548

08008690 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af02      	add	r7, sp, #8
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800869e:	2030      	movs	r0, #48	; 0x30
 80086a0:	f000 fd24 	bl	80090ec <pvPortMalloc>
 80086a4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00d      	beq.n	80086c8 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	9301      	str	r3, [sp, #4]
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 f809 	bl	80086d2 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80086c8:	697b      	ldr	r3, [r7, #20]
	}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b086      	sub	sp, #24
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	60f8      	str	r0, [r7, #12]
 80086da:	60b9      	str	r1, [r7, #8]
 80086dc:	607a      	str	r2, [r7, #4]
 80086de:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10a      	bne.n	80086fc <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80086e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	617b      	str	r3, [r7, #20]
}
 80086f8:	bf00      	nop
 80086fa:	e7fe      	b.n	80086fa <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80086fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d015      	beq.n	800872e <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008702:	f000 faa3 	bl	8008c4c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	6a3a      	ldr	r2, [r7, #32]
 8008722:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	3304      	adds	r3, #4
 8008728:	4618      	mov	r0, r3
 800872a:	f7fe fa4c 	bl	8006bc6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800872e:	bf00      	nop
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b08a      	sub	sp, #40	; 0x28
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008746:	2300      	movs	r3, #0
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10a      	bne.n	8008766 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	623b      	str	r3, [r7, #32]
}
 8008762:	bf00      	nop
 8008764:	e7fe      	b.n	8008764 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008766:	4b1a      	ldr	r3, [pc, #104]	; (80087d0 <xTimerGenericCommand+0x98>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d02a      	beq.n	80087c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2b05      	cmp	r3, #5
 800877e:	dc18      	bgt.n	80087b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008780:	f7ff fe5e 	bl	8008440 <xTaskGetSchedulerState>
 8008784:	4603      	mov	r3, r0
 8008786:	2b02      	cmp	r3, #2
 8008788:	d109      	bne.n	800879e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800878a:	4b11      	ldr	r3, [pc, #68]	; (80087d0 <xTimerGenericCommand+0x98>)
 800878c:	6818      	ldr	r0, [r3, #0]
 800878e:	f107 0110 	add.w	r1, r7, #16
 8008792:	2300      	movs	r3, #0
 8008794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008796:	f7fe fba9 	bl	8006eec <xQueueGenericSend>
 800879a:	6278      	str	r0, [r7, #36]	; 0x24
 800879c:	e012      	b.n	80087c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800879e:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <xTimerGenericCommand+0x98>)
 80087a0:	6818      	ldr	r0, [r3, #0]
 80087a2:	f107 0110 	add.w	r1, r7, #16
 80087a6:	2300      	movs	r3, #0
 80087a8:	2200      	movs	r2, #0
 80087aa:	f7fe fb9f 	bl	8006eec <xQueueGenericSend>
 80087ae:	6278      	str	r0, [r7, #36]	; 0x24
 80087b0:	e008      	b.n	80087c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80087b2:	4b07      	ldr	r3, [pc, #28]	; (80087d0 <xTimerGenericCommand+0x98>)
 80087b4:	6818      	ldr	r0, [r3, #0]
 80087b6:	f107 0110 	add.w	r1, r7, #16
 80087ba:	2300      	movs	r3, #0
 80087bc:	683a      	ldr	r2, [r7, #0]
 80087be:	f7fe fc93 	bl	80070e8 <xQueueGenericSendFromISR>
 80087c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3728      	adds	r7, #40	; 0x28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20001544 	.word	0x20001544

080087d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af02      	add	r7, sp, #8
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087de:	4b1c      	ldr	r3, [pc, #112]	; (8008850 <prvProcessExpiredTimer+0x7c>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	3304      	adds	r3, #4
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe fa51 	bl	8006c94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d122      	bne.n	8008840 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	699a      	ldr	r2, [r3, #24]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	18d1      	adds	r1, r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	6978      	ldr	r0, [r7, #20]
 8008808:	f000 f8c8 	bl	800899c <prvInsertTimerInActiveList>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d016      	beq.n	8008840 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008812:	2300      	movs	r3, #0
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	2300      	movs	r3, #0
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	2100      	movs	r1, #0
 800881c:	6978      	ldr	r0, [r7, #20]
 800881e:	f7ff ff8b 	bl	8008738 <xTimerGenericCommand>
 8008822:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10a      	bne.n	8008840 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	60fb      	str	r3, [r7, #12]
}
 800883c:	bf00      	nop
 800883e:	e7fe      	b.n	800883e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008844:	6978      	ldr	r0, [r7, #20]
 8008846:	4798      	blx	r3
}
 8008848:	bf00      	nop
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	2000153c 	.word	0x2000153c

08008854 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800885c:	f107 0308 	add.w	r3, r7, #8
 8008860:	4618      	mov	r0, r3
 8008862:	f000 f857 	bl	8008914 <prvGetNextExpireTime>
 8008866:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	4619      	mov	r1, r3
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 f803 	bl	8008878 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008872:	f000 f8d5 	bl	8008a20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008876:	e7f1      	b.n	800885c <prvTimerTask+0x8>

08008878 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008882:	f7ff f9db 	bl	8007c3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008886:	f107 0308 	add.w	r3, r7, #8
 800888a:	4618      	mov	r0, r3
 800888c:	f000 f866 	bl	800895c <prvSampleTimeNow>
 8008890:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d130      	bne.n	80088fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10a      	bne.n	80088b4 <prvProcessTimerOrBlockTask+0x3c>
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d806      	bhi.n	80088b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80088a6:	f7ff f9d7 	bl	8007c58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80088aa:	68f9      	ldr	r1, [r7, #12]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7ff ff91 	bl	80087d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80088b2:	e024      	b.n	80088fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d008      	beq.n	80088cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80088ba:	4b13      	ldr	r3, [pc, #76]	; (8008908 <prvProcessTimerOrBlockTask+0x90>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	bf0c      	ite	eq
 80088c4:	2301      	moveq	r3, #1
 80088c6:	2300      	movne	r3, #0
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80088cc:	4b0f      	ldr	r3, [pc, #60]	; (800890c <prvProcessTimerOrBlockTask+0x94>)
 80088ce:	6818      	ldr	r0, [r3, #0]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	4619      	mov	r1, r3
 80088da:	f7fe feb5 	bl	8007648 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80088de:	f7ff f9bb 	bl	8007c58 <xTaskResumeAll>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10a      	bne.n	80088fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80088e8:	4b09      	ldr	r3, [pc, #36]	; (8008910 <prvProcessTimerOrBlockTask+0x98>)
 80088ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ee:	601a      	str	r2, [r3, #0]
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	f3bf 8f6f 	isb	sy
}
 80088f8:	e001      	b.n	80088fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80088fa:	f7ff f9ad 	bl	8007c58 <xTaskResumeAll>
}
 80088fe:	bf00      	nop
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	20001540 	.word	0x20001540
 800890c:	20001544 	.word	0x20001544
 8008910:	e000ed04 	.word	0xe000ed04

08008914 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800891c:	4b0e      	ldr	r3, [pc, #56]	; (8008958 <prvGetNextExpireTime+0x44>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	bf0c      	ite	eq
 8008926:	2301      	moveq	r3, #1
 8008928:	2300      	movne	r3, #0
 800892a:	b2db      	uxtb	r3, r3
 800892c:	461a      	mov	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d105      	bne.n	8008946 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800893a:	4b07      	ldr	r3, [pc, #28]	; (8008958 <prvGetNextExpireTime+0x44>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	e001      	b.n	800894a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800894a:	68fb      	ldr	r3, [r7, #12]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	bc80      	pop	{r7}
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	2000153c 	.word	0x2000153c

0800895c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008964:	f7ff fa16 	bl	8007d94 <xTaskGetTickCount>
 8008968:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800896a:	4b0b      	ldr	r3, [pc, #44]	; (8008998 <prvSampleTimeNow+0x3c>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	429a      	cmp	r2, r3
 8008972:	d205      	bcs.n	8008980 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008974:	f000 f908 	bl	8008b88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	e002      	b.n	8008986 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008986:	4a04      	ldr	r2, [pc, #16]	; (8008998 <prvSampleTimeNow+0x3c>)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800898c:	68fb      	ldr	r3, [r7, #12]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	2000154c 	.word	0x2000154c

0800899c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
 80089a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80089aa:	2300      	movs	r3, #0
 80089ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d812      	bhi.n	80089e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	1ad2      	subs	r2, r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d302      	bcc.n	80089d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80089d0:	2301      	movs	r3, #1
 80089d2:	617b      	str	r3, [r7, #20]
 80089d4:	e01b      	b.n	8008a0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80089d6:	4b10      	ldr	r3, [pc, #64]	; (8008a18 <prvInsertTimerInActiveList+0x7c>)
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	3304      	adds	r3, #4
 80089de:	4619      	mov	r1, r3
 80089e0:	4610      	mov	r0, r2
 80089e2:	f7fe f91f 	bl	8006c24 <vListInsert>
 80089e6:	e012      	b.n	8008a0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d206      	bcs.n	80089fe <prvInsertTimerInActiveList+0x62>
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d302      	bcc.n	80089fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80089f8:	2301      	movs	r3, #1
 80089fa:	617b      	str	r3, [r7, #20]
 80089fc:	e007      	b.n	8008a0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089fe:	4b07      	ldr	r3, [pc, #28]	; (8008a1c <prvInsertTimerInActiveList+0x80>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	3304      	adds	r3, #4
 8008a06:	4619      	mov	r1, r3
 8008a08:	4610      	mov	r0, r2
 8008a0a:	f7fe f90b 	bl	8006c24 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a0e:	697b      	ldr	r3, [r7, #20]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	20001540 	.word	0x20001540
 8008a1c:	2000153c 	.word	0x2000153c

08008a20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08e      	sub	sp, #56	; 0x38
 8008a24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a26:	e09d      	b.n	8008b64 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	da18      	bge.n	8008a60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a2e:	1d3b      	adds	r3, r7, #4
 8008a30:	3304      	adds	r3, #4
 8008a32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10a      	bne.n	8008a50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3e:	f383 8811 	msr	BASEPRI, r3
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	61fb      	str	r3, [r7, #28]
}
 8008a4c:	bf00      	nop
 8008a4e:	e7fe      	b.n	8008a4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a56:	6850      	ldr	r0, [r2, #4]
 8008a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a5a:	6892      	ldr	r2, [r2, #8]
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	db7e      	blt.n	8008b64 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d004      	beq.n	8008a7c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a74:	3304      	adds	r3, #4
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe f90c 	bl	8006c94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a7c:	463b      	mov	r3, r7
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7ff ff6c 	bl	800895c <prvSampleTimeNow>
 8008a84:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2b09      	cmp	r3, #9
 8008a8a:	d86a      	bhi.n	8008b62 <prvProcessReceivedCommands+0x142>
 8008a8c:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <prvProcessReceivedCommands+0x74>)
 8008a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a92:	bf00      	nop
 8008a94:	08008abd 	.word	0x08008abd
 8008a98:	08008abd 	.word	0x08008abd
 8008a9c:	08008abd 	.word	0x08008abd
 8008aa0:	08008b65 	.word	0x08008b65
 8008aa4:	08008b19 	.word	0x08008b19
 8008aa8:	08008b51 	.word	0x08008b51
 8008aac:	08008abd 	.word	0x08008abd
 8008ab0:	08008abd 	.word	0x08008abd
 8008ab4:	08008b65 	.word	0x08008b65
 8008ab8:	08008b19 	.word	0x08008b19
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	18d1      	adds	r1, r2, r3
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aca:	f7ff ff67 	bl	800899c <prvInsertTimerInActiveList>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d047      	beq.n	8008b64 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ada:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d13f      	bne.n	8008b64 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	441a      	add	r2, r3
 8008aec:	2300      	movs	r3, #0
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	2300      	movs	r3, #0
 8008af2:	2100      	movs	r1, #0
 8008af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008af6:	f7ff fe1f 	bl	8008738 <xTimerGenericCommand>
 8008afa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d130      	bne.n	8008b64 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	61bb      	str	r3, [r7, #24]
}
 8008b14:	bf00      	nop
 8008b16:	e7fe      	b.n	8008b16 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10a      	bne.n	8008b3c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	617b      	str	r3, [r7, #20]
}
 8008b38:	bf00      	nop
 8008b3a:	e7fe      	b.n	8008b3a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3e:	699a      	ldr	r2, [r3, #24]
 8008b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b42:	18d1      	adds	r1, r2, r3
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b4a:	f7ff ff27 	bl	800899c <prvInsertTimerInActiveList>
					break;
 8008b4e:	e009      	b.n	8008b64 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d104      	bne.n	8008b64 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008b5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b5c:	f000 fad8 	bl	8009110 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b60:	e000      	b.n	8008b64 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8008b62:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b64:	4b07      	ldr	r3, [pc, #28]	; (8008b84 <prvProcessReceivedCommands+0x164>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	1d39      	adds	r1, r7, #4
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fe fb53 	bl	8007218 <xQueueReceive>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f47f af57 	bne.w	8008a28 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008b7a:	bf00      	nop
 8008b7c:	bf00      	nop
 8008b7e:	3730      	adds	r7, #48	; 0x30
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	20001544 	.word	0x20001544

08008b88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b8e:	e045      	b.n	8008c1c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b90:	4b2c      	ldr	r3, [pc, #176]	; (8008c44 <prvSwitchTimerLists+0xbc>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b9a:	4b2a      	ldr	r3, [pc, #168]	; (8008c44 <prvSwitchTimerLists+0xbc>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fe f873 	bl	8006c94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d12e      	bne.n	8008c1c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d90e      	bls.n	8008bee <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008bdc:	4b19      	ldr	r3, [pc, #100]	; (8008c44 <prvSwitchTimerLists+0xbc>)
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	3304      	adds	r3, #4
 8008be4:	4619      	mov	r1, r3
 8008be6:	4610      	mov	r0, r2
 8008be8:	f7fe f81c 	bl	8006c24 <vListInsert>
 8008bec:	e016      	b.n	8008c1c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f7ff fd9d 	bl	8008738 <xTimerGenericCommand>
 8008bfe:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10a      	bne.n	8008c1c <prvSwitchTimerLists+0x94>
	__asm volatile
 8008c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0a:	f383 8811 	msr	BASEPRI, r3
 8008c0e:	f3bf 8f6f 	isb	sy
 8008c12:	f3bf 8f4f 	dsb	sy
 8008c16:	603b      	str	r3, [r7, #0]
}
 8008c18:	bf00      	nop
 8008c1a:	e7fe      	b.n	8008c1a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c1c:	4b09      	ldr	r3, [pc, #36]	; (8008c44 <prvSwitchTimerLists+0xbc>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1b4      	bne.n	8008b90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008c26:	4b07      	ldr	r3, [pc, #28]	; (8008c44 <prvSwitchTimerLists+0xbc>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c2c:	4b06      	ldr	r3, [pc, #24]	; (8008c48 <prvSwitchTimerLists+0xc0>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a04      	ldr	r2, [pc, #16]	; (8008c44 <prvSwitchTimerLists+0xbc>)
 8008c32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c34:	4a04      	ldr	r2, [pc, #16]	; (8008c48 <prvSwitchTimerLists+0xc0>)
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	6013      	str	r3, [r2, #0]
}
 8008c3a:	bf00      	nop
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	2000153c 	.word	0x2000153c
 8008c48:	20001540 	.word	0x20001540

08008c4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c52:	f000 f94b 	bl	8008eec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c56:	4b15      	ldr	r3, [pc, #84]	; (8008cac <prvCheckForValidListAndQueue+0x60>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d120      	bne.n	8008ca0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c5e:	4814      	ldr	r0, [pc, #80]	; (8008cb0 <prvCheckForValidListAndQueue+0x64>)
 8008c60:	f7fd ff92 	bl	8006b88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c64:	4813      	ldr	r0, [pc, #76]	; (8008cb4 <prvCheckForValidListAndQueue+0x68>)
 8008c66:	f7fd ff8f 	bl	8006b88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c6a:	4b13      	ldr	r3, [pc, #76]	; (8008cb8 <prvCheckForValidListAndQueue+0x6c>)
 8008c6c:	4a10      	ldr	r2, [pc, #64]	; (8008cb0 <prvCheckForValidListAndQueue+0x64>)
 8008c6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c70:	4b12      	ldr	r3, [pc, #72]	; (8008cbc <prvCheckForValidListAndQueue+0x70>)
 8008c72:	4a10      	ldr	r2, [pc, #64]	; (8008cb4 <prvCheckForValidListAndQueue+0x68>)
 8008c74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c76:	2300      	movs	r3, #0
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	4b11      	ldr	r3, [pc, #68]	; (8008cc0 <prvCheckForValidListAndQueue+0x74>)
 8008c7c:	4a11      	ldr	r2, [pc, #68]	; (8008cc4 <prvCheckForValidListAndQueue+0x78>)
 8008c7e:	2110      	movs	r1, #16
 8008c80:	2005      	movs	r0, #5
 8008c82:	f7fe f899 	bl	8006db8 <xQueueGenericCreateStatic>
 8008c86:	4603      	mov	r3, r0
 8008c88:	4a08      	ldr	r2, [pc, #32]	; (8008cac <prvCheckForValidListAndQueue+0x60>)
 8008c8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c8c:	4b07      	ldr	r3, [pc, #28]	; (8008cac <prvCheckForValidListAndQueue+0x60>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d005      	beq.n	8008ca0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c94:	4b05      	ldr	r3, [pc, #20]	; (8008cac <prvCheckForValidListAndQueue+0x60>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	490b      	ldr	r1, [pc, #44]	; (8008cc8 <prvCheckForValidListAndQueue+0x7c>)
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fe fcac 	bl	80075f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ca0:	f000 f954 	bl	8008f4c <vPortExitCritical>
}
 8008ca4:	bf00      	nop
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	20001544 	.word	0x20001544
 8008cb0:	20001514 	.word	0x20001514
 8008cb4:	20001528 	.word	0x20001528
 8008cb8:	2000153c 	.word	0x2000153c
 8008cbc:	20001540 	.word	0x20001540
 8008cc0:	200015a0 	.word	0x200015a0
 8008cc4:	20001550 	.word	0x20001550
 8008cc8:	080097ec 	.word	0x080097ec

08008ccc <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10a      	bne.n	8008cf4 <pvTimerGetTimerID+0x28>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	60fb      	str	r3, [r7, #12]
}
 8008cf0:	bf00      	nop
 8008cf2:	e7fe      	b.n	8008cf2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008cf4:	f000 f8fa 	bl	8008eec <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	6a1b      	ldr	r3, [r3, #32]
 8008cfc:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008cfe:	f000 f925 	bl	8008f4c <vPortExitCritical>

	return pvReturn;
 8008d02:	693b      	ldr	r3, [r7, #16]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3718      	adds	r7, #24
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3b04      	subs	r3, #4
 8008d1c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	3b04      	subs	r3, #4
 8008d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f023 0201 	bic.w	r2, r3, #1
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3b04      	subs	r3, #4
 8008d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d3c:	4a08      	ldr	r2, [pc, #32]	; (8008d60 <pxPortInitialiseStack+0x54>)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3b14      	subs	r3, #20
 8008d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	3b20      	subs	r3, #32
 8008d52:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d54:	68fb      	ldr	r3, [r7, #12]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bc80      	pop	{r7}
 8008d5e:	4770      	bx	lr
 8008d60:	08008d65 	.word	0x08008d65

08008d64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d6e:	4b12      	ldr	r3, [pc, #72]	; (8008db8 <prvTaskExitError+0x54>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d76:	d00a      	beq.n	8008d8e <prvTaskExitError+0x2a>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	60fb      	str	r3, [r7, #12]
}
 8008d8a:	bf00      	nop
 8008d8c:	e7fe      	b.n	8008d8c <prvTaskExitError+0x28>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	60bb      	str	r3, [r7, #8]
}
 8008da0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008da2:	bf00      	nop
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d0fc      	beq.n	8008da4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008daa:	bf00      	nop
 8008dac:	bf00      	nop
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bc80      	pop	{r7}
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	2000000c 	.word	0x2000000c
 8008dbc:	00000000 	.word	0x00000000

08008dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008dc0:	4b07      	ldr	r3, [pc, #28]	; (8008de0 <pxCurrentTCBConst2>)
 8008dc2:	6819      	ldr	r1, [r3, #0]
 8008dc4:	6808      	ldr	r0, [r1, #0]
 8008dc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008dca:	f380 8809 	msr	PSP, r0
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f04f 0000 	mov.w	r0, #0
 8008dd6:	f380 8811 	msr	BASEPRI, r0
 8008dda:	f04e 0e0d 	orr.w	lr, lr, #13
 8008dde:	4770      	bx	lr

08008de0 <pxCurrentTCBConst2>:
 8008de0:	20001014 	.word	0x20001014
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008de4:	bf00      	nop
 8008de6:	bf00      	nop

08008de8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008de8:	4806      	ldr	r0, [pc, #24]	; (8008e04 <prvPortStartFirstTask+0x1c>)
 8008dea:	6800      	ldr	r0, [r0, #0]
 8008dec:	6800      	ldr	r0, [r0, #0]
 8008dee:	f380 8808 	msr	MSP, r0
 8008df2:	b662      	cpsie	i
 8008df4:	b661      	cpsie	f
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	df00      	svc	0
 8008e00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e02:	bf00      	nop
 8008e04:	e000ed08 	.word	0xe000ed08

08008e08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e0e:	4b32      	ldr	r3, [pc, #200]	; (8008ed8 <xPortStartScheduler+0xd0>)
 8008e10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	22ff      	movs	r2, #255	; 0xff
 8008e1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e28:	78fb      	ldrb	r3, [r7, #3]
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	4b2a      	ldr	r3, [pc, #168]	; (8008edc <xPortStartScheduler+0xd4>)
 8008e34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e36:	4b2a      	ldr	r3, [pc, #168]	; (8008ee0 <xPortStartScheduler+0xd8>)
 8008e38:	2207      	movs	r2, #7
 8008e3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e3c:	e009      	b.n	8008e52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008e3e:	4b28      	ldr	r3, [pc, #160]	; (8008ee0 <xPortStartScheduler+0xd8>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	4a26      	ldr	r2, [pc, #152]	; (8008ee0 <xPortStartScheduler+0xd8>)
 8008e46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e52:	78fb      	ldrb	r3, [r7, #3]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e5a:	2b80      	cmp	r3, #128	; 0x80
 8008e5c:	d0ef      	beq.n	8008e3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e5e:	4b20      	ldr	r3, [pc, #128]	; (8008ee0 <xPortStartScheduler+0xd8>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f1c3 0307 	rsb	r3, r3, #7
 8008e66:	2b04      	cmp	r3, #4
 8008e68:	d00a      	beq.n	8008e80 <xPortStartScheduler+0x78>
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	60bb      	str	r3, [r7, #8]
}
 8008e7c:	bf00      	nop
 8008e7e:	e7fe      	b.n	8008e7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e80:	4b17      	ldr	r3, [pc, #92]	; (8008ee0 <xPortStartScheduler+0xd8>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	021b      	lsls	r3, r3, #8
 8008e86:	4a16      	ldr	r2, [pc, #88]	; (8008ee0 <xPortStartScheduler+0xd8>)
 8008e88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e8a:	4b15      	ldr	r3, [pc, #84]	; (8008ee0 <xPortStartScheduler+0xd8>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e92:	4a13      	ldr	r2, [pc, #76]	; (8008ee0 <xPortStartScheduler+0xd8>)
 8008e94:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e9e:	4b11      	ldr	r3, [pc, #68]	; (8008ee4 <xPortStartScheduler+0xdc>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a10      	ldr	r2, [pc, #64]	; (8008ee4 <xPortStartScheduler+0xdc>)
 8008ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ea8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008eaa:	4b0e      	ldr	r3, [pc, #56]	; (8008ee4 <xPortStartScheduler+0xdc>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a0d      	ldr	r2, [pc, #52]	; (8008ee4 <xPortStartScheduler+0xdc>)
 8008eb0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008eb4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008eb6:	f000 f8b9 	bl	800902c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008eba:	4b0b      	ldr	r3, [pc, #44]	; (8008ee8 <xPortStartScheduler+0xe0>)
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ec0:	f7ff ff92 	bl	8008de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ec4:	f7ff f832 	bl	8007f2c <vTaskSwitchContext>
	prvTaskExitError();
 8008ec8:	f7ff ff4c 	bl	8008d64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	e000e400 	.word	0xe000e400
 8008edc:	200015f0 	.word	0x200015f0
 8008ee0:	200015f4 	.word	0x200015f4
 8008ee4:	e000ed20 	.word	0xe000ed20
 8008ee8:	2000000c 	.word	0x2000000c

08008eec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	607b      	str	r3, [r7, #4]
}
 8008f04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f06:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <vPortEnterCritical+0x58>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	4a0d      	ldr	r2, [pc, #52]	; (8008f44 <vPortEnterCritical+0x58>)
 8008f0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f10:	4b0c      	ldr	r3, [pc, #48]	; (8008f44 <vPortEnterCritical+0x58>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d10f      	bne.n	8008f38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f18:	4b0b      	ldr	r3, [pc, #44]	; (8008f48 <vPortEnterCritical+0x5c>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00a      	beq.n	8008f38 <vPortEnterCritical+0x4c>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	603b      	str	r3, [r7, #0]
}
 8008f34:	bf00      	nop
 8008f36:	e7fe      	b.n	8008f36 <vPortEnterCritical+0x4a>
	}
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bc80      	pop	{r7}
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	2000000c 	.word	0x2000000c
 8008f48:	e000ed04 	.word	0xe000ed04

08008f4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f52:	4b11      	ldr	r3, [pc, #68]	; (8008f98 <vPortExitCritical+0x4c>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <vPortExitCritical+0x24>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	607b      	str	r3, [r7, #4]
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008f70:	4b09      	ldr	r3, [pc, #36]	; (8008f98 <vPortExitCritical+0x4c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3b01      	subs	r3, #1
 8008f76:	4a08      	ldr	r2, [pc, #32]	; (8008f98 <vPortExitCritical+0x4c>)
 8008f78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f7a:	4b07      	ldr	r3, [pc, #28]	; (8008f98 <vPortExitCritical+0x4c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d105      	bne.n	8008f8e <vPortExitCritical+0x42>
 8008f82:	2300      	movs	r3, #0
 8008f84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	f383 8811 	msr	BASEPRI, r3
}
 8008f8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f8e:	bf00      	nop
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bc80      	pop	{r7}
 8008f96:	4770      	bx	lr
 8008f98:	2000000c 	.word	0x2000000c
 8008f9c:	00000000 	.word	0x00000000

08008fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008fa0:	f3ef 8009 	mrs	r0, PSP
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	4b0d      	ldr	r3, [pc, #52]	; (8008fe0 <pxCurrentTCBConst>)
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008fb0:	6010      	str	r0, [r2, #0]
 8008fb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008fb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008fba:	f380 8811 	msr	BASEPRI, r0
 8008fbe:	f7fe ffb5 	bl	8007f2c <vTaskSwitchContext>
 8008fc2:	f04f 0000 	mov.w	r0, #0
 8008fc6:	f380 8811 	msr	BASEPRI, r0
 8008fca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008fce:	6819      	ldr	r1, [r3, #0]
 8008fd0:	6808      	ldr	r0, [r1, #0]
 8008fd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008fd6:	f380 8809 	msr	PSP, r0
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	4770      	bx	lr

08008fe0 <pxCurrentTCBConst>:
 8008fe0:	20001014 	.word	0x20001014
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop

08008fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	607b      	str	r3, [r7, #4]
}
 8009000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009002:	f7fe fed5 	bl	8007db0 <xTaskIncrementTick>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800900c:	4b06      	ldr	r3, [pc, #24]	; (8009028 <SysTick_Handler+0x40>)
 800900e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	2300      	movs	r3, #0
 8009016:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	f383 8811 	msr	BASEPRI, r3
}
 800901e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009020:	bf00      	nop
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	e000ed04 	.word	0xe000ed04

0800902c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800902c:	b480      	push	{r7}
 800902e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009030:	4b0a      	ldr	r3, [pc, #40]	; (800905c <vPortSetupTimerInterrupt+0x30>)
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009036:	4b0a      	ldr	r3, [pc, #40]	; (8009060 <vPortSetupTimerInterrupt+0x34>)
 8009038:	2200      	movs	r2, #0
 800903a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800903c:	4b09      	ldr	r3, [pc, #36]	; (8009064 <vPortSetupTimerInterrupt+0x38>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a09      	ldr	r2, [pc, #36]	; (8009068 <vPortSetupTimerInterrupt+0x3c>)
 8009042:	fba2 2303 	umull	r2, r3, r2, r3
 8009046:	099b      	lsrs	r3, r3, #6
 8009048:	4a08      	ldr	r2, [pc, #32]	; (800906c <vPortSetupTimerInterrupt+0x40>)
 800904a:	3b01      	subs	r3, #1
 800904c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800904e:	4b03      	ldr	r3, [pc, #12]	; (800905c <vPortSetupTimerInterrupt+0x30>)
 8009050:	2207      	movs	r2, #7
 8009052:	601a      	str	r2, [r3, #0]
}
 8009054:	bf00      	nop
 8009056:	46bd      	mov	sp, r7
 8009058:	bc80      	pop	{r7}
 800905a:	4770      	bx	lr
 800905c:	e000e010 	.word	0xe000e010
 8009060:	e000e018 	.word	0xe000e018
 8009064:	20000000 	.word	0x20000000
 8009068:	10624dd3 	.word	0x10624dd3
 800906c:	e000e014 	.word	0xe000e014

08009070 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009076:	f3ef 8305 	mrs	r3, IPSR
 800907a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b0f      	cmp	r3, #15
 8009080:	d914      	bls.n	80090ac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009082:	4a16      	ldr	r2, [pc, #88]	; (80090dc <vPortValidateInterruptPriority+0x6c>)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	4413      	add	r3, r2
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800908c:	4b14      	ldr	r3, [pc, #80]	; (80090e0 <vPortValidateInterruptPriority+0x70>)
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	7afa      	ldrb	r2, [r7, #11]
 8009092:	429a      	cmp	r2, r3
 8009094:	d20a      	bcs.n	80090ac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	607b      	str	r3, [r7, #4]
}
 80090a8:	bf00      	nop
 80090aa:	e7fe      	b.n	80090aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090ac:	4b0d      	ldr	r3, [pc, #52]	; (80090e4 <vPortValidateInterruptPriority+0x74>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80090b4:	4b0c      	ldr	r3, [pc, #48]	; (80090e8 <vPortValidateInterruptPriority+0x78>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d90a      	bls.n	80090d2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80090bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c0:	f383 8811 	msr	BASEPRI, r3
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	603b      	str	r3, [r7, #0]
}
 80090ce:	bf00      	nop
 80090d0:	e7fe      	b.n	80090d0 <vPortValidateInterruptPriority+0x60>
	}
 80090d2:	bf00      	nop
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bc80      	pop	{r7}
 80090da:	4770      	bx	lr
 80090dc:	e000e3f0 	.word	0xe000e3f0
 80090e0:	200015f0 	.word	0x200015f0
 80090e4:	e000ed0c 	.word	0xe000ed0c
 80090e8:	200015f4 	.word	0x200015f4

080090ec <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 80090f4:	f7fe fda2 	bl	8007c3c <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f843 	bl	8009184 <malloc>
 80090fe:	4603      	mov	r3, r0
 8009100:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009102:	f7fe fda9 	bl	8007c58 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8009106:	68fb      	ldr	r3, [r7, #12]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	if( pv )
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d006      	beq.n	800912c <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800911e:	f7fe fd8d 	bl	8007c3c <vTaskSuspendAll>
		{
			free( pv );
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f836 	bl	8009194 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8009128:	f7fe fd96 	bl	8007c58 <xTaskResumeAll>
	}
}
 800912c:	bf00      	nop
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <_ZdlPvj>:
 8009134:	f000 b814 	b.w	8009160 <_ZdlPv>

08009138 <_Znwj>:
 8009138:	2801      	cmp	r0, #1
 800913a:	bf38      	it	cc
 800913c:	2001      	movcc	r0, #1
 800913e:	b510      	push	{r4, lr}
 8009140:	4604      	mov	r4, r0
 8009142:	4620      	mov	r0, r4
 8009144:	f000 f81e 	bl	8009184 <malloc>
 8009148:	b100      	cbz	r0, 800914c <_Znwj+0x14>
 800914a:	bd10      	pop	{r4, pc}
 800914c:	f000 f80a 	bl	8009164 <_ZSt15get_new_handlerv>
 8009150:	b908      	cbnz	r0, 8009156 <_Znwj+0x1e>
 8009152:	f000 f80f 	bl	8009174 <abort>
 8009156:	4780      	blx	r0
 8009158:	e7f3      	b.n	8009142 <_Znwj+0xa>

0800915a <_ZSt25__throw_bad_function_callv>:
 800915a:	b508      	push	{r3, lr}
 800915c:	f000 f80a 	bl	8009174 <abort>

08009160 <_ZdlPv>:
 8009160:	f000 b818 	b.w	8009194 <free>

08009164 <_ZSt15get_new_handlerv>:
 8009164:	4b02      	ldr	r3, [pc, #8]	; (8009170 <_ZSt15get_new_handlerv+0xc>)
 8009166:	6818      	ldr	r0, [r3, #0]
 8009168:	f3bf 8f5b 	dmb	ish
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	200015f8 	.word	0x200015f8

08009174 <abort>:
 8009174:	2006      	movs	r0, #6
 8009176:	b508      	push	{r3, lr}
 8009178:	f000 f8f0 	bl	800935c <raise>
 800917c:	2001      	movs	r0, #1
 800917e:	f7f9 fabe 	bl	80026fe <_exit>
	...

08009184 <malloc>:
 8009184:	4b02      	ldr	r3, [pc, #8]	; (8009190 <malloc+0xc>)
 8009186:	4601      	mov	r1, r0
 8009188:	6818      	ldr	r0, [r3, #0]
 800918a:	f000 b82b 	b.w	80091e4 <_malloc_r>
 800918e:	bf00      	nop
 8009190:	2000005c 	.word	0x2000005c

08009194 <free>:
 8009194:	4b02      	ldr	r3, [pc, #8]	; (80091a0 <free+0xc>)
 8009196:	4601      	mov	r1, r0
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	f000 b99b 	b.w	80094d4 <_free_r>
 800919e:	bf00      	nop
 80091a0:	2000005c 	.word	0x2000005c

080091a4 <sbrk_aligned>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	4e0e      	ldr	r6, [pc, #56]	; (80091e0 <sbrk_aligned+0x3c>)
 80091a8:	460c      	mov	r4, r1
 80091aa:	6831      	ldr	r1, [r6, #0]
 80091ac:	4605      	mov	r5, r0
 80091ae:	b911      	cbnz	r1, 80091b6 <sbrk_aligned+0x12>
 80091b0:	f000 f946 	bl	8009440 <_sbrk_r>
 80091b4:	6030      	str	r0, [r6, #0]
 80091b6:	4621      	mov	r1, r4
 80091b8:	4628      	mov	r0, r5
 80091ba:	f000 f941 	bl	8009440 <_sbrk_r>
 80091be:	1c43      	adds	r3, r0, #1
 80091c0:	d00a      	beq.n	80091d8 <sbrk_aligned+0x34>
 80091c2:	1cc4      	adds	r4, r0, #3
 80091c4:	f024 0403 	bic.w	r4, r4, #3
 80091c8:	42a0      	cmp	r0, r4
 80091ca:	d007      	beq.n	80091dc <sbrk_aligned+0x38>
 80091cc:	1a21      	subs	r1, r4, r0
 80091ce:	4628      	mov	r0, r5
 80091d0:	f000 f936 	bl	8009440 <_sbrk_r>
 80091d4:	3001      	adds	r0, #1
 80091d6:	d101      	bne.n	80091dc <sbrk_aligned+0x38>
 80091d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80091dc:	4620      	mov	r0, r4
 80091de:	bd70      	pop	{r4, r5, r6, pc}
 80091e0:	20001600 	.word	0x20001600

080091e4 <_malloc_r>:
 80091e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091e8:	1ccd      	adds	r5, r1, #3
 80091ea:	f025 0503 	bic.w	r5, r5, #3
 80091ee:	3508      	adds	r5, #8
 80091f0:	2d0c      	cmp	r5, #12
 80091f2:	bf38      	it	cc
 80091f4:	250c      	movcc	r5, #12
 80091f6:	2d00      	cmp	r5, #0
 80091f8:	4607      	mov	r7, r0
 80091fa:	db01      	blt.n	8009200 <_malloc_r+0x1c>
 80091fc:	42a9      	cmp	r1, r5
 80091fe:	d905      	bls.n	800920c <_malloc_r+0x28>
 8009200:	230c      	movs	r3, #12
 8009202:	2600      	movs	r6, #0
 8009204:	603b      	str	r3, [r7, #0]
 8009206:	4630      	mov	r0, r6
 8009208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800920c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80092e0 <_malloc_r+0xfc>
 8009210:	f000 f868 	bl	80092e4 <__malloc_lock>
 8009214:	f8d8 3000 	ldr.w	r3, [r8]
 8009218:	461c      	mov	r4, r3
 800921a:	bb5c      	cbnz	r4, 8009274 <_malloc_r+0x90>
 800921c:	4629      	mov	r1, r5
 800921e:	4638      	mov	r0, r7
 8009220:	f7ff ffc0 	bl	80091a4 <sbrk_aligned>
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	4604      	mov	r4, r0
 8009228:	d155      	bne.n	80092d6 <_malloc_r+0xf2>
 800922a:	f8d8 4000 	ldr.w	r4, [r8]
 800922e:	4626      	mov	r6, r4
 8009230:	2e00      	cmp	r6, #0
 8009232:	d145      	bne.n	80092c0 <_malloc_r+0xdc>
 8009234:	2c00      	cmp	r4, #0
 8009236:	d048      	beq.n	80092ca <_malloc_r+0xe6>
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	4631      	mov	r1, r6
 800923c:	4638      	mov	r0, r7
 800923e:	eb04 0903 	add.w	r9, r4, r3
 8009242:	f000 f8fd 	bl	8009440 <_sbrk_r>
 8009246:	4581      	cmp	r9, r0
 8009248:	d13f      	bne.n	80092ca <_malloc_r+0xe6>
 800924a:	6821      	ldr	r1, [r4, #0]
 800924c:	4638      	mov	r0, r7
 800924e:	1a6d      	subs	r5, r5, r1
 8009250:	4629      	mov	r1, r5
 8009252:	f7ff ffa7 	bl	80091a4 <sbrk_aligned>
 8009256:	3001      	adds	r0, #1
 8009258:	d037      	beq.n	80092ca <_malloc_r+0xe6>
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	442b      	add	r3, r5
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	f8d8 3000 	ldr.w	r3, [r8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d038      	beq.n	80092da <_malloc_r+0xf6>
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	42a2      	cmp	r2, r4
 800926c:	d12b      	bne.n	80092c6 <_malloc_r+0xe2>
 800926e:	2200      	movs	r2, #0
 8009270:	605a      	str	r2, [r3, #4]
 8009272:	e00f      	b.n	8009294 <_malloc_r+0xb0>
 8009274:	6822      	ldr	r2, [r4, #0]
 8009276:	1b52      	subs	r2, r2, r5
 8009278:	d41f      	bmi.n	80092ba <_malloc_r+0xd6>
 800927a:	2a0b      	cmp	r2, #11
 800927c:	d917      	bls.n	80092ae <_malloc_r+0xca>
 800927e:	1961      	adds	r1, r4, r5
 8009280:	42a3      	cmp	r3, r4
 8009282:	6025      	str	r5, [r4, #0]
 8009284:	bf18      	it	ne
 8009286:	6059      	strne	r1, [r3, #4]
 8009288:	6863      	ldr	r3, [r4, #4]
 800928a:	bf08      	it	eq
 800928c:	f8c8 1000 	streq.w	r1, [r8]
 8009290:	5162      	str	r2, [r4, r5]
 8009292:	604b      	str	r3, [r1, #4]
 8009294:	4638      	mov	r0, r7
 8009296:	f104 060b 	add.w	r6, r4, #11
 800929a:	f000 f829 	bl	80092f0 <__malloc_unlock>
 800929e:	f026 0607 	bic.w	r6, r6, #7
 80092a2:	1d23      	adds	r3, r4, #4
 80092a4:	1af2      	subs	r2, r6, r3
 80092a6:	d0ae      	beq.n	8009206 <_malloc_r+0x22>
 80092a8:	1b9b      	subs	r3, r3, r6
 80092aa:	50a3      	str	r3, [r4, r2]
 80092ac:	e7ab      	b.n	8009206 <_malloc_r+0x22>
 80092ae:	42a3      	cmp	r3, r4
 80092b0:	6862      	ldr	r2, [r4, #4]
 80092b2:	d1dd      	bne.n	8009270 <_malloc_r+0x8c>
 80092b4:	f8c8 2000 	str.w	r2, [r8]
 80092b8:	e7ec      	b.n	8009294 <_malloc_r+0xb0>
 80092ba:	4623      	mov	r3, r4
 80092bc:	6864      	ldr	r4, [r4, #4]
 80092be:	e7ac      	b.n	800921a <_malloc_r+0x36>
 80092c0:	4634      	mov	r4, r6
 80092c2:	6876      	ldr	r6, [r6, #4]
 80092c4:	e7b4      	b.n	8009230 <_malloc_r+0x4c>
 80092c6:	4613      	mov	r3, r2
 80092c8:	e7cc      	b.n	8009264 <_malloc_r+0x80>
 80092ca:	230c      	movs	r3, #12
 80092cc:	4638      	mov	r0, r7
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	f000 f80e 	bl	80092f0 <__malloc_unlock>
 80092d4:	e797      	b.n	8009206 <_malloc_r+0x22>
 80092d6:	6025      	str	r5, [r4, #0]
 80092d8:	e7dc      	b.n	8009294 <_malloc_r+0xb0>
 80092da:	605b      	str	r3, [r3, #4]
 80092dc:	deff      	udf	#255	; 0xff
 80092de:	bf00      	nop
 80092e0:	200015fc 	.word	0x200015fc

080092e4 <__malloc_lock>:
 80092e4:	4801      	ldr	r0, [pc, #4]	; (80092ec <__malloc_lock+0x8>)
 80092e6:	f000 b8e5 	b.w	80094b4 <__retarget_lock_acquire_recursive>
 80092ea:	bf00      	nop
 80092ec:	20001740 	.word	0x20001740

080092f0 <__malloc_unlock>:
 80092f0:	4801      	ldr	r0, [pc, #4]	; (80092f8 <__malloc_unlock+0x8>)
 80092f2:	f000 b8e0 	b.w	80094b6 <__retarget_lock_release_recursive>
 80092f6:	bf00      	nop
 80092f8:	20001740 	.word	0x20001740

080092fc <memset>:
 80092fc:	4603      	mov	r3, r0
 80092fe:	4402      	add	r2, r0
 8009300:	4293      	cmp	r3, r2
 8009302:	d100      	bne.n	8009306 <memset+0xa>
 8009304:	4770      	bx	lr
 8009306:	f803 1b01 	strb.w	r1, [r3], #1
 800930a:	e7f9      	b.n	8009300 <memset+0x4>

0800930c <_raise_r>:
 800930c:	291f      	cmp	r1, #31
 800930e:	b538      	push	{r3, r4, r5, lr}
 8009310:	4604      	mov	r4, r0
 8009312:	460d      	mov	r5, r1
 8009314:	d904      	bls.n	8009320 <_raise_r+0x14>
 8009316:	2316      	movs	r3, #22
 8009318:	6003      	str	r3, [r0, #0]
 800931a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800931e:	bd38      	pop	{r3, r4, r5, pc}
 8009320:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009322:	b112      	cbz	r2, 800932a <_raise_r+0x1e>
 8009324:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009328:	b94b      	cbnz	r3, 800933e <_raise_r+0x32>
 800932a:	4620      	mov	r0, r4
 800932c:	f000 f886 	bl	800943c <_getpid_r>
 8009330:	462a      	mov	r2, r5
 8009332:	4601      	mov	r1, r0
 8009334:	4620      	mov	r0, r4
 8009336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800933a:	f000 b86d 	b.w	8009418 <_kill_r>
 800933e:	2b01      	cmp	r3, #1
 8009340:	d00a      	beq.n	8009358 <_raise_r+0x4c>
 8009342:	1c59      	adds	r1, r3, #1
 8009344:	d103      	bne.n	800934e <_raise_r+0x42>
 8009346:	2316      	movs	r3, #22
 8009348:	6003      	str	r3, [r0, #0]
 800934a:	2001      	movs	r0, #1
 800934c:	e7e7      	b.n	800931e <_raise_r+0x12>
 800934e:	2400      	movs	r4, #0
 8009350:	4628      	mov	r0, r5
 8009352:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009356:	4798      	blx	r3
 8009358:	2000      	movs	r0, #0
 800935a:	e7e0      	b.n	800931e <_raise_r+0x12>

0800935c <raise>:
 800935c:	4b02      	ldr	r3, [pc, #8]	; (8009368 <raise+0xc>)
 800935e:	4601      	mov	r1, r0
 8009360:	6818      	ldr	r0, [r3, #0]
 8009362:	f7ff bfd3 	b.w	800930c <_raise_r>
 8009366:	bf00      	nop
 8009368:	2000005c 	.word	0x2000005c

0800936c <_reclaim_reent>:
 800936c:	4b29      	ldr	r3, [pc, #164]	; (8009414 <_reclaim_reent+0xa8>)
 800936e:	b570      	push	{r4, r5, r6, lr}
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4604      	mov	r4, r0
 8009374:	4283      	cmp	r3, r0
 8009376:	d04b      	beq.n	8009410 <_reclaim_reent+0xa4>
 8009378:	69c3      	ldr	r3, [r0, #28]
 800937a:	b143      	cbz	r3, 800938e <_reclaim_reent+0x22>
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d144      	bne.n	800940c <_reclaim_reent+0xa0>
 8009382:	69e3      	ldr	r3, [r4, #28]
 8009384:	6819      	ldr	r1, [r3, #0]
 8009386:	b111      	cbz	r1, 800938e <_reclaim_reent+0x22>
 8009388:	4620      	mov	r0, r4
 800938a:	f000 f8a3 	bl	80094d4 <_free_r>
 800938e:	6961      	ldr	r1, [r4, #20]
 8009390:	b111      	cbz	r1, 8009398 <_reclaim_reent+0x2c>
 8009392:	4620      	mov	r0, r4
 8009394:	f000 f89e 	bl	80094d4 <_free_r>
 8009398:	69e1      	ldr	r1, [r4, #28]
 800939a:	b111      	cbz	r1, 80093a2 <_reclaim_reent+0x36>
 800939c:	4620      	mov	r0, r4
 800939e:	f000 f899 	bl	80094d4 <_free_r>
 80093a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80093a4:	b111      	cbz	r1, 80093ac <_reclaim_reent+0x40>
 80093a6:	4620      	mov	r0, r4
 80093a8:	f000 f894 	bl	80094d4 <_free_r>
 80093ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093ae:	b111      	cbz	r1, 80093b6 <_reclaim_reent+0x4a>
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 f88f 	bl	80094d4 <_free_r>
 80093b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80093b8:	b111      	cbz	r1, 80093c0 <_reclaim_reent+0x54>
 80093ba:	4620      	mov	r0, r4
 80093bc:	f000 f88a 	bl	80094d4 <_free_r>
 80093c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80093c2:	b111      	cbz	r1, 80093ca <_reclaim_reent+0x5e>
 80093c4:	4620      	mov	r0, r4
 80093c6:	f000 f885 	bl	80094d4 <_free_r>
 80093ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80093cc:	b111      	cbz	r1, 80093d4 <_reclaim_reent+0x68>
 80093ce:	4620      	mov	r0, r4
 80093d0:	f000 f880 	bl	80094d4 <_free_r>
 80093d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80093d6:	b111      	cbz	r1, 80093de <_reclaim_reent+0x72>
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 f87b 	bl	80094d4 <_free_r>
 80093de:	6a23      	ldr	r3, [r4, #32]
 80093e0:	b1b3      	cbz	r3, 8009410 <_reclaim_reent+0xa4>
 80093e2:	4620      	mov	r0, r4
 80093e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80093e8:	4718      	bx	r3
 80093ea:	5949      	ldr	r1, [r1, r5]
 80093ec:	b941      	cbnz	r1, 8009400 <_reclaim_reent+0x94>
 80093ee:	3504      	adds	r5, #4
 80093f0:	69e3      	ldr	r3, [r4, #28]
 80093f2:	2d80      	cmp	r5, #128	; 0x80
 80093f4:	68d9      	ldr	r1, [r3, #12]
 80093f6:	d1f8      	bne.n	80093ea <_reclaim_reent+0x7e>
 80093f8:	4620      	mov	r0, r4
 80093fa:	f000 f86b 	bl	80094d4 <_free_r>
 80093fe:	e7c0      	b.n	8009382 <_reclaim_reent+0x16>
 8009400:	680e      	ldr	r6, [r1, #0]
 8009402:	4620      	mov	r0, r4
 8009404:	f000 f866 	bl	80094d4 <_free_r>
 8009408:	4631      	mov	r1, r6
 800940a:	e7ef      	b.n	80093ec <_reclaim_reent+0x80>
 800940c:	2500      	movs	r5, #0
 800940e:	e7ef      	b.n	80093f0 <_reclaim_reent+0x84>
 8009410:	bd70      	pop	{r4, r5, r6, pc}
 8009412:	bf00      	nop
 8009414:	2000005c 	.word	0x2000005c

08009418 <_kill_r>:
 8009418:	b538      	push	{r3, r4, r5, lr}
 800941a:	2300      	movs	r3, #0
 800941c:	4d06      	ldr	r5, [pc, #24]	; (8009438 <_kill_r+0x20>)
 800941e:	4604      	mov	r4, r0
 8009420:	4608      	mov	r0, r1
 8009422:	4611      	mov	r1, r2
 8009424:	602b      	str	r3, [r5, #0]
 8009426:	f7f9 f95a 	bl	80026de <_kill>
 800942a:	1c43      	adds	r3, r0, #1
 800942c:	d102      	bne.n	8009434 <_kill_r+0x1c>
 800942e:	682b      	ldr	r3, [r5, #0]
 8009430:	b103      	cbz	r3, 8009434 <_kill_r+0x1c>
 8009432:	6023      	str	r3, [r4, #0]
 8009434:	bd38      	pop	{r3, r4, r5, pc}
 8009436:	bf00      	nop
 8009438:	2000173c 	.word	0x2000173c

0800943c <_getpid_r>:
 800943c:	f7f9 b948 	b.w	80026d0 <_getpid>

08009440 <_sbrk_r>:
 8009440:	b538      	push	{r3, r4, r5, lr}
 8009442:	2300      	movs	r3, #0
 8009444:	4d05      	ldr	r5, [pc, #20]	; (800945c <_sbrk_r+0x1c>)
 8009446:	4604      	mov	r4, r0
 8009448:	4608      	mov	r0, r1
 800944a:	602b      	str	r3, [r5, #0]
 800944c:	f7f9 f962 	bl	8002714 <_sbrk>
 8009450:	1c43      	adds	r3, r0, #1
 8009452:	d102      	bne.n	800945a <_sbrk_r+0x1a>
 8009454:	682b      	ldr	r3, [r5, #0]
 8009456:	b103      	cbz	r3, 800945a <_sbrk_r+0x1a>
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	bd38      	pop	{r3, r4, r5, pc}
 800945c:	2000173c 	.word	0x2000173c

08009460 <__errno>:
 8009460:	4b01      	ldr	r3, [pc, #4]	; (8009468 <__errno+0x8>)
 8009462:	6818      	ldr	r0, [r3, #0]
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	2000005c 	.word	0x2000005c

0800946c <__libc_init_array>:
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	2600      	movs	r6, #0
 8009470:	4d0c      	ldr	r5, [pc, #48]	; (80094a4 <__libc_init_array+0x38>)
 8009472:	4c0d      	ldr	r4, [pc, #52]	; (80094a8 <__libc_init_array+0x3c>)
 8009474:	1b64      	subs	r4, r4, r5
 8009476:	10a4      	asrs	r4, r4, #2
 8009478:	42a6      	cmp	r6, r4
 800947a:	d109      	bne.n	8009490 <__libc_init_array+0x24>
 800947c:	f000 f872 	bl	8009564 <_init>
 8009480:	2600      	movs	r6, #0
 8009482:	4d0a      	ldr	r5, [pc, #40]	; (80094ac <__libc_init_array+0x40>)
 8009484:	4c0a      	ldr	r4, [pc, #40]	; (80094b0 <__libc_init_array+0x44>)
 8009486:	1b64      	subs	r4, r4, r5
 8009488:	10a4      	asrs	r4, r4, #2
 800948a:	42a6      	cmp	r6, r4
 800948c:	d105      	bne.n	800949a <__libc_init_array+0x2e>
 800948e:	bd70      	pop	{r4, r5, r6, pc}
 8009490:	f855 3b04 	ldr.w	r3, [r5], #4
 8009494:	4798      	blx	r3
 8009496:	3601      	adds	r6, #1
 8009498:	e7ee      	b.n	8009478 <__libc_init_array+0xc>
 800949a:	f855 3b04 	ldr.w	r3, [r5], #4
 800949e:	4798      	blx	r3
 80094a0:	3601      	adds	r6, #1
 80094a2:	e7f2      	b.n	800948a <__libc_init_array+0x1e>
 80094a4:	0800992c 	.word	0x0800992c
 80094a8:	0800992c 	.word	0x0800992c
 80094ac:	0800992c 	.word	0x0800992c
 80094b0:	08009938 	.word	0x08009938

080094b4 <__retarget_lock_acquire_recursive>:
 80094b4:	4770      	bx	lr

080094b6 <__retarget_lock_release_recursive>:
 80094b6:	4770      	bx	lr

080094b8 <memcpy>:
 80094b8:	440a      	add	r2, r1
 80094ba:	4291      	cmp	r1, r2
 80094bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80094c0:	d100      	bne.n	80094c4 <memcpy+0xc>
 80094c2:	4770      	bx	lr
 80094c4:	b510      	push	{r4, lr}
 80094c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ca:	4291      	cmp	r1, r2
 80094cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094d0:	d1f9      	bne.n	80094c6 <memcpy+0xe>
 80094d2:	bd10      	pop	{r4, pc}

080094d4 <_free_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	4605      	mov	r5, r0
 80094d8:	2900      	cmp	r1, #0
 80094da:	d040      	beq.n	800955e <_free_r+0x8a>
 80094dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094e0:	1f0c      	subs	r4, r1, #4
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	bfb8      	it	lt
 80094e6:	18e4      	addlt	r4, r4, r3
 80094e8:	f7ff fefc 	bl	80092e4 <__malloc_lock>
 80094ec:	4a1c      	ldr	r2, [pc, #112]	; (8009560 <_free_r+0x8c>)
 80094ee:	6813      	ldr	r3, [r2, #0]
 80094f0:	b933      	cbnz	r3, 8009500 <_free_r+0x2c>
 80094f2:	6063      	str	r3, [r4, #4]
 80094f4:	6014      	str	r4, [r2, #0]
 80094f6:	4628      	mov	r0, r5
 80094f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094fc:	f7ff bef8 	b.w	80092f0 <__malloc_unlock>
 8009500:	42a3      	cmp	r3, r4
 8009502:	d908      	bls.n	8009516 <_free_r+0x42>
 8009504:	6820      	ldr	r0, [r4, #0]
 8009506:	1821      	adds	r1, r4, r0
 8009508:	428b      	cmp	r3, r1
 800950a:	bf01      	itttt	eq
 800950c:	6819      	ldreq	r1, [r3, #0]
 800950e:	685b      	ldreq	r3, [r3, #4]
 8009510:	1809      	addeq	r1, r1, r0
 8009512:	6021      	streq	r1, [r4, #0]
 8009514:	e7ed      	b.n	80094f2 <_free_r+0x1e>
 8009516:	461a      	mov	r2, r3
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	b10b      	cbz	r3, 8009520 <_free_r+0x4c>
 800951c:	42a3      	cmp	r3, r4
 800951e:	d9fa      	bls.n	8009516 <_free_r+0x42>
 8009520:	6811      	ldr	r1, [r2, #0]
 8009522:	1850      	adds	r0, r2, r1
 8009524:	42a0      	cmp	r0, r4
 8009526:	d10b      	bne.n	8009540 <_free_r+0x6c>
 8009528:	6820      	ldr	r0, [r4, #0]
 800952a:	4401      	add	r1, r0
 800952c:	1850      	adds	r0, r2, r1
 800952e:	4283      	cmp	r3, r0
 8009530:	6011      	str	r1, [r2, #0]
 8009532:	d1e0      	bne.n	80094f6 <_free_r+0x22>
 8009534:	6818      	ldr	r0, [r3, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	4408      	add	r0, r1
 800953a:	6010      	str	r0, [r2, #0]
 800953c:	6053      	str	r3, [r2, #4]
 800953e:	e7da      	b.n	80094f6 <_free_r+0x22>
 8009540:	d902      	bls.n	8009548 <_free_r+0x74>
 8009542:	230c      	movs	r3, #12
 8009544:	602b      	str	r3, [r5, #0]
 8009546:	e7d6      	b.n	80094f6 <_free_r+0x22>
 8009548:	6820      	ldr	r0, [r4, #0]
 800954a:	1821      	adds	r1, r4, r0
 800954c:	428b      	cmp	r3, r1
 800954e:	bf01      	itttt	eq
 8009550:	6819      	ldreq	r1, [r3, #0]
 8009552:	685b      	ldreq	r3, [r3, #4]
 8009554:	1809      	addeq	r1, r1, r0
 8009556:	6021      	streq	r1, [r4, #0]
 8009558:	6063      	str	r3, [r4, #4]
 800955a:	6054      	str	r4, [r2, #4]
 800955c:	e7cb      	b.n	80094f6 <_free_r+0x22>
 800955e:	bd38      	pop	{r3, r4, r5, pc}
 8009560:	200015fc 	.word	0x200015fc

08009564 <_init>:
 8009564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009566:	bf00      	nop
 8009568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956a:	bc08      	pop	{r3}
 800956c:	469e      	mov	lr, r3
 800956e:	4770      	bx	lr

08009570 <_fini>:
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	bf00      	nop
 8009574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009576:	bc08      	pop	{r3}
 8009578:	469e      	mov	lr, r3
 800957a:	4770      	bx	lr
